ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"SEGGER_RTT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/SEGGER_RTT.c"
  20              		.section	.data._aTerminalId,"aw"
  21              		.align	2
  24              	_aTerminalId:
  25 0000 30313233 		.ascii	"0123456789ABCDEF"
  25      34353637 
  25      38394142 
  25      43444546 
  26              		.global	_SEGGER_RTT
  27              		.section	.bss._SEGGER_RTT,"aw",%nobits
  28              		.align	2
  31              	_SEGGER_RTT:
  32 0000 00000000 		.space	168
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.section	.bss._acUpBuffer,"aw",%nobits
  34              		.align	2
  37              	_acUpBuffer:
  38 0000 00000000 		.space	1024
  38      00000000 
  38      00000000 
  38      00000000 
  38      00000000 
  39              		.section	.bss._acDownBuffer,"aw",%nobits
  40              		.align	2
  43              	_acDownBuffer:
  44 0000 00000000 		.space	16
  44      00000000 
  44      00000000 
  44      00000000 
  45              		.section	.bss._ActiveTerminal,"aw",%nobits
  48              	_ActiveTerminal:
  49 0000 00       		.space	1
  50              		.section	.rodata
  51              		.align	2
  52              	.LC0:
  53 0000 5465726D 		.ascii	"Terminal\000"
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 2


  53      696E616C 
  53      00
  54              		.section	.text._DoInit,"ax",%progbits
  55              		.align	1
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  60              	_DoInit:
  61              	.LFB0:
   1:Core/Src/SEGGER_RTT.c **** /*********************************************************************
   2:Core/Src/SEGGER_RTT.c **** *                    SEGGER Microcontroller GmbH                     *
   3:Core/Src/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:Core/Src/SEGGER_RTT.c **** **********************************************************************
   5:Core/Src/SEGGER_RTT.c **** *                                                                    *
   6:Core/Src/SEGGER_RTT.c **** *            (c) 1995 - 2021 SEGGER Microcontroller GmbH             *
   7:Core/Src/SEGGER_RTT.c **** *                                                                    *
   8:Core/Src/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:Core/Src/SEGGER_RTT.c **** *                                                                    *
  10:Core/Src/SEGGER_RTT.c **** **********************************************************************
  11:Core/Src/SEGGER_RTT.c **** *                                                                    *
  12:Core/Src/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:Core/Src/SEGGER_RTT.c **** *                                                                    *
  14:Core/Src/SEGGER_RTT.c **** **********************************************************************
  15:Core/Src/SEGGER_RTT.c **** *                                                                    *
  16:Core/Src/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:Core/Src/SEGGER_RTT.c **** *                                                                    *
  18:Core/Src/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:Core/Src/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:Core/Src/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:Core/Src/SEGGER_RTT.c **** *                                                                    *
  22:Core/Src/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:Core/Src/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:Core/Src/SEGGER_RTT.c **** * condition is met:                                                  *
  25:Core/Src/SEGGER_RTT.c **** *                                                                    *
  26:Core/Src/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:Core/Src/SEGGER_RTT.c **** *   notice, this condition and the following disclaimer.             *
  28:Core/Src/SEGGER_RTT.c **** *                                                                    *
  29:Core/Src/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
  30:Core/Src/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
  31:Core/Src/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  32:Core/Src/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
  33:Core/Src/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  34:Core/Src/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  35:Core/Src/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  36:Core/Src/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  37:Core/Src/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  38:Core/Src/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  39:Core/Src/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  40:Core/Src/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  41:Core/Src/SEGGER_RTT.c **** * DAMAGE.                                                            *
  42:Core/Src/SEGGER_RTT.c **** *                                                                    *
  43:Core/Src/SEGGER_RTT.c **** **********************************************************************
  44:Core/Src/SEGGER_RTT.c **** *                                                                    *
  45:Core/Src/SEGGER_RTT.c **** *       RTT version: 7.54                                           *
  46:Core/Src/SEGGER_RTT.c **** *                                                                    *
  47:Core/Src/SEGGER_RTT.c **** **********************************************************************
  48:Core/Src/SEGGER_RTT.c **** 
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 3


  49:Core/Src/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  50:Core/Src/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  51:Core/Src/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  52:Core/Src/SEGGER_RTT.c ****           allows real-time communication on targets which support
  53:Core/Src/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  54:Core/Src/SEGGER_RTT.c **** Revision: $Rev: 23622 $
  55:Core/Src/SEGGER_RTT.c **** 
  56:Core/Src/SEGGER_RTT.c **** Additional information:
  57:Core/Src/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  58:Core/Src/SEGGER_RTT.c ****           H->T    Host to target communication
  59:Core/Src/SEGGER_RTT.c ****           T->H    Target to host communication
  60:Core/Src/SEGGER_RTT.c **** 
  61:Core/Src/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  62:Core/Src/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  63:Core/Src/SEGGER_RTT.c **** 
  64:Core/Src/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  65:Core/Src/SEGGER_RTT.c **** 
  66:Core/Src/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  67:Core/Src/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  68:Core/Src/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  69:Core/Src/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  70:Core/Src/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):  
  71:Core/Src/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  72:Core/Src/SEGGER_RTT.c **** 
  73:Core/Src/SEGGER_RTT.c **** 
  74:Core/Src/SEGGER_RTT.c **** ----------------------------------------------------------------------
  75:Core/Src/SEGGER_RTT.c **** */
  76:Core/Src/SEGGER_RTT.c **** 
  77:Core/Src/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  78:Core/Src/SEGGER_RTT.c **** 
  79:Core/Src/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  80:Core/Src/SEGGER_RTT.c **** 
  81:Core/Src/SEGGER_RTT.c **** /*********************************************************************
  82:Core/Src/SEGGER_RTT.c **** *
  83:Core/Src/SEGGER_RTT.c **** *       Configuration, default values
  84:Core/Src/SEGGER_RTT.c **** *
  85:Core/Src/SEGGER_RTT.c **** **********************************************************************
  86:Core/Src/SEGGER_RTT.c **** */
  87:Core/Src/SEGGER_RTT.c **** 
  88:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
  89:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_CB_ALIGN
  90:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_CB_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
  91:Core/Src/SEGGER_RTT.c ****   #endif
  92:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGN
  93:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE !=
  94:Core/Src/SEGGER_RTT.c ****   #endif
  95:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_CB_SECTION
  96:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_CB_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  97:Core/Src/SEGGER_RTT.c ****   #endif
  98:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_BUFFER_SECTION
  99:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_BUFFER_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_S
 100:Core/Src/SEGGER_RTT.c ****   #endif
 101:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGNMENT
 102:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
 103:Core/Src/SEGGER_RTT.c ****   #endif
 104:Core/Src/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_ALIGNMENT
 105:Core/Src/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 4


 106:Core/Src/SEGGER_RTT.c ****   #endif
 107:Core/Src/SEGGER_RTT.c **** #endif
 108:Core/Src/SEGGER_RTT.c **** 
 109:Core/Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
 110:Core/Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
 111:Core/Src/SEGGER_RTT.c **** #endif
 112:Core/Src/SEGGER_RTT.c **** 
 113:Core/Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
 114:Core/Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
 115:Core/Src/SEGGER_RTT.c **** #endif
 116:Core/Src/SEGGER_RTT.c **** 
 117:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
 118:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
 119:Core/Src/SEGGER_RTT.c **** #endif
 120:Core/Src/SEGGER_RTT.c **** 
 121:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 122:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
 123:Core/Src/SEGGER_RTT.c **** #endif
 124:Core/Src/SEGGER_RTT.c **** 
 125:Core/Src/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 126:Core/Src/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 127:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 128:Core/Src/SEGGER_RTT.c ****   #endif
 129:Core/Src/SEGGER_RTT.c **** #endif
 130:Core/Src/SEGGER_RTT.c **** 
 131:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 132:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            SEGGER_RTT_CPU_CACHE_LINE_SIZE
 133:Core/Src/SEGGER_RTT.c **** #endif
 134:Core/Src/SEGGER_RTT.c **** 
 135:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 136:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     SEGGER_RTT_CPU_CACHE_LINE_SIZE
 137:Core/Src/SEGGER_RTT.c **** #endif
 138:Core/Src/SEGGER_RTT.c **** 
 139:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 140:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 141:Core/Src/SEGGER_RTT.c **** #endif
 142:Core/Src/SEGGER_RTT.c **** 
 143:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 144:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
 145:Core/Src/SEGGER_RTT.c **** #endif
 146:Core/Src/SEGGER_RTT.c **** 
 147:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 148:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
 149:Core/Src/SEGGER_RTT.c **** #endif
 150:Core/Src/SEGGER_RTT.c **** 
 151:Core/Src/SEGGER_RTT.c **** #ifndef   STRLEN
 152:Core/Src/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 153:Core/Src/SEGGER_RTT.c **** #endif
 154:Core/Src/SEGGER_RTT.c **** 
 155:Core/Src/SEGGER_RTT.c **** #ifndef   STRCPY
 156:Core/Src/SEGGER_RTT.c ****   #define STRCPY(pDest, pSrc)                             strcpy((pDest), (pSrc))
 157:Core/Src/SEGGER_RTT.c **** #endif
 158:Core/Src/SEGGER_RTT.c **** 
 159:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 160:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
 161:Core/Src/SEGGER_RTT.c **** #endif
 162:Core/Src/SEGGER_RTT.c **** 
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 5


 163:Core/Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 164:Core/Src/SEGGER_RTT.c ****   #ifdef  MEMCPY
 165:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
 166:Core/Src/SEGGER_RTT.c ****   #else
 167:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 168:Core/Src/SEGGER_RTT.c ****   #endif
 169:Core/Src/SEGGER_RTT.c **** #endif
 170:Core/Src/SEGGER_RTT.c **** 
 171:Core/Src/SEGGER_RTT.c **** #ifndef   MIN
 172:Core/Src/SEGGER_RTT.c ****   #define MIN(a, b)         (((a) < (b)) ? (a) : (b))
 173:Core/Src/SEGGER_RTT.c **** #endif
 174:Core/Src/SEGGER_RTT.c **** 
 175:Core/Src/SEGGER_RTT.c **** #ifndef   MAX
 176:Core/Src/SEGGER_RTT.c ****   #define MAX(a, b)         (((a) > (b)) ? (a) : (b))
 177:Core/Src/SEGGER_RTT.c **** #endif
 178:Core/Src/SEGGER_RTT.c **** //
 179:Core/Src/SEGGER_RTT.c **** // For some environments, NULL may not be defined until certain headers are included
 180:Core/Src/SEGGER_RTT.c **** //
 181:Core/Src/SEGGER_RTT.c **** #ifndef NULL
 182:Core/Src/SEGGER_RTT.c ****   #define NULL 0
 183:Core/Src/SEGGER_RTT.c **** #endif
 184:Core/Src/SEGGER_RTT.c **** 
 185:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 186:Core/Src/SEGGER_RTT.c **** *
 187:Core/Src/SEGGER_RTT.c **** *       Defines, fixed
 188:Core/Src/SEGGER_RTT.c **** *
 189:Core/Src/SEGGER_RTT.c **** **********************************************************************
 190:Core/Src/SEGGER_RTT.c **** */
 191:Core/Src/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 192:Core/Src/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 193:Core/Src/SEGGER_RTT.c **** #endif
 194:Core/Src/SEGGER_RTT.c **** 
 195:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 196:Core/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 197:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 198:Core/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 199:Core/Src/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 200:Core/Src/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 201:Core/Src/SEGGER_RTT.c ****                                   Var
 202:Core/Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 203:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 204:Core/Src/SEGGER_RTT.c ****   #else
 205:Core/Src/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
 206:Core/Src/SEGGER_RTT.c ****   #endif
 207:Core/Src/SEGGER_RTT.c **** #else
 208:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 209:Core/Src/SEGGER_RTT.c **** #endif
 210:Core/Src/SEGGER_RTT.c **** 
 211:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 212:Core/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 213:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 214:Core/Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 215:Core/Src/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 216:Core/Src/SEGGER_RTT.c ****                                         Var
 217:Core/Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 218:Core/Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 219:Core/Src/SEGGER_RTT.c ****   #else
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 6


 220:Core/Src/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 221:Core/Src/SEGGER_RTT.c ****   #endif
 222:Core/Src/SEGGER_RTT.c **** #else
 223:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 224:Core/Src/SEGGER_RTT.c **** #endif
 225:Core/Src/SEGGER_RTT.c **** 
 226:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 227:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 228:Core/Src/SEGGER_RTT.c **** #else
 229:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 230:Core/Src/SEGGER_RTT.c **** #endif
 231:Core/Src/SEGGER_RTT.c **** 
 232:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 233:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 234:Core/Src/SEGGER_RTT.c **** #else
 235:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 236:Core/Src/SEGGER_RTT.c **** #endif
 237:Core/Src/SEGGER_RTT.c **** 
 238:Core/Src/SEGGER_RTT.c **** 
 239:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 240:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 241:Core/Src/SEGGER_RTT.c **** #else
 242:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 243:Core/Src/SEGGER_RTT.c **** #endif
 244:Core/Src/SEGGER_RTT.c **** 
 245:Core/Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 246:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 247:Core/Src/SEGGER_RTT.c **** #else
 248:Core/Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 249:Core/Src/SEGGER_RTT.c **** #endif
 250:Core/Src/SEGGER_RTT.c **** 
 251:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 252:Core/Src/SEGGER_RTT.c **** *
 253:Core/Src/SEGGER_RTT.c **** *       Static const data
 254:Core/Src/SEGGER_RTT.c **** *
 255:Core/Src/SEGGER_RTT.c **** **********************************************************************
 256:Core/Src/SEGGER_RTT.c **** */
 257:Core/Src/SEGGER_RTT.c **** 
 258:Core/Src/SEGGER_RTT.c **** static unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B
 259:Core/Src/SEGGER_RTT.c **** 
 260:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 261:Core/Src/SEGGER_RTT.c **** *
 262:Core/Src/SEGGER_RTT.c **** *       Static data
 263:Core/Src/SEGGER_RTT.c **** *
 264:Core/Src/SEGGER_RTT.c **** **********************************************************************
 265:Core/Src/SEGGER_RTT.c **** */
 266:Core/Src/SEGGER_RTT.c **** 
 267:Core/Src/SEGGER_RTT.c **** //
 268:Core/Src/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 269:Core/Src/SEGGER_RTT.c **** //
 270:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
 271:Core/Src/SEGGER_RTT.c ****   #if ((defined __GNUC__) || (defined __clang__))
 272:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_CB _SEGGER_RTT                                                             __attribu
 273:Core/Src/SEGGER_RTT.c ****     static char   _acUpBuffer  [SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_UP)]   __attribu
 274:Core/Src/SEGGER_RTT.c ****     static char   _acDownBuffer[SEGGER_RTT__ROUND_UP_2_CACHE_LINE_SIZE(BUFFER_SIZE_DOWN)] __attribu
 275:Core/Src/SEGGER_RTT.c ****   #else
 276:Core/Src/SEGGER_RTT.c ****     #error "Don't know how to place _SEGGER_RTT, _acUpBuffer, _acDownBuffer cache-line aligned"
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 7


 277:Core/Src/SEGGER_RTT.c ****   #endif
 278:Core/Src/SEGGER_RTT.c **** #else
 279:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 280:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [BUFFER_SIZE_UP]))
 281:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[BUFFER_SIZE_DOWN]
 282:Core/Src/SEGGER_RTT.c **** #endif
 283:Core/Src/SEGGER_RTT.c **** 
 284:Core/Src/SEGGER_RTT.c **** static unsigned char _ActiveTerminal;
 285:Core/Src/SEGGER_RTT.c **** 
 286:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 287:Core/Src/SEGGER_RTT.c **** *
 288:Core/Src/SEGGER_RTT.c **** *       Static functions
 289:Core/Src/SEGGER_RTT.c **** *
 290:Core/Src/SEGGER_RTT.c **** **********************************************************************
 291:Core/Src/SEGGER_RTT.c **** */
 292:Core/Src/SEGGER_RTT.c **** 
 293:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 294:Core/Src/SEGGER_RTT.c **** *
 295:Core/Src/SEGGER_RTT.c **** *       _DoInit()
 296:Core/Src/SEGGER_RTT.c **** *
 297:Core/Src/SEGGER_RTT.c **** *  Function description
 298:Core/Src/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 299:Core/Src/SEGGER_RTT.c **** *    May only be called via INIT() to avoid overriding settings.
 300:Core/Src/SEGGER_RTT.c **** *
 301:Core/Src/SEGGER_RTT.c **** */
 302:Core/Src/SEGGER_RTT.c **** #define INIT()  {                                                                                  
 303:Core/Src/SEGGER_RTT.c ****                   volatile SEGGER_RTT_CB* pRTTCBInit;                                              
 304:Core/Src/SEGGER_RTT.c ****                   pRTTCBInit = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_
 305:Core/Src/SEGGER_RTT.c ****                   do {                                                                             
 306:Core/Src/SEGGER_RTT.c ****                     if (pRTTCBInit->acID[0] == '\0') {                                             
 307:Core/Src/SEGGER_RTT.c ****                       _DoInit();                                                                   
 308:Core/Src/SEGGER_RTT.c ****                     }                                                                              
 309:Core/Src/SEGGER_RTT.c ****                   } while (0);                                                                     
 310:Core/Src/SEGGER_RTT.c ****                 }
 311:Core/Src/SEGGER_RTT.c **** 
 312:Core/Src/SEGGER_RTT.c **** static void _DoInit(void) {
  62              		.loc 1 312 27
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 8
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              	.LCFI0:
  69              		.cfi_def_cfa_offset 4
  70              		.cfi_offset 7, -4
  71 0002 83B0     		sub	sp, sp, #12
  72              	.LCFI1:
  73              		.cfi_def_cfa_offset 16
  74 0004 00AF     		add	r7, sp, #0
  75              	.LCFI2:
  76              		.cfi_def_cfa_register 7
 313:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 314:Core/Src/SEGGER_RTT.c ****   static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sur
 315:Core/Src/SEGGER_RTT.c ****   unsigned i;
 316:Core/Src/SEGGER_RTT.c ****   //
 317:Core/Src/SEGGER_RTT.c ****   // Initialize control block
 318:Core/Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 8


 319:Core/Src/SEGGER_RTT.c ****   p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);
  77              		.loc 1 319 25
  78 0006 254B     		ldr	r3, .L4
  79 0008 3B60     		str	r3, [r7]
 320:Core/Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
  80              		.loc 1 320 25
  81 000a 3B68     		ldr	r3, [r7]
  82 000c 0322     		movs	r2, #3
  83 000e 1A61     		str	r2, [r3, #16]
 321:Core/Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  84              		.loc 1 321 25
  85 0010 3B68     		ldr	r3, [r7]
  86 0012 0322     		movs	r2, #3
  87 0014 5A61     		str	r2, [r3, #20]
 322:Core/Src/SEGGER_RTT.c ****   //
 323:Core/Src/SEGGER_RTT.c ****   // Initialize up buffer 0
 324:Core/Src/SEGGER_RTT.c ****   //
 325:Core/Src/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
  88              		.loc 1 325 27
  89 0016 3B68     		ldr	r3, [r7]
  90 0018 214A     		ldr	r2, .L4+4
  91 001a 9A61     		str	r2, [r3, #24]
 326:Core/Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
  92              		.loc 1 326 27
  93 001c 3B68     		ldr	r3, [r7]
  94 001e 214A     		ldr	r2, .L4+8
  95 0020 DA61     		str	r2, [r3, #28]
 327:Core/Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
  96              		.loc 1 327 27
  97 0022 3B68     		ldr	r3, [r7]
  98 0024 4FF48062 		mov	r2, #1024
  99 0028 1A62     		str	r2, [r3, #32]
 328:Core/Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 100              		.loc 1 328 27
 101 002a 3B68     		ldr	r3, [r7]
 102 002c 0022     		movs	r2, #0
 103 002e 9A62     		str	r2, [r3, #40]
 329:Core/Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 104              		.loc 1 329 27
 105 0030 3B68     		ldr	r3, [r7]
 106 0032 0022     		movs	r2, #0
 107 0034 5A62     		str	r2, [r3, #36]
 330:Core/Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 108              		.loc 1 330 27
 109 0036 3B68     		ldr	r3, [r7]
 110 0038 0022     		movs	r2, #0
 111 003a DA62     		str	r2, [r3, #44]
 331:Core/Src/SEGGER_RTT.c ****   //
 332:Core/Src/SEGGER_RTT.c ****   // Initialize down buffer 0
 333:Core/Src/SEGGER_RTT.c ****   //
 334:Core/Src/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 112              		.loc 1 334 29
 113 003c 3B68     		ldr	r3, [r7]
 114 003e 184A     		ldr	r2, .L4+4
 115 0040 1A66     		str	r2, [r3, #96]
 335:Core/Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 116              		.loc 1 335 29
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 9


 117 0042 3B68     		ldr	r3, [r7]
 118 0044 184A     		ldr	r2, .L4+12
 119 0046 5A66     		str	r2, [r3, #100]
 336:Core/Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 120              		.loc 1 336 29
 121 0048 3B68     		ldr	r3, [r7]
 122 004a 1022     		movs	r2, #16
 123 004c 9A66     		str	r2, [r3, #104]
 337:Core/Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 124              		.loc 1 337 29
 125 004e 3B68     		ldr	r3, [r7]
 126 0050 0022     		movs	r2, #0
 127 0052 1A67     		str	r2, [r3, #112]
 338:Core/Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 128              		.loc 1 338 29
 129 0054 3B68     		ldr	r3, [r7]
 130 0056 0022     		movs	r2, #0
 131 0058 DA66     		str	r2, [r3, #108]
 339:Core/Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 132              		.loc 1 339 29
 133 005a 3B68     		ldr	r3, [r7]
 134 005c 0022     		movs	r2, #0
 135 005e 5A67     		str	r2, [r3, #116]
 340:Core/Src/SEGGER_RTT.c ****   //
 341:Core/Src/SEGGER_RTT.c ****   // Finish initialization of the control block.
 342:Core/Src/SEGGER_RTT.c ****   // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (us
 343:Core/Src/SEGGER_RTT.c ****   // as this would cause J-Link to "find" the control block at a wrong address.
 344:Core/Src/SEGGER_RTT.c ****   //
 345:Core/Src/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 136              		.loc 1 345 3
 137              		.syntax unified
 138              	@ 345 "Core/Src/SEGGER_RTT.c" 1
 139 0060 BFF35F8F 		dmb
 140              	
 141              	@ 0 "" 2
 346:Core/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 142              		.loc 1 346 10
 143              		.thumb
 144              		.syntax unified
 145 0064 0023     		movs	r3, #0
 146 0066 7B60     		str	r3, [r7, #4]
 147              		.loc 1 346 3
 148 0068 0CE0     		b	.L2
 149              	.L3:
 347:Core/Src/SEGGER_RTT.c ****     p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the ar
 150              		.loc 1 347 50
 151 006a 7B68     		ldr	r3, [r7, #4]
 152 006c C3F10F03 		rsb	r3, r3, #15
 153              		.loc 1 347 27
 154 0070 0E4A     		ldr	r2, .L4+16
 155 0072 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 156              		.loc 1 347 16
 157 0074 3A68     		ldr	r2, [r7]
 158 0076 7B68     		ldr	r3, [r7, #4]
 159 0078 1344     		add	r3, r3, r2
 160 007a 0A46     		mov	r2, r1
 161 007c 1A70     		strb	r2, [r3]
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 10


 346:Core/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 162              		.loc 1 346 42 discriminator 3
 163 007e 7B68     		ldr	r3, [r7, #4]
 164 0080 0133     		adds	r3, r3, #1
 165 0082 7B60     		str	r3, [r7, #4]
 166              	.L2:
 346:Core/Src/SEGGER_RTT.c ****   for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 167              		.loc 1 346 17 discriminator 1
 168 0084 7B68     		ldr	r3, [r7, #4]
 169 0086 0F2B     		cmp	r3, #15
 170 0088 EFD9     		bls	.L3
 348:Core/Src/SEGGER_RTT.c ****   }
 349:Core/Src/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accesses for cores that may perform ou
 171              		.loc 1 349 3
 172              		.syntax unified
 173              	@ 349 "Core/Src/SEGGER_RTT.c" 1
 174 008a BFF35F8F 		dmb
 175              	
 176              	@ 0 "" 2
 350:Core/Src/SEGGER_RTT.c **** }
 177              		.loc 1 350 1
 178              		.thumb
 179              		.syntax unified
 180 008e 00BF     		nop
 181 0090 0C37     		adds	r7, r7, #12
 182              	.LCFI3:
 183              		.cfi_def_cfa_offset 4
 184 0092 BD46     		mov	sp, r7
 185              	.LCFI4:
 186              		.cfi_def_cfa_register 13
 187              		@ sp needed
 188 0094 5DF8047B 		ldr	r7, [sp], #4
 189              	.LCFI5:
 190              		.cfi_restore 7
 191              		.cfi_def_cfa_offset 0
 192 0098 7047     		bx	lr
 193              	.L5:
 194 009a 00BF     		.align	2
 195              	.L4:
 196 009c 00000000 		.word	_SEGGER_RTT
 197 00a0 00000000 		.word	.LC0
 198 00a4 00000000 		.word	_acUpBuffer
 199 00a8 00000000 		.word	_acDownBuffer
 200 00ac 00000000 		.word	_aInitStr.0
 201              		.cfi_endproc
 202              	.LFE0:
 204              		.section	.text._WriteBlocking,"ax",%progbits
 205              		.align	1
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 210              	_WriteBlocking:
 211              	.LFB1:
 351:Core/Src/SEGGER_RTT.c **** 
 352:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 353:Core/Src/SEGGER_RTT.c **** *
 354:Core/Src/SEGGER_RTT.c **** *       _WriteBlocking()
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 11


 355:Core/Src/SEGGER_RTT.c **** *
 356:Core/Src/SEGGER_RTT.c **** *  Function description
 357:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 358:Core/Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 359:Core/Src/SEGGER_RTT.c **** *    read by the host.
 360:Core/Src/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
 361:Core/Src/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 362:Core/Src/SEGGER_RTT.c **** *
 363:Core/Src/SEGGER_RTT.c **** *  Parameters
 364:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 365:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 366:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 367:Core/Src/SEGGER_RTT.c **** *
 368:Core/Src/SEGGER_RTT.c **** *  Return value
 369:Core/Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
 370:Core/Src/SEGGER_RTT.c **** */
 371:Core/Src/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 212              		.loc 1 371 101
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 40
 215              		@ frame_needed = 1, uses_anonymous_args = 0
 216 0000 80B5     		push	{r7, lr}
 217              	.LCFI6:
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 7, -8
 220              		.cfi_offset 14, -4
 221 0002 8AB0     		sub	sp, sp, #40
 222              	.LCFI7:
 223              		.cfi_def_cfa_offset 48
 224 0004 00AF     		add	r7, sp, #0
 225              	.LCFI8:
 226              		.cfi_def_cfa_register 7
 227 0006 F860     		str	r0, [r7, #12]
 228 0008 B960     		str	r1, [r7, #8]
 229 000a 7A60     		str	r2, [r7, #4]
 372:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 373:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 374:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 375:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 376:Core/Src/SEGGER_RTT.c ****   volatile char* pDst;
 377:Core/Src/SEGGER_RTT.c ****   //
 378:Core/Src/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 379:Core/Src/SEGGER_RTT.c ****   //
 380:Core/Src/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 230              		.loc 1 380 19
 231 000c 0023     		movs	r3, #0
 232 000e 3B62     		str	r3, [r7, #32]
 381:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 233              		.loc 1 381 9
 234 0010 FB68     		ldr	r3, [r7, #12]
 235 0012 DB68     		ldr	r3, [r3, #12]
 236 0014 FB61     		str	r3, [r7, #28]
 237              	.L10:
 382:Core/Src/SEGGER_RTT.c ****   do {
 383:Core/Src/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 238              		.loc 1 383 11
 239 0016 FB68     		ldr	r3, [r7, #12]
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 12


 240 0018 1B69     		ldr	r3, [r3, #16]
 241 001a BB61     		str	r3, [r7, #24]
 384:Core/Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 242              		.loc 1 384 8
 243 001c BA69     		ldr	r2, [r7, #24]
 244 001e FB69     		ldr	r3, [r7, #28]
 245 0020 9A42     		cmp	r2, r3
 246 0022 05D9     		bls	.L7
 385:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 247              		.loc 1 385 31
 248 0024 BA69     		ldr	r2, [r7, #24]
 249 0026 FB69     		ldr	r3, [r7, #28]
 250 0028 D31A     		subs	r3, r2, r3
 251              		.loc 1 385 23
 252 002a 013B     		subs	r3, r3, #1
 253 002c 7B62     		str	r3, [r7, #36]
 254 002e 07E0     		b	.L8
 255              	.L7:
 386:Core/Src/SEGGER_RTT.c ****     } else {
 387:Core/Src/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 256              		.loc 1 387 30
 257 0030 FB68     		ldr	r3, [r7, #12]
 258 0032 9A68     		ldr	r2, [r3, #8]
 259              		.loc 1 387 62
 260 0034 B969     		ldr	r1, [r7, #24]
 261 0036 FB69     		ldr	r3, [r7, #28]
 262 0038 CB1A     		subs	r3, r1, r3
 263              		.loc 1 387 45
 264 003a 1344     		add	r3, r3, r2
 265              		.loc 1 387 23
 266 003c 013B     		subs	r3, r3, #1
 267 003e 7B62     		str	r3, [r7, #36]
 268              	.L8:
 388:Core/Src/SEGGER_RTT.c ****     }
 389:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 269              		.loc 1 389 23
 270 0040 FB68     		ldr	r3, [r7, #12]
 271 0042 9A68     		ldr	r2, [r3, #8]
 272 0044 FB69     		ldr	r3, [r7, #28]
 273 0046 D31A     		subs	r3, r2, r3
 274              		.loc 1 389 21
 275 0048 7A6A     		ldr	r2, [r7, #36]
 276 004a 9342     		cmp	r3, r2
 277 004c 28BF     		it	cs
 278 004e 1346     		movcs	r3, r2
 279 0050 7B62     		str	r3, [r7, #36]
 390:Core/Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 280              		.loc 1 390 21
 281 0052 7A6A     		ldr	r2, [r7, #36]
 282 0054 7B68     		ldr	r3, [r7, #4]
 283 0056 9342     		cmp	r3, r2
 284 0058 28BF     		it	cs
 285 005a 1346     		movcs	r3, r2
 286 005c 7B62     		str	r3, [r7, #36]
 391:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 287              		.loc 1 391 18
 288 005e FB68     		ldr	r3, [r7, #12]
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 13


 289 0060 5A68     		ldr	r2, [r3, #4]
 290              		.loc 1 391 10
 291 0062 FB69     		ldr	r3, [r7, #28]
 292 0064 1344     		add	r3, r3, r2
 293 0066 7B61     		str	r3, [r7, #20]
 392:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 393:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 394:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 395:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 396:Core/Src/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 397:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 398:Core/Src/SEGGER_RTT.c ****     };
 399:Core/Src/SEGGER_RTT.c **** #else
 400:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 294              		.loc 1 400 5
 295 0068 7A6A     		ldr	r2, [r7, #36]
 296 006a B968     		ldr	r1, [r7, #8]
 297 006c 7869     		ldr	r0, [r7, #20]
 298 006e FFF7FEFF 		bl	memcpy
 401:Core/Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 299              		.loc 1 401 21
 300 0072 3A6A     		ldr	r2, [r7, #32]
 301 0074 7B6A     		ldr	r3, [r7, #36]
 302 0076 1344     		add	r3, r3, r2
 303 0078 3B62     		str	r3, [r7, #32]
 402:Core/Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 304              		.loc 1 402 21
 305 007a BA68     		ldr	r2, [r7, #8]
 306 007c 7B6A     		ldr	r3, [r7, #36]
 307 007e 1344     		add	r3, r3, r2
 308 0080 BB60     		str	r3, [r7, #8]
 403:Core/Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 309              		.loc 1 403 21
 310 0082 7A68     		ldr	r2, [r7, #4]
 311 0084 7B6A     		ldr	r3, [r7, #36]
 312 0086 D31A     		subs	r3, r2, r3
 313 0088 7B60     		str	r3, [r7, #4]
 404:Core/Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 314              		.loc 1 404 21
 315 008a FA69     		ldr	r2, [r7, #28]
 316 008c 7B6A     		ldr	r3, [r7, #36]
 317 008e 1344     		add	r3, r3, r2
 318 0090 FB61     		str	r3, [r7, #28]
 405:Core/Src/SEGGER_RTT.c **** #endif
 406:Core/Src/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 319              		.loc 1 406 23
 320 0092 FB68     		ldr	r3, [r7, #12]
 321 0094 9B68     		ldr	r3, [r3, #8]
 322              		.loc 1 406 8
 323 0096 FA69     		ldr	r2, [r7, #28]
 324 0098 9A42     		cmp	r2, r3
 325 009a 01D1     		bne	.L9
 407:Core/Src/SEGGER_RTT.c ****       WrOff = 0u;
 326              		.loc 1 407 13
 327 009c 0023     		movs	r3, #0
 328 009e FB61     		str	r3, [r7, #28]
 329              	.L9:
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 14


 408:Core/Src/SEGGER_RTT.c ****     }
 409:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 330              		.loc 1 409 5
 331              		.syntax unified
 332              	@ 409 "Core/Src/SEGGER_RTT.c" 1
 333 00a0 BFF35F8F 		dmb
 334              	
 335              	@ 0 "" 2
 410:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 336              		.loc 1 410 18
 337              		.thumb
 338              		.syntax unified
 339 00a4 FB68     		ldr	r3, [r7, #12]
 340 00a6 FA69     		ldr	r2, [r7, #28]
 341 00a8 DA60     		str	r2, [r3, #12]
 411:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 342              		.loc 1 411 12
 343 00aa 7B68     		ldr	r3, [r7, #4]
 344 00ac 002B     		cmp	r3, #0
 345 00ae B2D1     		bne	.L10
 412:Core/Src/SEGGER_RTT.c ****   return NumBytesWritten;
 346              		.loc 1 412 10
 347 00b0 3B6A     		ldr	r3, [r7, #32]
 413:Core/Src/SEGGER_RTT.c **** }
 348              		.loc 1 413 1
 349 00b2 1846     		mov	r0, r3
 350 00b4 2837     		adds	r7, r7, #40
 351              	.LCFI9:
 352              		.cfi_def_cfa_offset 8
 353 00b6 BD46     		mov	sp, r7
 354              	.LCFI10:
 355              		.cfi_def_cfa_register 13
 356              		@ sp needed
 357 00b8 80BD     		pop	{r7, pc}
 358              		.cfi_endproc
 359              	.LFE1:
 361              		.section	.text._WriteNoCheck,"ax",%progbits
 362              		.align	1
 363              		.syntax unified
 364              		.thumb
 365              		.thumb_func
 367              	_WriteNoCheck:
 368              	.LFB2:
 414:Core/Src/SEGGER_RTT.c **** 
 415:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 416:Core/Src/SEGGER_RTT.c **** *
 417:Core/Src/SEGGER_RTT.c **** *       _WriteNoCheck()
 418:Core/Src/SEGGER_RTT.c **** *
 419:Core/Src/SEGGER_RTT.c **** *  Function description
 420:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 421:Core/Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 422:Core/Src/SEGGER_RTT.c **** *    read by the host.
 423:Core/Src/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
 424:Core/Src/SEGGER_RTT.c **** *
 425:Core/Src/SEGGER_RTT.c **** *  Parameters
 426:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 427:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 15


 428:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 429:Core/Src/SEGGER_RTT.c **** *
 430:Core/Src/SEGGER_RTT.c **** *  Notes
 431:Core/Src/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 432:Core/Src/SEGGER_RTT.c **** */
 433:Core/Src/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 369              		.loc 1 433 94
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 32
 372              		@ frame_needed = 1, uses_anonymous_args = 0
 373 0000 80B5     		push	{r7, lr}
 374              	.LCFI11:
 375              		.cfi_def_cfa_offset 8
 376              		.cfi_offset 7, -8
 377              		.cfi_offset 14, -4
 378 0002 88B0     		sub	sp, sp, #32
 379              	.LCFI12:
 380              		.cfi_def_cfa_offset 40
 381 0004 00AF     		add	r7, sp, #0
 382              	.LCFI13:
 383              		.cfi_def_cfa_register 7
 384 0006 F860     		str	r0, [r7, #12]
 385 0008 B960     		str	r1, [r7, #8]
 386 000a 7A60     		str	r2, [r7, #4]
 434:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 435:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 436:Core/Src/SEGGER_RTT.c ****   unsigned Rem;
 437:Core/Src/SEGGER_RTT.c ****   volatile char* pDst;
 438:Core/Src/SEGGER_RTT.c **** 
 439:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 387              		.loc 1 439 9
 388 000c FB68     		ldr	r3, [r7, #12]
 389 000e DB68     		ldr	r3, [r3, #12]
 390 0010 FB61     		str	r3, [r7, #28]
 440:Core/Src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 391              		.loc 1 440 14
 392 0012 FB68     		ldr	r3, [r7, #12]
 393 0014 9A68     		ldr	r2, [r3, #8]
 394              		.loc 1 440 7
 395 0016 FB69     		ldr	r3, [r7, #28]
 396 0018 D31A     		subs	r3, r2, r3
 397 001a BB61     		str	r3, [r7, #24]
 441:Core/Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 398              		.loc 1 441 6
 399 001c BA69     		ldr	r2, [r7, #24]
 400 001e 7B68     		ldr	r3, [r7, #4]
 401 0020 9A42     		cmp	r2, r3
 402 0022 11D9     		bls	.L13
 442:Core/Src/SEGGER_RTT.c ****     //
 443:Core/Src/SEGGER_RTT.c ****     // All data fits before wrap around
 444:Core/Src/SEGGER_RTT.c ****     //
 445:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 403              		.loc 1 445 18
 404 0024 FB68     		ldr	r3, [r7, #12]
 405 0026 5A68     		ldr	r2, [r3, #4]
 406              		.loc 1 445 10
 407 0028 FB69     		ldr	r3, [r7, #28]
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 16


 408 002a 1344     		add	r3, r3, r2
 409 002c 3B61     		str	r3, [r7, #16]
 446:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 447:Core/Src/SEGGER_RTT.c ****     WrOff += NumBytes;
 448:Core/Src/SEGGER_RTT.c ****     while (NumBytes--) {
 449:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 450:Core/Src/SEGGER_RTT.c ****     };
 451:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 452:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 453:Core/Src/SEGGER_RTT.c **** #else
 454:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 410              		.loc 1 454 5
 411 002e 7A68     		ldr	r2, [r7, #4]
 412 0030 B968     		ldr	r1, [r7, #8]
 413 0032 3869     		ldr	r0, [r7, #16]
 414 0034 FFF7FEFF 		bl	memcpy
 455:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 415              		.loc 1 455 5
 416              		.syntax unified
 417              	@ 455 "Core/Src/SEGGER_RTT.c" 1
 418 0038 BFF35F8F 		dmb
 419              	
 420              	@ 0 "" 2
 456:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 421              		.loc 1 456 26
 422              		.thumb
 423              		.syntax unified
 424 003c FA69     		ldr	r2, [r7, #28]
 425 003e 7B68     		ldr	r3, [r7, #4]
 426 0040 1A44     		add	r2, r2, r3
 427              		.loc 1 456 18
 428 0042 FB68     		ldr	r3, [r7, #12]
 429 0044 DA60     		str	r2, [r3, #12]
 457:Core/Src/SEGGER_RTT.c **** #endif
 458:Core/Src/SEGGER_RTT.c ****   } else {
 459:Core/Src/SEGGER_RTT.c ****     //
 460:Core/Src/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 461:Core/Src/SEGGER_RTT.c ****     //
 462:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 463:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 464:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 465:Core/Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 466:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 467:Core/Src/SEGGER_RTT.c ****     };
 468:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 469:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 470:Core/Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 471:Core/Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 472:Core/Src/SEGGER_RTT.c ****     };
 473:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 474:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 475:Core/Src/SEGGER_RTT.c **** #else
 476:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 477:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 478:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 479:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 480:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 17


 481:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 482:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 483:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 484:Core/Src/SEGGER_RTT.c **** #endif
 485:Core/Src/SEGGER_RTT.c ****   }
 486:Core/Src/SEGGER_RTT.c **** }
 430              		.loc 1 486 1
 431 0046 1FE0     		b	.L15
 432              	.L13:
 476:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 433              		.loc 1 476 20
 434 0048 BB69     		ldr	r3, [r7, #24]
 435 004a 7B61     		str	r3, [r7, #20]
 477:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 436              		.loc 1 477 18
 437 004c FB68     		ldr	r3, [r7, #12]
 438 004e 5A68     		ldr	r2, [r3, #4]
 477:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 439              		.loc 1 477 10
 440 0050 FB69     		ldr	r3, [r7, #28]
 441 0052 1344     		add	r3, r3, r2
 442 0054 3B61     		str	r3, [r7, #16]
 478:Core/Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 443              		.loc 1 478 5
 444 0056 7A69     		ldr	r2, [r7, #20]
 445 0058 B968     		ldr	r1, [r7, #8]
 446 005a 3869     		ldr	r0, [r7, #16]
 447 005c FFF7FEFF 		bl	memcpy
 479:Core/Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 448              		.loc 1 479 20
 449 0060 7A68     		ldr	r2, [r7, #4]
 450 0062 BB69     		ldr	r3, [r7, #24]
 451 0064 D31A     		subs	r3, r2, r3
 452 0066 7B61     		str	r3, [r7, #20]
 480:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 453              		.loc 1 480 10
 454 0068 FB68     		ldr	r3, [r7, #12]
 455 006a 5B68     		ldr	r3, [r3, #4]
 456 006c 3B61     		str	r3, [r7, #16]
 481:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 457              		.loc 1 481 5
 458 006e BA68     		ldr	r2, [r7, #8]
 459 0070 BB69     		ldr	r3, [r7, #24]
 460 0072 1344     		add	r3, r3, r2
 461 0074 7A69     		ldr	r2, [r7, #20]
 462 0076 1946     		mov	r1, r3
 463 0078 3869     		ldr	r0, [r7, #16]
 464 007a FFF7FEFF 		bl	memcpy
 482:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 465              		.loc 1 482 5
 466              		.syntax unified
 467              	@ 482 "Core/Src/SEGGER_RTT.c" 1
 468 007e BFF35F8F 		dmb
 469              	
 470              	@ 0 "" 2
 483:Core/Src/SEGGER_RTT.c **** #endif
 471              		.loc 1 483 18
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 18


 472              		.thumb
 473              		.syntax unified
 474 0082 FB68     		ldr	r3, [r7, #12]
 475 0084 7A69     		ldr	r2, [r7, #20]
 476 0086 DA60     		str	r2, [r3, #12]
 477              	.L15:
 478              		.loc 1 486 1
 479 0088 00BF     		nop
 480 008a 2037     		adds	r7, r7, #32
 481              	.LCFI14:
 482              		.cfi_def_cfa_offset 8
 483 008c BD46     		mov	sp, r7
 484              	.LCFI15:
 485              		.cfi_def_cfa_register 13
 486              		@ sp needed
 487 008e 80BD     		pop	{r7, pc}
 488              		.cfi_endproc
 489              	.LFE2:
 491              		.section	.text._PostTerminalSwitch,"ax",%progbits
 492              		.align	1
 493              		.syntax unified
 494              		.thumb
 495              		.thumb_func
 497              	_PostTerminalSwitch:
 498              	.LFB3:
 487:Core/Src/SEGGER_RTT.c **** 
 488:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 489:Core/Src/SEGGER_RTT.c **** *
 490:Core/Src/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 491:Core/Src/SEGGER_RTT.c **** *
 492:Core/Src/SEGGER_RTT.c **** *  Function description
 493:Core/Src/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 494:Core/Src/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 495:Core/Src/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 496:Core/Src/SEGGER_RTT.c **** *
 497:Core/Src/SEGGER_RTT.c **** *  Parameters
 498:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 499:Core/Src/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 500:Core/Src/SEGGER_RTT.c **** */
 501:Core/Src/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 499              		.loc 1 501 88
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 16
 502              		@ frame_needed = 1, uses_anonymous_args = 0
 503 0000 80B5     		push	{r7, lr}
 504              	.LCFI16:
 505              		.cfi_def_cfa_offset 8
 506              		.cfi_offset 7, -8
 507              		.cfi_offset 14, -4
 508 0002 84B0     		sub	sp, sp, #16
 509              	.LCFI17:
 510              		.cfi_def_cfa_offset 24
 511 0004 00AF     		add	r7, sp, #0
 512              	.LCFI18:
 513              		.cfi_def_cfa_register 7
 514 0006 7860     		str	r0, [r7, #4]
 515 0008 0B46     		mov	r3, r1
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 19


 516 000a FB70     		strb	r3, [r7, #3]
 502:Core/Src/SEGGER_RTT.c ****   unsigned char ac[2];
 503:Core/Src/SEGGER_RTT.c **** 
 504:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 517              		.loc 1 504 9
 518 000c FF23     		movs	r3, #255
 519 000e 3B73     		strb	r3, [r7, #12]
 505:Core/Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 520              		.loc 1 505 23
 521 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 522 0012 074A     		ldr	r2, .L17
 523 0014 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 524              		.loc 1 505 9
 525 0016 7B73     		strb	r3, [r7, #13]
 506:Core/Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 526              		.loc 1 506 3
 527 0018 07F10C03 		add	r3, r7, #12
 528 001c 0222     		movs	r2, #2
 529 001e 1946     		mov	r1, r3
 530 0020 7868     		ldr	r0, [r7, #4]
 531 0022 FFF7FEFF 		bl	_WriteBlocking
 507:Core/Src/SEGGER_RTT.c **** }
 532              		.loc 1 507 1
 533 0026 00BF     		nop
 534 0028 1037     		adds	r7, r7, #16
 535              	.LCFI19:
 536              		.cfi_def_cfa_offset 8
 537 002a BD46     		mov	sp, r7
 538              	.LCFI20:
 539              		.cfi_def_cfa_register 13
 540              		@ sp needed
 541 002c 80BD     		pop	{r7, pc}
 542              	.L18:
 543 002e 00BF     		.align	2
 544              	.L17:
 545 0030 00000000 		.word	_aTerminalId
 546              		.cfi_endproc
 547              	.LFE3:
 549              		.section	.text._GetAvailWriteSpace,"ax",%progbits
 550              		.align	1
 551              		.syntax unified
 552              		.thumb
 553              		.thumb_func
 555              	_GetAvailWriteSpace:
 556              	.LFB4:
 508:Core/Src/SEGGER_RTT.c **** 
 509:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 510:Core/Src/SEGGER_RTT.c **** *
 511:Core/Src/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 512:Core/Src/SEGGER_RTT.c **** *
 513:Core/Src/SEGGER_RTT.c **** *  Function description
 514:Core/Src/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 515:Core/Src/SEGGER_RTT.c **** *    buffer without blocking.
 516:Core/Src/SEGGER_RTT.c **** *
 517:Core/Src/SEGGER_RTT.c **** *  Parameters
 518:Core/Src/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 519:Core/Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 20


 520:Core/Src/SEGGER_RTT.c **** *  Return value
 521:Core/Src/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 522:Core/Src/SEGGER_RTT.c **** */
 523:Core/Src/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 557              		.loc 1 523 66
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 24
 560              		@ frame_needed = 1, uses_anonymous_args = 0
 561              		@ link register save eliminated.
 562 0000 80B4     		push	{r7}
 563              	.LCFI21:
 564              		.cfi_def_cfa_offset 4
 565              		.cfi_offset 7, -4
 566 0002 87B0     		sub	sp, sp, #28
 567              	.LCFI22:
 568              		.cfi_def_cfa_offset 32
 569 0004 00AF     		add	r7, sp, #0
 570              	.LCFI23:
 571              		.cfi_def_cfa_register 7
 572 0006 7860     		str	r0, [r7, #4]
 524:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
 525:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
 526:Core/Src/SEGGER_RTT.c ****   unsigned r;
 527:Core/Src/SEGGER_RTT.c ****   //
 528:Core/Src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 529:Core/Src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 530:Core/Src/SEGGER_RTT.c ****   //
 531:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 573              		.loc 1 531 9
 574 0008 7B68     		ldr	r3, [r7, #4]
 575 000a 1B69     		ldr	r3, [r3, #16]
 576 000c 3B61     		str	r3, [r7, #16]
 532:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 577              		.loc 1 532 9
 578 000e 7B68     		ldr	r3, [r7, #4]
 579 0010 DB68     		ldr	r3, [r3, #12]
 580 0012 FB60     		str	r3, [r7, #12]
 533:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 581              		.loc 1 533 6
 582 0014 3A69     		ldr	r2, [r7, #16]
 583 0016 FB68     		ldr	r3, [r7, #12]
 584 0018 9A42     		cmp	r2, r3
 585 001a 08D8     		bhi	.L20
 534:Core/Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 586              		.loc 1 534 14
 587 001c 7B68     		ldr	r3, [r7, #4]
 588 001e 9A68     		ldr	r2, [r3, #8]
 589              		.loc 1 534 34
 590 0020 FB68     		ldr	r3, [r7, #12]
 591 0022 D21A     		subs	r2, r2, r3
 592              		.loc 1 534 42
 593 0024 3B69     		ldr	r3, [r7, #16]
 594 0026 1344     		add	r3, r3, r2
 595              		.loc 1 534 7
 596 0028 013B     		subs	r3, r3, #1
 597 002a 7B61     		str	r3, [r7, #20]
 598 002c 04E0     		b	.L21
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 21


 599              	.L20:
 535:Core/Src/SEGGER_RTT.c ****   } else {
 536:Core/Src/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
 600              		.loc 1 536 15
 601 002e 3A69     		ldr	r2, [r7, #16]
 602 0030 FB68     		ldr	r3, [r7, #12]
 603 0032 D31A     		subs	r3, r2, r3
 604              		.loc 1 536 7
 605 0034 013B     		subs	r3, r3, #1
 606 0036 7B61     		str	r3, [r7, #20]
 607              	.L21:
 537:Core/Src/SEGGER_RTT.c ****   }
 538:Core/Src/SEGGER_RTT.c ****   return r;
 608              		.loc 1 538 10
 609 0038 7B69     		ldr	r3, [r7, #20]
 539:Core/Src/SEGGER_RTT.c **** }
 610              		.loc 1 539 1
 611 003a 1846     		mov	r0, r3
 612 003c 1C37     		adds	r7, r7, #28
 613              	.LCFI24:
 614              		.cfi_def_cfa_offset 4
 615 003e BD46     		mov	sp, r7
 616              	.LCFI25:
 617              		.cfi_def_cfa_register 13
 618              		@ sp needed
 619 0040 5DF8047B 		ldr	r7, [sp], #4
 620              	.LCFI26:
 621              		.cfi_restore 7
 622              		.cfi_def_cfa_offset 0
 623 0044 7047     		bx	lr
 624              		.cfi_endproc
 625              	.LFE4:
 627              		.section	.text.SEGGER_RTT_ReadUpBufferNoLock,"ax",%progbits
 628              		.align	1
 629              		.global	SEGGER_RTT_ReadUpBufferNoLock
 630              		.syntax unified
 631              		.thumb
 632              		.thumb_func
 634              	SEGGER_RTT_ReadUpBufferNoLock:
 635              	.LFB5:
 540:Core/Src/SEGGER_RTT.c **** 
 541:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 542:Core/Src/SEGGER_RTT.c **** *
 543:Core/Src/SEGGER_RTT.c **** *       Public code
 544:Core/Src/SEGGER_RTT.c **** *
 545:Core/Src/SEGGER_RTT.c **** **********************************************************************
 546:Core/Src/SEGGER_RTT.c **** */
 547:Core/Src/SEGGER_RTT.c **** 
 548:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 549:Core/Src/SEGGER_RTT.c **** *
 550:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBufferNoLock()
 551:Core/Src/SEGGER_RTT.c **** *
 552:Core/Src/SEGGER_RTT.c **** *  Function description
 553:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 554:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the application.
 555:Core/Src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 556:Core/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 22


 557:Core/Src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 558:Core/Src/SEGGER_RTT.c **** *
 559:Core/Src/SEGGER_RTT.c **** *  Parameters
 560:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 561:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 562:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 563:Core/Src/SEGGER_RTT.c **** *
 564:Core/Src/SEGGER_RTT.c **** *  Return value
 565:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 566:Core/Src/SEGGER_RTT.c **** *
 567:Core/Src/SEGGER_RTT.c **** *  Additional information
 568:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 569:Core/Src/SEGGER_RTT.c **** */
 570:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 636              		.loc 1 570 96
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 48
 639              		@ frame_needed = 1, uses_anonymous_args = 0
 640 0000 80B5     		push	{r7, lr}
 641              	.LCFI27:
 642              		.cfi_def_cfa_offset 8
 643              		.cfi_offset 7, -8
 644              		.cfi_offset 14, -4
 645 0002 8CB0     		sub	sp, sp, #48
 646              	.LCFI28:
 647              		.cfi_def_cfa_offset 56
 648 0004 00AF     		add	r7, sp, #0
 649              	.LCFI29:
 650              		.cfi_def_cfa_register 7
 651 0006 F860     		str	r0, [r7, #12]
 652 0008 B960     		str	r1, [r7, #8]
 653 000a 7A60     		str	r2, [r7, #4]
 654              	.LBB2:
 571:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 572:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 573:Core/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 574:Core/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 575:Core/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 576:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 577:Core/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 578:Core/Src/SEGGER_RTT.c **** 
 579:Core/Src/SEGGER_RTT.c ****   INIT();
 655              		.loc 1 579 3
 656 000c 3E4B     		ldr	r3, .L29
 657 000e 3B62     		str	r3, [r7, #32]
 658 0010 3B6A     		ldr	r3, [r7, #32]
 659 0012 1B78     		ldrb	r3, [r3]
 660 0014 DBB2     		uxtb	r3, r3
 661 0016 002B     		cmp	r3, #0
 662 0018 01D1     		bne	.L24
 663              		.loc 1 579 3 is_stmt 0 discriminator 1
 664 001a FFF7FEFF 		bl	_DoInit
 665              	.L24:
 666              	.LBE2:
 580:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 667              		.loc 1 580 9 is_stmt 1
 668 001e FB68     		ldr	r3, [r7, #12]
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 23


 669 0020 5A1C     		adds	r2, r3, #1
 670 0022 1346     		mov	r3, r2
 671 0024 5B00     		lsls	r3, r3, #1
 672 0026 1344     		add	r3, r3, r2
 673 0028 DB00     		lsls	r3, r3, #3
 674 002a 374A     		ldr	r2, .L29
 675 002c 1344     		add	r3, r3, r2
 676 002e FB61     		str	r3, [r7, #28]
 581:Core/Src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 677              		.loc 1 581 11
 678 0030 BB68     		ldr	r3, [r7, #8]
 679 0032 7B62     		str	r3, [r7, #36]
 582:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 680              		.loc 1 582 9
 681 0034 FB69     		ldr	r3, [r7, #28]
 682 0036 1B69     		ldr	r3, [r3, #16]
 683 0038 BB62     		str	r3, [r7, #40]
 583:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 684              		.loc 1 583 9
 685 003a FB69     		ldr	r3, [r7, #28]
 686 003c DB68     		ldr	r3, [r3, #12]
 687 003e BB61     		str	r3, [r7, #24]
 584:Core/Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 688              		.loc 1 584 16
 689 0040 0023     		movs	r3, #0
 690 0042 FB62     		str	r3, [r7, #44]
 585:Core/Src/SEGGER_RTT.c ****   //
 586:Core/Src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 587:Core/Src/SEGGER_RTT.c ****   //
 588:Core/Src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 691              		.loc 1 588 6
 692 0044 BA6A     		ldr	r2, [r7, #40]
 693 0046 BB69     		ldr	r3, [r7, #24]
 694 0048 9A42     		cmp	r2, r3
 695 004a 2BD9     		bls	.L25
 589:Core/Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 696              		.loc 1 589 24
 697 004c FB69     		ldr	r3, [r7, #28]
 698 004e 9A68     		ldr	r2, [r3, #8]
 699              		.loc 1 589 17
 700 0050 BB6A     		ldr	r3, [r7, #40]
 701 0052 D31A     		subs	r3, r2, r3
 702 0054 7B61     		str	r3, [r7, #20]
 590:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 703              		.loc 1 590 17
 704 0056 7A69     		ldr	r2, [r7, #20]
 705 0058 7B68     		ldr	r3, [r7, #4]
 706 005a 9342     		cmp	r3, r2
 707 005c 28BF     		it	cs
 708 005e 1346     		movcs	r3, r2
 709 0060 7B61     		str	r3, [r7, #20]
 591:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 710              		.loc 1 591 18
 711 0062 FB69     		ldr	r3, [r7, #28]
 712 0064 5A68     		ldr	r2, [r3, #4]
 713              		.loc 1 591 10
 714 0066 BB6A     		ldr	r3, [r7, #40]
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 24


 715 0068 1344     		add	r3, r3, r2
 716 006a 3B61     		str	r3, [r7, #16]
 592:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 593:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 594:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 595:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 596:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 597:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 598:Core/Src/SEGGER_RTT.c ****     };
 599:Core/Src/SEGGER_RTT.c **** #else
 600:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 717              		.loc 1 600 5
 718 006c 7A69     		ldr	r2, [r7, #20]
 719 006e 3969     		ldr	r1, [r7, #16]
 720 0070 786A     		ldr	r0, [r7, #36]
 721 0072 FFF7FEFF 		bl	memcpy
 601:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 722              		.loc 1 601 18
 723 0076 FA6A     		ldr	r2, [r7, #44]
 724 0078 7B69     		ldr	r3, [r7, #20]
 725 007a 1344     		add	r3, r3, r2
 726 007c FB62     		str	r3, [r7, #44]
 602:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 727              		.loc 1 602 18
 728 007e 7A6A     		ldr	r2, [r7, #36]
 729 0080 7B69     		ldr	r3, [r7, #20]
 730 0082 1344     		add	r3, r3, r2
 731 0084 7B62     		str	r3, [r7, #36]
 603:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 732              		.loc 1 603 18
 733 0086 7A68     		ldr	r2, [r7, #4]
 734 0088 7B69     		ldr	r3, [r7, #20]
 735 008a D31A     		subs	r3, r2, r3
 736 008c 7B60     		str	r3, [r7, #4]
 604:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 737              		.loc 1 604 18
 738 008e BA6A     		ldr	r2, [r7, #40]
 739 0090 7B69     		ldr	r3, [r7, #20]
 740 0092 1344     		add	r3, r3, r2
 741 0094 BB62     		str	r3, [r7, #40]
 605:Core/Src/SEGGER_RTT.c **** #endif
 606:Core/Src/SEGGER_RTT.c ****     //
 607:Core/Src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 608:Core/Src/SEGGER_RTT.c ****     //
 609:Core/Src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 742              		.loc 1 609 23
 743 0096 FB69     		ldr	r3, [r7, #28]
 744 0098 9B68     		ldr	r3, [r3, #8]
 745              		.loc 1 609 8
 746 009a BA6A     		ldr	r2, [r7, #40]
 747 009c 9A42     		cmp	r2, r3
 748 009e 01D1     		bne	.L25
 610:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 749              		.loc 1 610 13
 750 00a0 0023     		movs	r3, #0
 751 00a2 BB62     		str	r3, [r7, #40]
 752              	.L25:
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 25


 611:Core/Src/SEGGER_RTT.c ****     }
 612:Core/Src/SEGGER_RTT.c ****   }
 613:Core/Src/SEGGER_RTT.c ****   //
 614:Core/Src/SEGGER_RTT.c ****   // Read remaining items of buffer
 615:Core/Src/SEGGER_RTT.c ****   //
 616:Core/Src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 753              		.loc 1 616 15
 754 00a4 BA69     		ldr	r2, [r7, #24]
 755 00a6 BB6A     		ldr	r3, [r7, #40]
 756 00a8 D31A     		subs	r3, r2, r3
 757 00aa 7B61     		str	r3, [r7, #20]
 617:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 758              		.loc 1 617 15
 759 00ac 7A69     		ldr	r2, [r7, #20]
 760 00ae 7B68     		ldr	r3, [r7, #4]
 761 00b0 9342     		cmp	r3, r2
 762 00b2 28BF     		it	cs
 763 00b4 1346     		movcs	r3, r2
 764 00b6 7B61     		str	r3, [r7, #20]
 618:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 765              		.loc 1 618 6
 766 00b8 7B69     		ldr	r3, [r7, #20]
 767 00ba 002B     		cmp	r3, #0
 768 00bc 19D0     		beq	.L26
 619:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 769              		.loc 1 619 18
 770 00be FB69     		ldr	r3, [r7, #28]
 771 00c0 5A68     		ldr	r2, [r3, #4]
 772              		.loc 1 619 10
 773 00c2 BB6A     		ldr	r3, [r7, #40]
 774 00c4 1344     		add	r3, r3, r2
 775 00c6 3B61     		str	r3, [r7, #16]
 620:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 621:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 622:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 623:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 624:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 625:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 626:Core/Src/SEGGER_RTT.c ****     };
 627:Core/Src/SEGGER_RTT.c **** #else
 628:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 776              		.loc 1 628 5
 777 00c8 7A69     		ldr	r2, [r7, #20]
 778 00ca 3969     		ldr	r1, [r7, #16]
 779 00cc 786A     		ldr	r0, [r7, #36]
 780 00ce FFF7FEFF 		bl	memcpy
 629:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 781              		.loc 1 629 18
 782 00d2 FA6A     		ldr	r2, [r7, #44]
 783 00d4 7B69     		ldr	r3, [r7, #20]
 784 00d6 1344     		add	r3, r3, r2
 785 00d8 FB62     		str	r3, [r7, #44]
 630:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 786              		.loc 1 630 18
 787 00da 7A6A     		ldr	r2, [r7, #36]
 788 00dc 7B69     		ldr	r3, [r7, #20]
 789 00de 1344     		add	r3, r3, r2
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 26


 790 00e0 7B62     		str	r3, [r7, #36]
 631:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 791              		.loc 1 631 18
 792 00e2 7A68     		ldr	r2, [r7, #4]
 793 00e4 7B69     		ldr	r3, [r7, #20]
 794 00e6 D31A     		subs	r3, r2, r3
 795 00e8 7B60     		str	r3, [r7, #4]
 632:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 796              		.loc 1 632 18
 797 00ea BA6A     		ldr	r2, [r7, #40]
 798 00ec 7B69     		ldr	r3, [r7, #20]
 799 00ee 1344     		add	r3, r3, r2
 800 00f0 BB62     		str	r3, [r7, #40]
 801              	.L26:
 633:Core/Src/SEGGER_RTT.c **** #endif
 634:Core/Src/SEGGER_RTT.c ****   }
 635:Core/Src/SEGGER_RTT.c ****   //
 636:Core/Src/SEGGER_RTT.c ****   // Update read offset of buffer
 637:Core/Src/SEGGER_RTT.c ****   //
 638:Core/Src/SEGGER_RTT.c ****   if (NumBytesRead) {
 802              		.loc 1 638 6
 803 00f2 FB6A     		ldr	r3, [r7, #44]
 804 00f4 002B     		cmp	r3, #0
 805 00f6 02D0     		beq	.L27
 639:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 806              		.loc 1 639 18
 807 00f8 FB69     		ldr	r3, [r7, #28]
 808 00fa BA6A     		ldr	r2, [r7, #40]
 809 00fc 1A61     		str	r2, [r3, #16]
 810              	.L27:
 640:Core/Src/SEGGER_RTT.c ****   }
 641:Core/Src/SEGGER_RTT.c ****   //
 642:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 811              		.loc 1 642 10
 812 00fe FB6A     		ldr	r3, [r7, #44]
 643:Core/Src/SEGGER_RTT.c **** }
 813              		.loc 1 643 1
 814 0100 1846     		mov	r0, r3
 815 0102 3037     		adds	r7, r7, #48
 816              	.LCFI30:
 817              		.cfi_def_cfa_offset 8
 818 0104 BD46     		mov	sp, r7
 819              	.LCFI31:
 820              		.cfi_def_cfa_register 13
 821              		@ sp needed
 822 0106 80BD     		pop	{r7, pc}
 823              	.L30:
 824              		.align	2
 825              	.L29:
 826 0108 00000000 		.word	_SEGGER_RTT
 827              		.cfi_endproc
 828              	.LFE5:
 830              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 831              		.align	1
 832              		.global	SEGGER_RTT_ReadNoLock
 833              		.syntax unified
 834              		.thumb
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 27


 835              		.thumb_func
 837              	SEGGER_RTT_ReadNoLock:
 838              	.LFB6:
 644:Core/Src/SEGGER_RTT.c **** 
 645:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 646:Core/Src/SEGGER_RTT.c **** *
 647:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 648:Core/Src/SEGGER_RTT.c **** *
 649:Core/Src/SEGGER_RTT.c **** *  Function description
 650:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 651:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 652:Core/Src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 653:Core/Src/SEGGER_RTT.c **** *
 654:Core/Src/SEGGER_RTT.c **** *  Parameters
 655:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 656:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 657:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 658:Core/Src/SEGGER_RTT.c **** *
 659:Core/Src/SEGGER_RTT.c **** *  Return value
 660:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 661:Core/Src/SEGGER_RTT.c **** */
 662:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 839              		.loc 1 662 88
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 48
 842              		@ frame_needed = 1, uses_anonymous_args = 0
 843 0000 80B5     		push	{r7, lr}
 844              	.LCFI32:
 845              		.cfi_def_cfa_offset 8
 846              		.cfi_offset 7, -8
 847              		.cfi_offset 14, -4
 848 0002 8CB0     		sub	sp, sp, #48
 849              	.LCFI33:
 850              		.cfi_def_cfa_offset 56
 851 0004 00AF     		add	r7, sp, #0
 852              	.LCFI34:
 853              		.cfi_def_cfa_register 7
 854 0006 F860     		str	r0, [r7, #12]
 855 0008 B960     		str	r1, [r7, #8]
 856 000a 7A60     		str	r2, [r7, #4]
 857              	.LBB3:
 663:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 664:Core/Src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 665:Core/Src/SEGGER_RTT.c ****   unsigned                RdOff;
 666:Core/Src/SEGGER_RTT.c ****   unsigned                WrOff;
 667:Core/Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 668:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 669:Core/Src/SEGGER_RTT.c ****   volatile char*          pSrc;
 670:Core/Src/SEGGER_RTT.c ****   //
 671:Core/Src/SEGGER_RTT.c ****   INIT();
 858              		.loc 1 671 3
 859 000c 3E4B     		ldr	r3, .L37
 860 000e 3B62     		str	r3, [r7, #32]
 861 0010 3B6A     		ldr	r3, [r7, #32]
 862 0012 1B78     		ldrb	r3, [r3]
 863 0014 DBB2     		uxtb	r3, r3
 864 0016 002B     		cmp	r3, #0
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 28


 865 0018 01D1     		bne	.L32
 866              		.loc 1 671 3 is_stmt 0 discriminator 1
 867 001a FFF7FEFF 		bl	_DoInit
 868              	.L32:
 869              	.LBE3:
 672:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 870              		.loc 1 672 9 is_stmt 1
 871 001e FA68     		ldr	r2, [r7, #12]
 872 0020 1346     		mov	r3, r2
 873 0022 5B00     		lsls	r3, r3, #1
 874 0024 1344     		add	r3, r3, r2
 875 0026 DB00     		lsls	r3, r3, #3
 876 0028 6033     		adds	r3, r3, #96
 877 002a 374A     		ldr	r2, .L37
 878 002c 1344     		add	r3, r3, r2
 879 002e FB61     		str	r3, [r7, #28]
 673:Core/Src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 880              		.loc 1 673 11
 881 0030 BB68     		ldr	r3, [r7, #8]
 882 0032 7B62     		str	r3, [r7, #36]
 674:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 883              		.loc 1 674 9
 884 0034 FB69     		ldr	r3, [r7, #28]
 885 0036 1B69     		ldr	r3, [r3, #16]
 886 0038 BB62     		str	r3, [r7, #40]
 675:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 887              		.loc 1 675 9
 888 003a FB69     		ldr	r3, [r7, #28]
 889 003c DB68     		ldr	r3, [r3, #12]
 890 003e BB61     		str	r3, [r7, #24]
 676:Core/Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 891              		.loc 1 676 16
 892 0040 0023     		movs	r3, #0
 893 0042 FB62     		str	r3, [r7, #44]
 677:Core/Src/SEGGER_RTT.c ****   //
 678:Core/Src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 679:Core/Src/SEGGER_RTT.c ****   //
 680:Core/Src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 894              		.loc 1 680 6
 895 0044 BA6A     		ldr	r2, [r7, #40]
 896 0046 BB69     		ldr	r3, [r7, #24]
 897 0048 9A42     		cmp	r2, r3
 898 004a 2BD9     		bls	.L33
 681:Core/Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 899              		.loc 1 681 24
 900 004c FB69     		ldr	r3, [r7, #28]
 901 004e 9A68     		ldr	r2, [r3, #8]
 902              		.loc 1 681 17
 903 0050 BB6A     		ldr	r3, [r7, #40]
 904 0052 D31A     		subs	r3, r2, r3
 905 0054 7B61     		str	r3, [r7, #20]
 682:Core/Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 906              		.loc 1 682 17
 907 0056 7A69     		ldr	r2, [r7, #20]
 908 0058 7B68     		ldr	r3, [r7, #4]
 909 005a 9342     		cmp	r3, r2
 910 005c 28BF     		it	cs
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 29


 911 005e 1346     		movcs	r3, r2
 912 0060 7B61     		str	r3, [r7, #20]
 683:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 913              		.loc 1 683 18
 914 0062 FB69     		ldr	r3, [r7, #28]
 915 0064 5A68     		ldr	r2, [r3, #4]
 916              		.loc 1 683 10
 917 0066 BB6A     		ldr	r3, [r7, #40]
 918 0068 1344     		add	r3, r3, r2
 919 006a 3B61     		str	r3, [r7, #16]
 684:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 685:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 686:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 687:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 688:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 689:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 690:Core/Src/SEGGER_RTT.c ****     };
 691:Core/Src/SEGGER_RTT.c **** #else
 692:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 920              		.loc 1 692 5
 921 006c 7A69     		ldr	r2, [r7, #20]
 922 006e 3969     		ldr	r1, [r7, #16]
 923 0070 786A     		ldr	r0, [r7, #36]
 924 0072 FFF7FEFF 		bl	memcpy
 693:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 925              		.loc 1 693 18
 926 0076 FA6A     		ldr	r2, [r7, #44]
 927 0078 7B69     		ldr	r3, [r7, #20]
 928 007a 1344     		add	r3, r3, r2
 929 007c FB62     		str	r3, [r7, #44]
 694:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 930              		.loc 1 694 18
 931 007e 7A6A     		ldr	r2, [r7, #36]
 932 0080 7B69     		ldr	r3, [r7, #20]
 933 0082 1344     		add	r3, r3, r2
 934 0084 7B62     		str	r3, [r7, #36]
 695:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 935              		.loc 1 695 18
 936 0086 7A68     		ldr	r2, [r7, #4]
 937 0088 7B69     		ldr	r3, [r7, #20]
 938 008a D31A     		subs	r3, r2, r3
 939 008c 7B60     		str	r3, [r7, #4]
 696:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 940              		.loc 1 696 18
 941 008e BA6A     		ldr	r2, [r7, #40]
 942 0090 7B69     		ldr	r3, [r7, #20]
 943 0092 1344     		add	r3, r3, r2
 944 0094 BB62     		str	r3, [r7, #40]
 697:Core/Src/SEGGER_RTT.c **** #endif
 698:Core/Src/SEGGER_RTT.c ****     //
 699:Core/Src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 700:Core/Src/SEGGER_RTT.c ****     //
 701:Core/Src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 945              		.loc 1 701 23
 946 0096 FB69     		ldr	r3, [r7, #28]
 947 0098 9B68     		ldr	r3, [r3, #8]
 948              		.loc 1 701 8
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 30


 949 009a BA6A     		ldr	r2, [r7, #40]
 950 009c 9A42     		cmp	r2, r3
 951 009e 01D1     		bne	.L33
 702:Core/Src/SEGGER_RTT.c ****       RdOff = 0u;
 952              		.loc 1 702 13
 953 00a0 0023     		movs	r3, #0
 954 00a2 BB62     		str	r3, [r7, #40]
 955              	.L33:
 703:Core/Src/SEGGER_RTT.c ****     }
 704:Core/Src/SEGGER_RTT.c ****   }
 705:Core/Src/SEGGER_RTT.c ****   //
 706:Core/Src/SEGGER_RTT.c ****   // Read remaining items of buffer
 707:Core/Src/SEGGER_RTT.c ****   //
 708:Core/Src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 956              		.loc 1 708 15
 957 00a4 BA69     		ldr	r2, [r7, #24]
 958 00a6 BB6A     		ldr	r3, [r7, #40]
 959 00a8 D31A     		subs	r3, r2, r3
 960 00aa 7B61     		str	r3, [r7, #20]
 709:Core/Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 961              		.loc 1 709 15
 962 00ac 7A69     		ldr	r2, [r7, #20]
 963 00ae 7B68     		ldr	r3, [r7, #4]
 964 00b0 9342     		cmp	r3, r2
 965 00b2 28BF     		it	cs
 966 00b4 1346     		movcs	r3, r2
 967 00b6 7B61     		str	r3, [r7, #20]
 710:Core/Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 968              		.loc 1 710 6
 969 00b8 7B69     		ldr	r3, [r7, #20]
 970 00ba 002B     		cmp	r3, #0
 971 00bc 19D0     		beq	.L34
 711:Core/Src/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 972              		.loc 1 711 18
 973 00be FB69     		ldr	r3, [r7, #28]
 974 00c0 5A68     		ldr	r2, [r3, #4]
 975              		.loc 1 711 10
 976 00c2 BB6A     		ldr	r3, [r7, #40]
 977 00c4 1344     		add	r3, r3, r2
 978 00c6 3B61     		str	r3, [r7, #16]
 712:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 713:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 714:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 715:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 716:Core/Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 717:Core/Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 718:Core/Src/SEGGER_RTT.c ****     };
 719:Core/Src/SEGGER_RTT.c **** #else
 720:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 979              		.loc 1 720 5
 980 00c8 7A69     		ldr	r2, [r7, #20]
 981 00ca 3969     		ldr	r1, [r7, #16]
 982 00cc 786A     		ldr	r0, [r7, #36]
 983 00ce FFF7FEFF 		bl	memcpy
 721:Core/Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 984              		.loc 1 721 18
 985 00d2 FA6A     		ldr	r2, [r7, #44]
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 31


 986 00d4 7B69     		ldr	r3, [r7, #20]
 987 00d6 1344     		add	r3, r3, r2
 988 00d8 FB62     		str	r3, [r7, #44]
 722:Core/Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 989              		.loc 1 722 18
 990 00da 7A6A     		ldr	r2, [r7, #36]
 991 00dc 7B69     		ldr	r3, [r7, #20]
 992 00de 1344     		add	r3, r3, r2
 993 00e0 7B62     		str	r3, [r7, #36]
 723:Core/Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 994              		.loc 1 723 18
 995 00e2 7A68     		ldr	r2, [r7, #4]
 996 00e4 7B69     		ldr	r3, [r7, #20]
 997 00e6 D31A     		subs	r3, r2, r3
 998 00e8 7B60     		str	r3, [r7, #4]
 724:Core/Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 999              		.loc 1 724 18
 1000 00ea BA6A     		ldr	r2, [r7, #40]
 1001 00ec 7B69     		ldr	r3, [r7, #20]
 1002 00ee 1344     		add	r3, r3, r2
 1003 00f0 BB62     		str	r3, [r7, #40]
 1004              	.L34:
 725:Core/Src/SEGGER_RTT.c **** #endif
 726:Core/Src/SEGGER_RTT.c ****   }
 727:Core/Src/SEGGER_RTT.c ****   if (NumBytesRead) {
 1005              		.loc 1 727 6
 1006 00f2 FB6A     		ldr	r3, [r7, #44]
 1007 00f4 002B     		cmp	r3, #0
 1008 00f6 02D0     		beq	.L35
 728:Core/Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 1009              		.loc 1 728 18
 1010 00f8 FB69     		ldr	r3, [r7, #28]
 1011 00fa BA6A     		ldr	r2, [r7, #40]
 1012 00fc 1A61     		str	r2, [r3, #16]
 1013              	.L35:
 729:Core/Src/SEGGER_RTT.c ****   }
 730:Core/Src/SEGGER_RTT.c ****   //
 731:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 1014              		.loc 1 731 10
 1015 00fe FB6A     		ldr	r3, [r7, #44]
 732:Core/Src/SEGGER_RTT.c **** }
 1016              		.loc 1 732 1
 1017 0100 1846     		mov	r0, r3
 1018 0102 3037     		adds	r7, r7, #48
 1019              	.LCFI35:
 1020              		.cfi_def_cfa_offset 8
 1021 0104 BD46     		mov	sp, r7
 1022              	.LCFI36:
 1023              		.cfi_def_cfa_register 13
 1024              		@ sp needed
 1025 0106 80BD     		pop	{r7, pc}
 1026              	.L38:
 1027              		.align	2
 1028              	.L37:
 1029 0108 00000000 		.word	_SEGGER_RTT
 1030              		.cfi_endproc
 1031              	.LFE6:
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 32


 1033              		.section	.text.SEGGER_RTT_ReadUpBuffer,"ax",%progbits
 1034              		.align	1
 1035              		.global	SEGGER_RTT_ReadUpBuffer
 1036              		.syntax unified
 1037              		.thumb
 1038              		.thumb_func
 1040              	SEGGER_RTT_ReadUpBuffer:
 1041              	.LFB7:
 733:Core/Src/SEGGER_RTT.c **** 
 734:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 735:Core/Src/SEGGER_RTT.c **** *
 736:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBuffer
 737:Core/Src/SEGGER_RTT.c **** *
 738:Core/Src/SEGGER_RTT.c **** *  Function description
 739:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 740:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the application.
 741:Core/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 742:Core/Src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 743:Core/Src/SEGGER_RTT.c **** *
 744:Core/Src/SEGGER_RTT.c **** *  Parameters
 745:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 746:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 747:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 748:Core/Src/SEGGER_RTT.c **** *
 749:Core/Src/SEGGER_RTT.c **** *  Return value
 750:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 751:Core/Src/SEGGER_RTT.c **** *
 752:Core/Src/SEGGER_RTT.c **** *  Additional information
 753:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 754:Core/Src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
 755:Core/Src/SEGGER_RTT.c **** *    the read operation, writing is also locked.
 756:Core/Src/SEGGER_RTT.c **** *    If only one consumer reads from the up buffer, 
 757:Core/Src/SEGGER_RTT.c **** *    call sEGGER_RTT_ReadUpBufferNoLock() instead.
 758:Core/Src/SEGGER_RTT.c **** */
 759:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBuffer(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 1042              		.loc 1 759 92
 1043              		.cfi_startproc
 1044              		@ args = 0, pretend = 0, frame = 24
 1045              		@ frame_needed = 1, uses_anonymous_args = 0
 1046 0000 80B5     		push	{r7, lr}
 1047              	.LCFI37:
 1048              		.cfi_def_cfa_offset 8
 1049              		.cfi_offset 7, -8
 1050              		.cfi_offset 14, -4
 1051 0002 86B0     		sub	sp, sp, #24
 1052              	.LCFI38:
 1053              		.cfi_def_cfa_offset 32
 1054 0004 00AF     		add	r7, sp, #0
 1055              	.LCFI39:
 1056              		.cfi_def_cfa_register 7
 1057 0006 F860     		str	r0, [r7, #12]
 1058 0008 B960     		str	r1, [r7, #8]
 1059 000a 7A60     		str	r2, [r7, #4]
 1060              	.LBB4:
 760:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 761:Core/Src/SEGGER_RTT.c **** 
 762:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 33


 1061              		.loc 1 762 3
 1062              		.syntax unified
 1063              	@ 762 "Core/Src/SEGGER_RTT.c" 1
 1064 000c EFF31183 		mrs   r3, basepri  
 1065 0010 4FF02001 		mov   r1, #32       
 1066 0014 81F31188 		msr   basepri, r1  
 1067              		
 1068              	@ 0 "" 2
 1069              		.thumb
 1070              		.syntax unified
 1071 0018 7B61     		str	r3, [r7, #20]
 763:Core/Src/SEGGER_RTT.c ****   //
 764:Core/Src/SEGGER_RTT.c ****   // Call the non-locking read function
 765:Core/Src/SEGGER_RTT.c ****   //
 766:Core/Src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadUpBufferNoLock(BufferIndex, pBuffer, BufferSize);
 1072              		.loc 1 766 18
 1073 001a 7A68     		ldr	r2, [r7, #4]
 1074 001c B968     		ldr	r1, [r7, #8]
 1075 001e F868     		ldr	r0, [r7, #12]
 1076 0020 FFF7FEFF 		bl	SEGGER_RTT_ReadUpBufferNoLock
 1077 0024 3861     		str	r0, [r7, #16]
 767:Core/Src/SEGGER_RTT.c ****   //
 768:Core/Src/SEGGER_RTT.c ****   // Finish up.
 769:Core/Src/SEGGER_RTT.c ****   //
 770:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1078              		.loc 1 770 3
 1079 0026 7B69     		ldr	r3, [r7, #20]
 1080              		.syntax unified
 1081              	@ 770 "Core/Src/SEGGER_RTT.c" 1
 1082 0028 83F31188 		msr   basepri, r3  
 1083              		
 1084              	@ 0 "" 2
 1085              		.thumb
 1086              		.syntax unified
 1087              	.LBE4:
 771:Core/Src/SEGGER_RTT.c ****   //
 772:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 1088              		.loc 1 772 10
 1089 002c 3B69     		ldr	r3, [r7, #16]
 773:Core/Src/SEGGER_RTT.c **** }
 1090              		.loc 1 773 1
 1091 002e 1846     		mov	r0, r3
 1092 0030 1837     		adds	r7, r7, #24
 1093              	.LCFI40:
 1094              		.cfi_def_cfa_offset 8
 1095 0032 BD46     		mov	sp, r7
 1096              	.LCFI41:
 1097              		.cfi_def_cfa_register 13
 1098              		@ sp needed
 1099 0034 80BD     		pop	{r7, pc}
 1100              		.cfi_endproc
 1101              	.LFE7:
 1103              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 1104              		.align	1
 1105              		.global	SEGGER_RTT_Read
 1106              		.syntax unified
 1107              		.thumb
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 34


 1108              		.thumb_func
 1110              	SEGGER_RTT_Read:
 1111              	.LFB8:
 774:Core/Src/SEGGER_RTT.c **** 
 775:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 776:Core/Src/SEGGER_RTT.c **** *
 777:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 778:Core/Src/SEGGER_RTT.c **** *
 779:Core/Src/SEGGER_RTT.c **** *  Function description
 780:Core/Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 781:Core/Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 782:Core/Src/SEGGER_RTT.c **** *
 783:Core/Src/SEGGER_RTT.c **** *  Parameters
 784:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 785:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 786:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 787:Core/Src/SEGGER_RTT.c **** *
 788:Core/Src/SEGGER_RTT.c **** *  Return value
 789:Core/Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 790:Core/Src/SEGGER_RTT.c **** */
 791:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 1112              		.loc 1 791 84
 1113              		.cfi_startproc
 1114              		@ args = 0, pretend = 0, frame = 24
 1115              		@ frame_needed = 1, uses_anonymous_args = 0
 1116 0000 80B5     		push	{r7, lr}
 1117              	.LCFI42:
 1118              		.cfi_def_cfa_offset 8
 1119              		.cfi_offset 7, -8
 1120              		.cfi_offset 14, -4
 1121 0002 86B0     		sub	sp, sp, #24
 1122              	.LCFI43:
 1123              		.cfi_def_cfa_offset 32
 1124 0004 00AF     		add	r7, sp, #0
 1125              	.LCFI44:
 1126              		.cfi_def_cfa_register 7
 1127 0006 F860     		str	r0, [r7, #12]
 1128 0008 B960     		str	r1, [r7, #8]
 1129 000a 7A60     		str	r2, [r7, #4]
 1130              	.LBB5:
 792:Core/Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 793:Core/Src/SEGGER_RTT.c **** 
 794:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1131              		.loc 1 794 3
 1132              		.syntax unified
 1133              	@ 794 "Core/Src/SEGGER_RTT.c" 1
 1134 000c EFF31183 		mrs   r3, basepri  
 1135 0010 4FF02001 		mov   r1, #32       
 1136 0014 81F31188 		msr   basepri, r1  
 1137              		
 1138              	@ 0 "" 2
 1139              		.thumb
 1140              		.syntax unified
 1141 0018 7B61     		str	r3, [r7, #20]
 795:Core/Src/SEGGER_RTT.c ****   //
 796:Core/Src/SEGGER_RTT.c ****   // Call the non-locking read function
 797:Core/Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 35


 798:Core/Src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 1142              		.loc 1 798 18
 1143 001a 7A68     		ldr	r2, [r7, #4]
 1144 001c B968     		ldr	r1, [r7, #8]
 1145 001e F868     		ldr	r0, [r7, #12]
 1146 0020 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 1147 0024 3861     		str	r0, [r7, #16]
 799:Core/Src/SEGGER_RTT.c ****   //
 800:Core/Src/SEGGER_RTT.c ****   // Finish up.
 801:Core/Src/SEGGER_RTT.c ****   //
 802:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1148              		.loc 1 802 3
 1149 0026 7B69     		ldr	r3, [r7, #20]
 1150              		.syntax unified
 1151              	@ 802 "Core/Src/SEGGER_RTT.c" 1
 1152 0028 83F31188 		msr   basepri, r3  
 1153              		
 1154              	@ 0 "" 2
 1155              		.thumb
 1156              		.syntax unified
 1157              	.LBE5:
 803:Core/Src/SEGGER_RTT.c ****   //
 804:Core/Src/SEGGER_RTT.c ****   return NumBytesRead;
 1158              		.loc 1 804 10
 1159 002c 3B69     		ldr	r3, [r7, #16]
 805:Core/Src/SEGGER_RTT.c **** }
 1160              		.loc 1 805 1
 1161 002e 1846     		mov	r0, r3
 1162 0030 1837     		adds	r7, r7, #24
 1163              	.LCFI45:
 1164              		.cfi_def_cfa_offset 8
 1165 0032 BD46     		mov	sp, r7
 1166              	.LCFI46:
 1167              		.cfi_def_cfa_register 13
 1168              		@ sp needed
 1169 0034 80BD     		pop	{r7, pc}
 1170              		.cfi_endproc
 1171              	.LFE8:
 1173              		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 1174              		.align	1
 1175              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 1176              		.syntax unified
 1177              		.thumb
 1178              		.thumb_func
 1180              	SEGGER_RTT_WriteWithOverwriteNoLock:
 1181              	.LFB9:
 806:Core/Src/SEGGER_RTT.c **** 
 807:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 808:Core/Src/SEGGER_RTT.c **** *
 809:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 810:Core/Src/SEGGER_RTT.c **** *
 811:Core/Src/SEGGER_RTT.c **** *  Function description
 812:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 813:Core/Src/SEGGER_RTT.c **** *    control block.
 814:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application 
 815:Core/Src/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 816:Core/Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 36


 817:Core/Src/SEGGER_RTT.c **** *  Parameters
 818:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 819:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 820:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 821:Core/Src/SEGGER_RTT.c **** *
 822:Core/Src/SEGGER_RTT.c **** *  Notes
 823:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 824:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 825:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 826:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 827:Core/Src/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link 
 828:Core/Src/SEGGER_RTT.c **** *        connection reads RTT data.
 829:Core/Src/SEGGER_RTT.c **** */
 830:Core/Src/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 1182              		.loc 1 830 104
 1183              		.cfi_startproc
 1184              		@ args = 0, pretend = 0, frame = 32
 1185              		@ frame_needed = 1, uses_anonymous_args = 0
 1186 0000 80B5     		push	{r7, lr}
 1187              	.LCFI47:
 1188              		.cfi_def_cfa_offset 8
 1189              		.cfi_offset 7, -8
 1190              		.cfi_offset 14, -4
 1191 0002 88B0     		sub	sp, sp, #32
 1192              	.LCFI48:
 1193              		.cfi_def_cfa_offset 40
 1194 0004 00AF     		add	r7, sp, #0
 1195              	.LCFI49:
 1196              		.cfi_def_cfa_register 7
 1197 0006 F860     		str	r0, [r7, #12]
 1198 0008 B960     		str	r1, [r7, #8]
 1199 000a 7A60     		str	r2, [r7, #4]
 831:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 832:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 833:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 834:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 835:Core/Src/SEGGER_RTT.c ****   //
 836:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 837:Core/Src/SEGGER_RTT.c ****   //
 838:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1200              		.loc 1 838 9
 1201 000c BB68     		ldr	r3, [r7, #8]
 1202 000e FB61     		str	r3, [r7, #28]
 839:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1203              		.loc 1 839 9
 1204 0010 FB68     		ldr	r3, [r7, #12]
 1205 0012 5A1C     		adds	r2, r3, #1
 1206 0014 1346     		mov	r3, r2
 1207 0016 5B00     		lsls	r3, r3, #1
 1208 0018 1344     		add	r3, r3, r2
 1209 001a DB00     		lsls	r3, r3, #3
 1210 001c 404A     		ldr	r2, .L53
 1211 001e 1344     		add	r3, r3, r2
 1212 0020 7B61     		str	r3, [r7, #20]
 840:Core/Src/SEGGER_RTT.c ****   //
 841:Core/Src/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 842:Core/Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 37


 843:Core/Src/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 1213              		.loc 1 843 12
 1214 0022 7B69     		ldr	r3, [r7, #20]
 1215 0024 DA68     		ldr	r2, [r3, #12]
 1216              		.loc 1 843 28
 1217 0026 7B69     		ldr	r3, [r7, #20]
 1218 0028 1B69     		ldr	r3, [r3, #16]
 1219              		.loc 1 843 6
 1220 002a 9A42     		cmp	r2, r3
 1221 002c 04D1     		bne	.L44
 844:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1222              		.loc 1 844 18
 1223 002e 7B69     		ldr	r3, [r7, #20]
 1224 0030 9B68     		ldr	r3, [r3, #8]
 1225              		.loc 1 844 11
 1226 0032 013B     		subs	r3, r3, #1
 1227 0034 BB61     		str	r3, [r7, #24]
 1228 0036 17E0     		b	.L45
 1229              	.L44:
 845:Core/Src/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1230              		.loc 1 845 20
 1231 0038 7B69     		ldr	r3, [r7, #20]
 1232 003a DA68     		ldr	r2, [r3, #12]
 1233              		.loc 1 845 35
 1234 003c 7B69     		ldr	r3, [r7, #20]
 1235 003e 1B69     		ldr	r3, [r3, #16]
 1236              		.loc 1 845 13
 1237 0040 9A42     		cmp	r2, r3
 1238 0042 07D2     		bcs	.L46
 846:Core/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1239              		.loc 1 846 18
 1240 0044 7B69     		ldr	r3, [r7, #20]
 1241 0046 1A69     		ldr	r2, [r3, #16]
 1242              		.loc 1 846 33
 1243 0048 7B69     		ldr	r3, [r7, #20]
 1244 004a DB68     		ldr	r3, [r3, #12]
 1245              		.loc 1 846 26
 1246 004c D31A     		subs	r3, r2, r3
 1247              		.loc 1 846 11
 1248 004e 013B     		subs	r3, r3, #1
 1249 0050 BB61     		str	r3, [r7, #24]
 1250 0052 09E0     		b	.L45
 1251              	.L46:
 847:Core/Src/SEGGER_RTT.c ****   } else {
 848:Core/Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 1252              		.loc 1 848 18
 1253 0054 7B69     		ldr	r3, [r7, #20]
 1254 0056 1A69     		ldr	r2, [r3, #16]
 1255              		.loc 1 848 33
 1256 0058 7B69     		ldr	r3, [r7, #20]
 1257 005a DB68     		ldr	r3, [r3, #12]
 1258              		.loc 1 848 26
 1259 005c D21A     		subs	r2, r2, r3
 1260              		.loc 1 848 53
 1261 005e 7B69     		ldr	r3, [r7, #20]
 1262 0060 9B68     		ldr	r3, [r3, #8]
 1263              		.loc 1 848 46
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 38


 1264 0062 1344     		add	r3, r3, r2
 1265              		.loc 1 848 11
 1266 0064 013B     		subs	r3, r3, #1
 1267 0066 BB61     		str	r3, [r7, #24]
 1268              	.L45:
 849:Core/Src/SEGGER_RTT.c ****   }
 850:Core/Src/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 1269              		.loc 1 850 6
 1270 0068 7A68     		ldr	r2, [r7, #4]
 1271 006a BB69     		ldr	r3, [r7, #24]
 1272 006c 9A42     		cmp	r2, r3
 1273 006e 15D9     		bls	.L47
 851:Core/Src/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 1274              		.loc 1 851 10
 1275 0070 7B69     		ldr	r3, [r7, #20]
 1276 0072 1A69     		ldr	r2, [r3, #16]
 1277              		.loc 1 851 31
 1278 0074 7968     		ldr	r1, [r7, #4]
 1279 0076 BB69     		ldr	r3, [r7, #24]
 1280 0078 CB1A     		subs	r3, r1, r3
 1281              		.loc 1 851 18
 1282 007a 1A44     		add	r2, r2, r3
 1283 007c 7B69     		ldr	r3, [r7, #20]
 1284 007e 1A61     		str	r2, [r3, #16]
 852:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1285              		.loc 1 852 11
 1286 0080 06E0     		b	.L48
 1287              	.L49:
 853:Core/Src/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1288              		.loc 1 853 12
 1289 0082 7B69     		ldr	r3, [r7, #20]
 1290 0084 1A69     		ldr	r2, [r3, #16]
 1291              		.loc 1 853 28
 1292 0086 7B69     		ldr	r3, [r7, #20]
 1293 0088 9B68     		ldr	r3, [r3, #8]
 1294              		.loc 1 853 20
 1295 008a D21A     		subs	r2, r2, r3
 1296 008c 7B69     		ldr	r3, [r7, #20]
 1297 008e 1A61     		str	r2, [r3, #16]
 1298              	.L48:
 852:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1299              		.loc 1 852 17
 1300 0090 7B69     		ldr	r3, [r7, #20]
 1301 0092 1A69     		ldr	r2, [r3, #16]
 852:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1302              		.loc 1 852 33
 1303 0094 7B69     		ldr	r3, [r7, #20]
 1304 0096 9B68     		ldr	r3, [r3, #8]
 852:Core/Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1305              		.loc 1 852 25
 1306 0098 9A42     		cmp	r2, r3
 1307 009a F2D2     		bcs	.L49
 1308              	.L47:
 854:Core/Src/SEGGER_RTT.c ****     }
 855:Core/Src/SEGGER_RTT.c ****   }
 856:Core/Src/SEGGER_RTT.c ****   //
 857:Core/Src/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 39


 858:Core/Src/SEGGER_RTT.c ****   //
 859:Core/Src/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 1309              		.loc 1 859 16
 1310 009c 7B69     		ldr	r3, [r7, #20]
 1311 009e 9A68     		ldr	r2, [r3, #8]
 1312              		.loc 1 859 38
 1313 00a0 7B69     		ldr	r3, [r7, #20]
 1314 00a2 DB68     		ldr	r3, [r3, #12]
 1315              		.loc 1 859 9
 1316 00a4 D31A     		subs	r3, r2, r3
 1317 00a6 BB61     		str	r3, [r7, #24]
 1318              	.L52:
 860:Core/Src/SEGGER_RTT.c ****   do {
 861:Core/Src/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 1319              		.loc 1 861 8
 1320 00a8 BA69     		ldr	r2, [r7, #24]
 1321 00aa 7B68     		ldr	r3, [r7, #4]
 1322 00ac 9A42     		cmp	r2, r3
 1323 00ae 13D9     		bls	.L50
 862:Core/Src/SEGGER_RTT.c ****       //
 863:Core/Src/SEGGER_RTT.c ****       // Last round
 864:Core/Src/SEGGER_RTT.c ****       //
 865:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1324              		.loc 1 865 20
 1325 00b0 7B69     		ldr	r3, [r7, #20]
 1326 00b2 5A68     		ldr	r2, [r3, #4]
 1327              		.loc 1 865 37
 1328 00b4 7B69     		ldr	r3, [r7, #20]
 1329 00b6 DB68     		ldr	r3, [r3, #12]
 1330              		.loc 1 865 12
 1331 00b8 1344     		add	r3, r3, r2
 1332 00ba 3B61     		str	r3, [r7, #16]
 866:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 867:Core/Src/SEGGER_RTT.c ****       Avail = NumBytes;
 868:Core/Src/SEGGER_RTT.c ****       while (NumBytes--) {
 869:Core/Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 870:Core/Src/SEGGER_RTT.c ****       };
 871:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 872:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 873:Core/Src/SEGGER_RTT.c **** #else
 874:Core/Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 1333              		.loc 1 874 7
 1334 00bc 7A68     		ldr	r2, [r7, #4]
 1335 00be F969     		ldr	r1, [r7, #28]
 1336 00c0 3869     		ldr	r0, [r7, #16]
 1337 00c2 FFF7FEFF 		bl	memcpy
 875:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1338              		.loc 1 875 7
 1339              		.syntax unified
 1340              	@ 875 "Core/Src/SEGGER_RTT.c" 1
 1341 00c6 BFF35F8F 		dmb
 1342              	
 1343              	@ 0 "" 2
 876:Core/Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1344              		.loc 1 876 12
 1345              		.thumb
 1346              		.syntax unified
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 40


 1347 00ca 7B69     		ldr	r3, [r7, #20]
 1348 00cc DA68     		ldr	r2, [r3, #12]
 1349              		.loc 1 876 20
 1350 00ce 7B68     		ldr	r3, [r7, #4]
 1351 00d0 1A44     		add	r2, r2, r3
 1352 00d2 7B69     		ldr	r3, [r7, #20]
 1353 00d4 DA60     		str	r2, [r3, #12]
 877:Core/Src/SEGGER_RTT.c **** #endif
 878:Core/Src/SEGGER_RTT.c ****       break;
 1354              		.loc 1 878 7
 1355 00d6 1FE0     		b	.L51
 1356              	.L50:
 879:Core/Src/SEGGER_RTT.c ****     } else {
 880:Core/Src/SEGGER_RTT.c ****       //
 881:Core/Src/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 882:Core/Src/SEGGER_RTT.c ****       //
 883:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1357              		.loc 1 883 20
 1358 00d8 7B69     		ldr	r3, [r7, #20]
 1359 00da 5A68     		ldr	r2, [r3, #4]
 1360              		.loc 1 883 37
 1361 00dc 7B69     		ldr	r3, [r7, #20]
 1362 00de DB68     		ldr	r3, [r3, #12]
 1363              		.loc 1 883 12
 1364 00e0 1344     		add	r3, r3, r2
 1365 00e2 3B61     		str	r3, [r7, #16]
 884:Core/Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 885:Core/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 886:Core/Src/SEGGER_RTT.c ****       while (Avail--) {
 887:Core/Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 888:Core/Src/SEGGER_RTT.c ****       };
 889:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 890:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 891:Core/Src/SEGGER_RTT.c **** #else
 892:Core/Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, Avail);
 1366              		.loc 1 892 7
 1367 00e4 BA69     		ldr	r2, [r7, #24]
 1368 00e6 F969     		ldr	r1, [r7, #28]
 1369 00e8 3869     		ldr	r0, [r7, #16]
 1370 00ea FFF7FEFF 		bl	memcpy
 893:Core/Src/SEGGER_RTT.c ****       pData += Avail;
 1371              		.loc 1 893 13
 1372 00ee FA69     		ldr	r2, [r7, #28]
 1373 00f0 BB69     		ldr	r3, [r7, #24]
 1374 00f2 1344     		add	r3, r3, r2
 1375 00f4 FB61     		str	r3, [r7, #28]
 894:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1376              		.loc 1 894 7
 1377              		.syntax unified
 1378              	@ 894 "Core/Src/SEGGER_RTT.c" 1
 1379 00f6 BFF35F8F 		dmb
 1380              	
 1381              	@ 0 "" 2
 895:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 1382              		.loc 1 895 20
 1383              		.thumb
 1384              		.syntax unified
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 41


 1385 00fa 7B69     		ldr	r3, [r7, #20]
 1386 00fc 0022     		movs	r2, #0
 1387 00fe DA60     		str	r2, [r3, #12]
 896:Core/Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 1388              		.loc 1 896 16
 1389 0100 7A68     		ldr	r2, [r7, #4]
 1390 0102 BB69     		ldr	r3, [r7, #24]
 1391 0104 D31A     		subs	r3, r2, r3
 1392 0106 7B60     		str	r3, [r7, #4]
 897:Core/Src/SEGGER_RTT.c **** #endif
 898:Core/Src/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 1393              		.loc 1 898 21
 1394 0108 7B69     		ldr	r3, [r7, #20]
 1395 010a 9B68     		ldr	r3, [r3, #8]
 1396              		.loc 1 898 13
 1397 010c 013B     		subs	r3, r3, #1
 1398 010e BB61     		str	r3, [r7, #24]
 899:Core/Src/SEGGER_RTT.c ****     }
 900:Core/Src/SEGGER_RTT.c ****   } while (NumBytes);
 1399              		.loc 1 900 12
 1400 0110 7B68     		ldr	r3, [r7, #4]
 1401 0112 002B     		cmp	r3, #0
 1402 0114 C8D1     		bne	.L52
 901:Core/Src/SEGGER_RTT.c **** }
 1403              		.loc 1 901 1
 1404 0116 00BF     		nop
 1405              	.L51:
 1406 0118 00BF     		nop
 1407 011a 2037     		adds	r7, r7, #32
 1408              	.LCFI50:
 1409              		.cfi_def_cfa_offset 8
 1410 011c BD46     		mov	sp, r7
 1411              	.LCFI51:
 1412              		.cfi_def_cfa_register 13
 1413              		@ sp needed
 1414 011e 80BD     		pop	{r7, pc}
 1415              	.L54:
 1416              		.align	2
 1417              	.L53:
 1418 0120 00000000 		.word	_SEGGER_RTT
 1419              		.cfi_endproc
 1420              	.LFE9:
 1422              		.section	.text.SEGGER_RTT_WriteDownBufferNoLock,"ax",%progbits
 1423              		.align	1
 1424              		.global	SEGGER_RTT_WriteDownBufferNoLock
 1425              		.syntax unified
 1426              		.thumb
 1427              		.thumb_func
 1429              	SEGGER_RTT_WriteDownBufferNoLock:
 1430              	.LFB10:
 902:Core/Src/SEGGER_RTT.c **** 
 903:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 904:Core/Src/SEGGER_RTT.c **** *
 905:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 906:Core/Src/SEGGER_RTT.c **** *
 907:Core/Src/SEGGER_RTT.c **** *  Function description
 908:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 42


 909:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
 910:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 911:Core/Src/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 912:Core/Src/SEGGER_RTT.c **** *
 913:Core/Src/SEGGER_RTT.c **** *  Parameters
 914:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 915:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 916:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 917:Core/Src/SEGGER_RTT.c **** *                 MUST be > 0!!!
 918:Core/Src/SEGGER_RTT.c **** *                 This is done for performance reasons, so no initial check has do be done.
 919:Core/Src/SEGGER_RTT.c **** *
 920:Core/Src/SEGGER_RTT.c **** *  Return value
 921:Core/Src/SEGGER_RTT.c **** *    1: Data has been copied
 922:Core/Src/SEGGER_RTT.c **** *    0: No space, data has not been copied
 923:Core/Src/SEGGER_RTT.c **** *
 924:Core/Src/SEGGER_RTT.c **** *  Notes
 925:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 926:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 927:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 928:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 929:Core/Src/SEGGER_RTT.c **** */
 930:Core/Src/SEGGER_RTT.c **** #if (RTT_USE_ASM == 0)
 931:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 932:Core/Src/SEGGER_RTT.c ****   const char*           pData;
 933:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 934:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
 935:Core/Src/SEGGER_RTT.c ****   unsigned              RdOff;
 936:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
 937:Core/Src/SEGGER_RTT.c ****   unsigned              Rem;
 938:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
 939:Core/Src/SEGGER_RTT.c ****   //
 940:Core/Src/SEGGER_RTT.c ****   // Cases:
 941:Core/Src/SEGGER_RTT.c ****   //   1) RdOff <= WrOff => Space until wrap-around is sufficient
 942:Core/Src/SEGGER_RTT.c ****   //   2) RdOff <= WrOff => Space after wrap-around needed (copy in 2 chunks)
 943:Core/Src/SEGGER_RTT.c ****   //   3) RdOff <  WrOff => No space in buf
 944:Core/Src/SEGGER_RTT.c ****   //   4) RdOff >  WrOff => Space is sufficient
 945:Core/Src/SEGGER_RTT.c ****   //   5) RdOff >  WrOff => No space in buf
 946:Core/Src/SEGGER_RTT.c ****   //
 947:Core/Src/SEGGER_RTT.c ****   // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enou
 948:Core/Src/SEGGER_RTT.c ****   //
 949:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 950:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 951:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 952:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 953:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 954:Core/Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte n
 955:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 1)?
 956:Core/Src/SEGGER_RTT.c **** CopyStraight:
 957:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 958:Core/Src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, NumBytes);
 959:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 960:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 961:Core/Src/SEGGER_RTT.c ****       return 1;
 962:Core/Src/SEGGER_RTT.c ****     }
 963:Core/Src/SEGGER_RTT.c ****     Avail += RdOff;                                     // Space incl. wrap-around
 964:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does
 965:Core/Src/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 43


 966:Core/Src/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 967:Core/Src/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 968:Core/Src/SEGGER_RTT.c ****       NumBytes -= Rem;
 969:Core/Src/SEGGER_RTT.c ****       //
 970:Core/Src/SEGGER_RTT.c ****       // Special case: First check that assumed RdOff == 0 calculated that last element before wrap
 971:Core/Src/SEGGER_RTT.c ****       // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is
 972:Core/Src/SEGGER_RTT.c ****       // In this case, we may use a copy straight until buffer end anyway without needing to copy 2
 973:Core/Src/SEGGER_RTT.c ****       // Therefore, check if 2nd memcpy is necessary at all
 974:Core/Src/SEGGER_RTT.c ****       //
 975:Core/Src/SEGGER_RTT.c ****       if (NumBytes) {
 976:Core/Src/SEGGER_RTT.c ****         pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 977:Core/Src/SEGGER_RTT.c ****         memcpy((void*)pDst, pData + Rem, NumBytes);
 978:Core/Src/SEGGER_RTT.c ****       }
 979:Core/Src/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 980:Core/Src/SEGGER_RTT.c ****       pRing->WrOff = NumBytes;
 981:Core/Src/SEGGER_RTT.c ****       return 1;
 982:Core/Src/SEGGER_RTT.c ****     }
 983:Core/Src/SEGGER_RTT.c ****   } else {                                             // Potential case 4)
 984:Core/Src/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 985:Core/Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does
 986:Core/Src/SEGGER_RTT.c ****       goto CopyStraight;
 987:Core/Src/SEGGER_RTT.c ****     }
 988:Core/Src/SEGGER_RTT.c ****   }
 989:Core/Src/SEGGER_RTT.c ****   return 0;     // No space in buffer
 990:Core/Src/SEGGER_RTT.c **** }
 991:Core/Src/SEGGER_RTT.c **** #endif
 992:Core/Src/SEGGER_RTT.c **** 
 993:Core/Src/SEGGER_RTT.c **** /*********************************************************************
 994:Core/Src/SEGGER_RTT.c **** *
 995:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBufferNoLock
 996:Core/Src/SEGGER_RTT.c **** *
 997:Core/Src/SEGGER_RTT.c **** *  Function description
 998:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 999:Core/Src/SEGGER_RTT.c **** *    control block inside a <Down> buffer.
1000:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteDownBufferNoLock does not lock the application.
1001:Core/Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
1002:Core/Src/SEGGER_RTT.c **** *    RTT data from other channels, such as TCP/IP or UART.
1003:Core/Src/SEGGER_RTT.c **** *
1004:Core/Src/SEGGER_RTT.c **** *  Parameters
1005:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Down"-buffer to be used.
1006:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1007:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1008:Core/Src/SEGGER_RTT.c **** *
1009:Core/Src/SEGGER_RTT.c **** *  Return value
1010:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1011:Core/Src/SEGGER_RTT.c **** *
1012:Core/Src/SEGGER_RTT.c **** *  Notes
1013:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1014:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1015:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1016:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1017:Core/Src/SEGGER_RTT.c **** *
1018:Core/Src/SEGGER_RTT.c **** *  Additional information
1019:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1020:Core/Src/SEGGER_RTT.c **** */
1021:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBy
 1431              		.loc 1 1021 105
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 44


 1432              		.cfi_startproc
 1433              		@ args = 0, pretend = 0, frame = 32
 1434              		@ frame_needed = 1, uses_anonymous_args = 0
 1435 0000 80B5     		push	{r7, lr}
 1436              	.LCFI52:
 1437              		.cfi_def_cfa_offset 8
 1438              		.cfi_offset 7, -8
 1439              		.cfi_offset 14, -4
 1440 0002 88B0     		sub	sp, sp, #32
 1441              	.LCFI53:
 1442              		.cfi_def_cfa_offset 40
 1443 0004 00AF     		add	r7, sp, #0
 1444              	.LCFI54:
 1445              		.cfi_def_cfa_register 7
 1446 0006 F860     		str	r0, [r7, #12]
 1447 0008 B960     		str	r1, [r7, #8]
 1448 000a 7A60     		str	r2, [r7, #4]
1022:Core/Src/SEGGER_RTT.c ****   unsigned                Status;
1023:Core/Src/SEGGER_RTT.c ****   unsigned                Avail;
1024:Core/Src/SEGGER_RTT.c ****   const char*             pData;
1025:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
1026:Core/Src/SEGGER_RTT.c ****   //
1027:Core/Src/SEGGER_RTT.c ****   // Get "to-target" ring buffer.
1028:Core/Src/SEGGER_RTT.c ****   // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offs
1029:Core/Src/SEGGER_RTT.c ****   //
1030:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1449              		.loc 1 1030 9
 1450 000c BB68     		ldr	r3, [r7, #8]
 1451 000e BB61     		str	r3, [r7, #24]
1031:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF)
 1452              		.loc 1 1031 9
 1453 0010 FA68     		ldr	r2, [r7, #12]
 1454 0012 1346     		mov	r3, r2
 1455 0014 5B00     		lsls	r3, r3, #1
 1456 0016 1344     		add	r3, r3, r2
 1457 0018 DB00     		lsls	r3, r3, #3
 1458 001a 6033     		adds	r3, r3, #96
 1459 001c 1F4A     		ldr	r2, .L64
 1460 001e 1344     		add	r3, r3, r2
 1461 0020 7B61     		str	r3, [r7, #20]
1032:Core/Src/SEGGER_RTT.c ****   //
1033:Core/Src/SEGGER_RTT.c ****   // How we output depends upon the mode...
1034:Core/Src/SEGGER_RTT.c ****   //
1035:Core/Src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1462              		.loc 1 1035 16
 1463 0022 7B69     		ldr	r3, [r7, #20]
 1464 0024 5B69     		ldr	r3, [r3, #20]
 1465              		.loc 1 1035 3
 1466 0026 022B     		cmp	r3, #2
 1467 0028 29D0     		beq	.L56
 1468 002a 022B     		cmp	r3, #2
 1469 002c 2ED8     		bhi	.L57
 1470 002e 002B     		cmp	r3, #0
 1471 0030 02D0     		beq	.L58
 1472 0032 012B     		cmp	r3, #1
 1473 0034 13D0     		beq	.L59
 1474 0036 29E0     		b	.L57
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 45


 1475              	.L58:
1036:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1037:Core/Src/SEGGER_RTT.c ****     //
1038:Core/Src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1039:Core/Src/SEGGER_RTT.c ****     // of this output, don't bother.
1040:Core/Src/SEGGER_RTT.c ****     //
1041:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1476              		.loc 1 1041 13
 1477 0038 7869     		ldr	r0, [r7, #20]
 1478 003a FFF7FEFF 		bl	_GetAvailWriteSpace
 1479 003e 3861     		str	r0, [r7, #16]
1042:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1480              		.loc 1 1042 8
 1481 0040 3A69     		ldr	r2, [r7, #16]
 1482 0042 7B68     		ldr	r3, [r7, #4]
 1483 0044 9A42     		cmp	r2, r3
 1484 0046 02D2     		bcs	.L60
1043:Core/Src/SEGGER_RTT.c ****       Status = 0u;
 1485              		.loc 1 1043 14
 1486 0048 0023     		movs	r3, #0
 1487 004a FB61     		str	r3, [r7, #28]
1044:Core/Src/SEGGER_RTT.c ****     } else {
1045:Core/Src/SEGGER_RTT.c ****       Status = NumBytes;
1046:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1047:Core/Src/SEGGER_RTT.c ****     }
1048:Core/Src/SEGGER_RTT.c ****     break;
 1488              		.loc 1 1048 5
 1489 004c 21E0     		b	.L62
 1490              	.L60:
1045:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1491              		.loc 1 1045 14
 1492 004e 7B68     		ldr	r3, [r7, #4]
 1493 0050 FB61     		str	r3, [r7, #28]
1046:Core/Src/SEGGER_RTT.c ****     }
 1494              		.loc 1 1046 7
 1495 0052 7A68     		ldr	r2, [r7, #4]
 1496 0054 B969     		ldr	r1, [r7, #24]
 1497 0056 7869     		ldr	r0, [r7, #20]
 1498 0058 FFF7FEFF 		bl	_WriteNoCheck
 1499              		.loc 1 1048 5
 1500 005c 19E0     		b	.L62
 1501              	.L59:
1049:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1050:Core/Src/SEGGER_RTT.c ****     //
1051:Core/Src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1052:Core/Src/SEGGER_RTT.c ****     //
1053:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1502              		.loc 1 1053 13
 1503 005e 7869     		ldr	r0, [r7, #20]
 1504 0060 FFF7FEFF 		bl	_GetAvailWriteSpace
 1505 0064 3861     		str	r0, [r7, #16]
1054:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1506              		.loc 1 1054 12
 1507 0066 7A68     		ldr	r2, [r7, #4]
 1508 0068 3B69     		ldr	r3, [r7, #16]
 1509 006a 9342     		cmp	r3, r2
 1510 006c 28BF     		it	cs
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 46


 1511 006e 1346     		movcs	r3, r2
 1512 0070 FB61     		str	r3, [r7, #28]
1055:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1513              		.loc 1 1055 5
 1514 0072 FA69     		ldr	r2, [r7, #28]
 1515 0074 B969     		ldr	r1, [r7, #24]
 1516 0076 7869     		ldr	r0, [r7, #20]
 1517 0078 FFF7FEFF 		bl	_WriteNoCheck
1056:Core/Src/SEGGER_RTT.c ****     break;
 1518              		.loc 1 1056 5
 1519 007c 09E0     		b	.L62
 1520              	.L56:
1057:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1058:Core/Src/SEGGER_RTT.c ****     //
1059:Core/Src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1060:Core/Src/SEGGER_RTT.c ****     //
1061:Core/Src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
 1521              		.loc 1 1061 14
 1522 007e 7A68     		ldr	r2, [r7, #4]
 1523 0080 B969     		ldr	r1, [r7, #24]
 1524 0082 7869     		ldr	r0, [r7, #20]
 1525 0084 FFF7FEFF 		bl	_WriteBlocking
 1526 0088 F861     		str	r0, [r7, #28]
1062:Core/Src/SEGGER_RTT.c ****     break;
 1527              		.loc 1 1062 5
 1528 008a 02E0     		b	.L62
 1529              	.L57:
1063:Core/Src/SEGGER_RTT.c ****   default:
1064:Core/Src/SEGGER_RTT.c ****     Status = 0u;
 1530              		.loc 1 1064 12
 1531 008c 0023     		movs	r3, #0
 1532 008e FB61     		str	r3, [r7, #28]
1065:Core/Src/SEGGER_RTT.c ****     break;
 1533              		.loc 1 1065 5
 1534 0090 00BF     		nop
 1535              	.L62:
1066:Core/Src/SEGGER_RTT.c ****   }
1067:Core/Src/SEGGER_RTT.c ****   //
1068:Core/Src/SEGGER_RTT.c ****   // Finish up.
1069:Core/Src/SEGGER_RTT.c ****   //
1070:Core/Src/SEGGER_RTT.c ****   return Status;
 1536              		.loc 1 1070 10
 1537 0092 FB69     		ldr	r3, [r7, #28]
1071:Core/Src/SEGGER_RTT.c **** }
 1538              		.loc 1 1071 1
 1539 0094 1846     		mov	r0, r3
 1540 0096 2037     		adds	r7, r7, #32
 1541              	.LCFI55:
 1542              		.cfi_def_cfa_offset 8
 1543 0098 BD46     		mov	sp, r7
 1544              	.LCFI56:
 1545              		.cfi_def_cfa_register 13
 1546              		@ sp needed
 1547 009a 80BD     		pop	{r7, pc}
 1548              	.L65:
 1549              		.align	2
 1550              	.L64:
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 47


 1551 009c 00000000 		.word	_SEGGER_RTT
 1552              		.cfi_endproc
 1553              	.LFE10:
 1555              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 1556              		.align	1
 1557              		.global	SEGGER_RTT_WriteNoLock
 1558              		.syntax unified
 1559              		.thumb
 1560              		.thumb_func
 1562              	SEGGER_RTT_WriteNoLock:
 1563              	.LFB11:
1072:Core/Src/SEGGER_RTT.c **** 
1073:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1074:Core/Src/SEGGER_RTT.c **** *
1075:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
1076:Core/Src/SEGGER_RTT.c **** *
1077:Core/Src/SEGGER_RTT.c **** *  Function description
1078:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1079:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
1080:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
1081:Core/Src/SEGGER_RTT.c **** *
1082:Core/Src/SEGGER_RTT.c **** *  Parameters
1083:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1084:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1085:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1086:Core/Src/SEGGER_RTT.c **** *
1087:Core/Src/SEGGER_RTT.c **** *  Return value
1088:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1089:Core/Src/SEGGER_RTT.c **** *
1090:Core/Src/SEGGER_RTT.c **** *  Notes
1091:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1092:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1093:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1094:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1095:Core/Src/SEGGER_RTT.c **** */
1096:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1564              		.loc 1 1096 95
 1565              		.cfi_startproc
 1566              		@ args = 0, pretend = 0, frame = 32
 1567              		@ frame_needed = 1, uses_anonymous_args = 0
 1568 0000 80B5     		push	{r7, lr}
 1569              	.LCFI57:
 1570              		.cfi_def_cfa_offset 8
 1571              		.cfi_offset 7, -8
 1572              		.cfi_offset 14, -4
 1573 0002 88B0     		sub	sp, sp, #32
 1574              	.LCFI58:
 1575              		.cfi_def_cfa_offset 40
 1576 0004 00AF     		add	r7, sp, #0
 1577              	.LCFI59:
 1578              		.cfi_def_cfa_register 7
 1579 0006 F860     		str	r0, [r7, #12]
 1580 0008 B960     		str	r1, [r7, #8]
 1581 000a 7A60     		str	r2, [r7, #4]
1097:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
1098:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
1099:Core/Src/SEGGER_RTT.c ****   const char*           pData;
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 48


1100:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1101:Core/Src/SEGGER_RTT.c ****   //
1102:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1103:Core/Src/SEGGER_RTT.c ****   //
1104:Core/Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1582              		.loc 1 1104 9
 1583 000c BB68     		ldr	r3, [r7, #8]
 1584 000e BB61     		str	r3, [r7, #24]
1105:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1585              		.loc 1 1105 9
 1586 0010 FB68     		ldr	r3, [r7, #12]
 1587 0012 5A1C     		adds	r2, r3, #1
 1588 0014 1346     		mov	r3, r2
 1589 0016 5B00     		lsls	r3, r3, #1
 1590 0018 1344     		add	r3, r3, r2
 1591 001a DB00     		lsls	r3, r3, #3
 1592 001c 1F4A     		ldr	r2, .L75
 1593 001e 1344     		add	r3, r3, r2
 1594 0020 7B61     		str	r3, [r7, #20]
1106:Core/Src/SEGGER_RTT.c ****   //
1107:Core/Src/SEGGER_RTT.c ****   // How we output depends upon the mode...
1108:Core/Src/SEGGER_RTT.c ****   //
1109:Core/Src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1595              		.loc 1 1109 16
 1596 0022 7B69     		ldr	r3, [r7, #20]
 1597 0024 5B69     		ldr	r3, [r3, #20]
 1598              		.loc 1 1109 3
 1599 0026 022B     		cmp	r3, #2
 1600 0028 29D0     		beq	.L67
 1601 002a 022B     		cmp	r3, #2
 1602 002c 2ED8     		bhi	.L68
 1603 002e 002B     		cmp	r3, #0
 1604 0030 02D0     		beq	.L69
 1605 0032 012B     		cmp	r3, #1
 1606 0034 13D0     		beq	.L70
 1607 0036 29E0     		b	.L68
 1608              	.L69:
1110:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1111:Core/Src/SEGGER_RTT.c ****     //
1112:Core/Src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1113:Core/Src/SEGGER_RTT.c ****     // of this output, don't bother.
1114:Core/Src/SEGGER_RTT.c ****     //
1115:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1609              		.loc 1 1115 13
 1610 0038 7869     		ldr	r0, [r7, #20]
 1611 003a FFF7FEFF 		bl	_GetAvailWriteSpace
 1612 003e 3861     		str	r0, [r7, #16]
1116:Core/Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1613              		.loc 1 1116 8
 1614 0040 3A69     		ldr	r2, [r7, #16]
 1615 0042 7B68     		ldr	r3, [r7, #4]
 1616 0044 9A42     		cmp	r2, r3
 1617 0046 02D2     		bcs	.L71
1117:Core/Src/SEGGER_RTT.c ****       Status = 0u;
 1618              		.loc 1 1117 14
 1619 0048 0023     		movs	r3, #0
 1620 004a FB61     		str	r3, [r7, #28]
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 49


1118:Core/Src/SEGGER_RTT.c ****     } else {
1119:Core/Src/SEGGER_RTT.c ****       Status = NumBytes;
1120:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1121:Core/Src/SEGGER_RTT.c ****     }
1122:Core/Src/SEGGER_RTT.c ****     break;
 1621              		.loc 1 1122 5
 1622 004c 21E0     		b	.L73
 1623              	.L71:
1119:Core/Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1624              		.loc 1 1119 14
 1625 004e 7B68     		ldr	r3, [r7, #4]
 1626 0050 FB61     		str	r3, [r7, #28]
1120:Core/Src/SEGGER_RTT.c ****     }
 1627              		.loc 1 1120 7
 1628 0052 7A68     		ldr	r2, [r7, #4]
 1629 0054 B969     		ldr	r1, [r7, #24]
 1630 0056 7869     		ldr	r0, [r7, #20]
 1631 0058 FFF7FEFF 		bl	_WriteNoCheck
 1632              		.loc 1 1122 5
 1633 005c 19E0     		b	.L73
 1634              	.L70:
1123:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1124:Core/Src/SEGGER_RTT.c ****     //
1125:Core/Src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1126:Core/Src/SEGGER_RTT.c ****     //
1127:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 1635              		.loc 1 1127 13
 1636 005e 7869     		ldr	r0, [r7, #20]
 1637 0060 FFF7FEFF 		bl	_GetAvailWriteSpace
 1638 0064 3861     		str	r0, [r7, #16]
1128:Core/Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1639              		.loc 1 1128 12
 1640 0066 7A68     		ldr	r2, [r7, #4]
 1641 0068 3B69     		ldr	r3, [r7, #16]
 1642 006a 9342     		cmp	r3, r2
 1643 006c 28BF     		it	cs
 1644 006e 1346     		movcs	r3, r2
 1645 0070 FB61     		str	r3, [r7, #28]
1129:Core/Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1646              		.loc 1 1129 5
 1647 0072 FA69     		ldr	r2, [r7, #28]
 1648 0074 B969     		ldr	r1, [r7, #24]
 1649 0076 7869     		ldr	r0, [r7, #20]
 1650 0078 FFF7FEFF 		bl	_WriteNoCheck
1130:Core/Src/SEGGER_RTT.c ****     break;
 1651              		.loc 1 1130 5
 1652 007c 09E0     		b	.L73
 1653              	.L67:
1131:Core/Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1132:Core/Src/SEGGER_RTT.c ****     //
1133:Core/Src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1134:Core/Src/SEGGER_RTT.c ****     //
1135:Core/Src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
 1654              		.loc 1 1135 14
 1655 007e 7A68     		ldr	r2, [r7, #4]
 1656 0080 B969     		ldr	r1, [r7, #24]
 1657 0082 7869     		ldr	r0, [r7, #20]
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 50


 1658 0084 FFF7FEFF 		bl	_WriteBlocking
 1659 0088 F861     		str	r0, [r7, #28]
1136:Core/Src/SEGGER_RTT.c ****     break;
 1660              		.loc 1 1136 5
 1661 008a 02E0     		b	.L73
 1662              	.L68:
1137:Core/Src/SEGGER_RTT.c ****   default:
1138:Core/Src/SEGGER_RTT.c ****     Status = 0u;
 1663              		.loc 1 1138 12
 1664 008c 0023     		movs	r3, #0
 1665 008e FB61     		str	r3, [r7, #28]
1139:Core/Src/SEGGER_RTT.c ****     break;
 1666              		.loc 1 1139 5
 1667 0090 00BF     		nop
 1668              	.L73:
1140:Core/Src/SEGGER_RTT.c ****   }
1141:Core/Src/SEGGER_RTT.c ****   //
1142:Core/Src/SEGGER_RTT.c ****   // Finish up.
1143:Core/Src/SEGGER_RTT.c ****   //
1144:Core/Src/SEGGER_RTT.c ****   return Status;
 1669              		.loc 1 1144 10
 1670 0092 FB69     		ldr	r3, [r7, #28]
1145:Core/Src/SEGGER_RTT.c **** }
 1671              		.loc 1 1145 1
 1672 0094 1846     		mov	r0, r3
 1673 0096 2037     		adds	r7, r7, #32
 1674              	.LCFI60:
 1675              		.cfi_def_cfa_offset 8
 1676 0098 BD46     		mov	sp, r7
 1677              	.LCFI61:
 1678              		.cfi_def_cfa_register 13
 1679              		@ sp needed
 1680 009a 80BD     		pop	{r7, pc}
 1681              	.L76:
 1682              		.align	2
 1683              	.L75:
 1684 009c 00000000 		.word	_SEGGER_RTT
 1685              		.cfi_endproc
 1686              	.LFE11:
 1688              		.section	.text.SEGGER_RTT_WriteDownBuffer,"ax",%progbits
 1689              		.align	1
 1690              		.global	SEGGER_RTT_WriteDownBuffer
 1691              		.syntax unified
 1692              		.thumb
 1693              		.thumb_func
 1695              	SEGGER_RTT_WriteDownBuffer:
 1696              	.LFB12:
1146:Core/Src/SEGGER_RTT.c **** 
1147:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1148:Core/Src/SEGGER_RTT.c **** *
1149:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBuffer
1150:Core/Src/SEGGER_RTT.c **** *
1151:Core/Src/SEGGER_RTT.c **** *  Function description
1152:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT control block in a <Down> buffer.
1153:Core/Src/SEGGER_RTT.c **** *
1154:Core/Src/SEGGER_RTT.c **** *  Parameters
1155:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 51


1156:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1157:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1158:Core/Src/SEGGER_RTT.c **** *
1159:Core/Src/SEGGER_RTT.c **** *  Return value
1160:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1161:Core/Src/SEGGER_RTT.c **** *
1162:Core/Src/SEGGER_RTT.c **** *  Notes
1163:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1164:Core/Src/SEGGER_RTT.c **** *
1165:Core/Src/SEGGER_RTT.c **** *  Additional information
1166:Core/Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1167:Core/Src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
1168:Core/Src/SEGGER_RTT.c **** *    the write operation, writing from the application is also locked.
1169:Core/Src/SEGGER_RTT.c **** *    If only one consumer writes to the down buffer, 
1170:Core/Src/SEGGER_RTT.c **** *    call SEGGER_RTT_WriteDownBufferNoLock() instead.
1171:Core/Src/SEGGER_RTT.c **** */
1172:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1697              		.loc 1 1172 99
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 32
 1700              		@ frame_needed = 1, uses_anonymous_args = 0
 1701 0000 80B5     		push	{r7, lr}
 1702              	.LCFI62:
 1703              		.cfi_def_cfa_offset 8
 1704              		.cfi_offset 7, -8
 1705              		.cfi_offset 14, -4
 1706 0002 88B0     		sub	sp, sp, #32
 1707              	.LCFI63:
 1708              		.cfi_def_cfa_offset 40
 1709 0004 00AF     		add	r7, sp, #0
 1710              	.LCFI64:
 1711              		.cfi_def_cfa_register 7
 1712 0006 F860     		str	r0, [r7, #12]
 1713 0008 B960     		str	r1, [r7, #8]
 1714 000a 7A60     		str	r2, [r7, #4]
 1715              	.LBB6:
1173:Core/Src/SEGGER_RTT.c ****   unsigned Status;
1174:Core/Src/SEGGER_RTT.c **** 
1175:Core/Src/SEGGER_RTT.c ****   INIT();
 1716              		.loc 1 1175 3
 1717 000c 0E4B     		ldr	r3, .L80
 1718 000e FB61     		str	r3, [r7, #28]
 1719 0010 FB69     		ldr	r3, [r7, #28]
 1720 0012 1B78     		ldrb	r3, [r3]
 1721 0014 DBB2     		uxtb	r3, r3
 1722 0016 002B     		cmp	r3, #0
 1723 0018 01D1     		bne	.L78
 1724              		.loc 1 1175 3 is_stmt 0 discriminator 1
 1725 001a FFF7FEFF 		bl	_DoInit
 1726              	.L78:
 1727              	.LBE6:
 1728              	.LBB7:
1176:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1729              		.loc 1 1176 3 is_stmt 1
 1730              		.syntax unified
 1731              	@ 1176 "Core/Src/SEGGER_RTT.c" 1
 1732 001e EFF31183 		mrs   r3, basepri  
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 52


 1733 0022 4FF02001 		mov   r1, #32       
 1734 0026 81F31188 		msr   basepri, r1  
 1735              		
 1736              	@ 0 "" 2
 1737              		.thumb
 1738              		.syntax unified
 1739 002a BB61     		str	r3, [r7, #24]
1177:Core/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locki
 1740              		.loc 1 1177 12
 1741 002c 7A68     		ldr	r2, [r7, #4]
 1742 002e B968     		ldr	r1, [r7, #8]
 1743 0030 F868     		ldr	r0, [r7, #12]
 1744 0032 FFF7FEFF 		bl	SEGGER_RTT_WriteDownBufferNoLock
 1745 0036 7861     		str	r0, [r7, #20]
1178:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1746              		.loc 1 1178 3
 1747 0038 BB69     		ldr	r3, [r7, #24]
 1748              		.syntax unified
 1749              	@ 1178 "Core/Src/SEGGER_RTT.c" 1
 1750 003a 83F31188 		msr   basepri, r3  
 1751              		
 1752              	@ 0 "" 2
 1753              		.thumb
 1754              		.syntax unified
 1755              	.LBE7:
1179:Core/Src/SEGGER_RTT.c ****   return Status;
 1756              		.loc 1 1179 10
 1757 003e 7B69     		ldr	r3, [r7, #20]
1180:Core/Src/SEGGER_RTT.c **** }
 1758              		.loc 1 1180 1
 1759 0040 1846     		mov	r0, r3
 1760 0042 2037     		adds	r7, r7, #32
 1761              	.LCFI65:
 1762              		.cfi_def_cfa_offset 8
 1763 0044 BD46     		mov	sp, r7
 1764              	.LCFI66:
 1765              		.cfi_def_cfa_register 13
 1766              		@ sp needed
 1767 0046 80BD     		pop	{r7, pc}
 1768              	.L81:
 1769              		.align	2
 1770              	.L80:
 1771 0048 00000000 		.word	_SEGGER_RTT
 1772              		.cfi_endproc
 1773              	.LFE12:
 1775              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1776              		.align	1
 1777              		.global	SEGGER_RTT_Write
 1778              		.syntax unified
 1779              		.thumb
 1780              		.thumb_func
 1782              	SEGGER_RTT_Write:
 1783              	.LFB13:
1181:Core/Src/SEGGER_RTT.c **** 
1182:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1183:Core/Src/SEGGER_RTT.c **** *
1184:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Write
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 53


1185:Core/Src/SEGGER_RTT.c **** *
1186:Core/Src/SEGGER_RTT.c **** *  Function description
1187:Core/Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1188:Core/Src/SEGGER_RTT.c **** *    control block which is then read by the host.
1189:Core/Src/SEGGER_RTT.c **** *
1190:Core/Src/SEGGER_RTT.c **** *  Parameters
1191:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1192:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1193:Core/Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1194:Core/Src/SEGGER_RTT.c **** *
1195:Core/Src/SEGGER_RTT.c **** *  Return value
1196:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1197:Core/Src/SEGGER_RTT.c **** *
1198:Core/Src/SEGGER_RTT.c **** *  Notes
1199:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1200:Core/Src/SEGGER_RTT.c **** */
1201:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1784              		.loc 1 1201 89
 1785              		.cfi_startproc
 1786              		@ args = 0, pretend = 0, frame = 32
 1787              		@ frame_needed = 1, uses_anonymous_args = 0
 1788 0000 80B5     		push	{r7, lr}
 1789              	.LCFI67:
 1790              		.cfi_def_cfa_offset 8
 1791              		.cfi_offset 7, -8
 1792              		.cfi_offset 14, -4
 1793 0002 88B0     		sub	sp, sp, #32
 1794              	.LCFI68:
 1795              		.cfi_def_cfa_offset 40
 1796 0004 00AF     		add	r7, sp, #0
 1797              	.LCFI69:
 1798              		.cfi_def_cfa_register 7
 1799 0006 F860     		str	r0, [r7, #12]
 1800 0008 B960     		str	r1, [r7, #8]
 1801 000a 7A60     		str	r2, [r7, #4]
 1802              	.LBB8:
1202:Core/Src/SEGGER_RTT.c ****   unsigned Status;
1203:Core/Src/SEGGER_RTT.c **** 
1204:Core/Src/SEGGER_RTT.c ****   INIT();
 1803              		.loc 1 1204 3
 1804 000c 0E4B     		ldr	r3, .L85
 1805 000e FB61     		str	r3, [r7, #28]
 1806 0010 FB69     		ldr	r3, [r7, #28]
 1807 0012 1B78     		ldrb	r3, [r3]
 1808 0014 DBB2     		uxtb	r3, r3
 1809 0016 002B     		cmp	r3, #0
 1810 0018 01D1     		bne	.L83
 1811              		.loc 1 1204 3 is_stmt 0 discriminator 1
 1812 001a FFF7FEFF 		bl	_DoInit
 1813              	.L83:
 1814              	.LBE8:
 1815              	.LBB9:
1205:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1816              		.loc 1 1205 3 is_stmt 1
 1817              		.syntax unified
 1818              	@ 1205 "Core/Src/SEGGER_RTT.c" 1
 1819 001e EFF31183 		mrs   r3, basepri  
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 54


 1820 0022 4FF02001 		mov   r1, #32       
 1821 0026 81F31188 		msr   basepri, r1  
 1822              		
 1823              	@ 0 "" 2
 1824              		.thumb
 1825              		.syntax unified
 1826 002a BB61     		str	r3, [r7, #24]
1206:Core/Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1827              		.loc 1 1206 12
 1828 002c 7A68     		ldr	r2, [r7, #4]
 1829 002e B968     		ldr	r1, [r7, #8]
 1830 0030 F868     		ldr	r0, [r7, #12]
 1831 0032 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1832 0036 7861     		str	r0, [r7, #20]
1207:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1833              		.loc 1 1207 3
 1834 0038 BB69     		ldr	r3, [r7, #24]
 1835              		.syntax unified
 1836              	@ 1207 "Core/Src/SEGGER_RTT.c" 1
 1837 003a 83F31188 		msr   basepri, r3  
 1838              		
 1839              	@ 0 "" 2
 1840              		.thumb
 1841              		.syntax unified
 1842              	.LBE9:
1208:Core/Src/SEGGER_RTT.c ****   return Status;
 1843              		.loc 1 1208 10
 1844 003e 7B69     		ldr	r3, [r7, #20]
1209:Core/Src/SEGGER_RTT.c **** }
 1845              		.loc 1 1209 1
 1846 0040 1846     		mov	r0, r3
 1847 0042 2037     		adds	r7, r7, #32
 1848              	.LCFI70:
 1849              		.cfi_def_cfa_offset 8
 1850 0044 BD46     		mov	sp, r7
 1851              	.LCFI71:
 1852              		.cfi_def_cfa_register 13
 1853              		@ sp needed
 1854 0046 80BD     		pop	{r7, pc}
 1855              	.L86:
 1856              		.align	2
 1857              	.L85:
 1858 0048 00000000 		.word	_SEGGER_RTT
 1859              		.cfi_endproc
 1860              	.LFE13:
 1862              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1863              		.align	1
 1864              		.global	SEGGER_RTT_WriteString
 1865              		.syntax unified
 1866              		.thumb
 1867              		.thumb_func
 1869              	SEGGER_RTT_WriteString:
 1870              	.LFB14:
1210:Core/Src/SEGGER_RTT.c **** 
1211:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1212:Core/Src/SEGGER_RTT.c **** *
1213:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 55


1214:Core/Src/SEGGER_RTT.c **** *
1215:Core/Src/SEGGER_RTT.c **** *  Function description
1216:Core/Src/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
1217:Core/Src/SEGGER_RTT.c **** *    This data is read by the host.
1218:Core/Src/SEGGER_RTT.c **** *
1219:Core/Src/SEGGER_RTT.c **** *  Parameters
1220:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1221:Core/Src/SEGGER_RTT.c **** *    s            Pointer to string.
1222:Core/Src/SEGGER_RTT.c **** *
1223:Core/Src/SEGGER_RTT.c **** *  Return value
1224:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1225:Core/Src/SEGGER_RTT.c **** *
1226:Core/Src/SEGGER_RTT.c **** *  Notes
1227:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1228:Core/Src/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
1229:Core/Src/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
1230:Core/Src/SEGGER_RTT.c **** */
1231:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1871              		.loc 1 1231 70
 1872              		.cfi_startproc
 1873              		@ args = 0, pretend = 0, frame = 16
 1874              		@ frame_needed = 1, uses_anonymous_args = 0
 1875 0000 80B5     		push	{r7, lr}
 1876              	.LCFI72:
 1877              		.cfi_def_cfa_offset 8
 1878              		.cfi_offset 7, -8
 1879              		.cfi_offset 14, -4
 1880 0002 84B0     		sub	sp, sp, #16
 1881              	.LCFI73:
 1882              		.cfi_def_cfa_offset 24
 1883 0004 00AF     		add	r7, sp, #0
 1884              	.LCFI74:
 1885              		.cfi_def_cfa_register 7
 1886 0006 7860     		str	r0, [r7, #4]
 1887 0008 3960     		str	r1, [r7]
1232:Core/Src/SEGGER_RTT.c ****   unsigned Len;
1233:Core/Src/SEGGER_RTT.c **** 
1234:Core/Src/SEGGER_RTT.c ****   Len = STRLEN(s);
 1888              		.loc 1 1234 9
 1889 000a 3868     		ldr	r0, [r7]
 1890 000c FFF7FEFF 		bl	strlen
 1891 0010 F860     		str	r0, [r7, #12]
1235:Core/Src/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1892              		.loc 1 1235 10
 1893 0012 FA68     		ldr	r2, [r7, #12]
 1894 0014 3968     		ldr	r1, [r7]
 1895 0016 7868     		ldr	r0, [r7, #4]
 1896 0018 FFF7FEFF 		bl	SEGGER_RTT_Write
 1897 001c 0346     		mov	r3, r0
1236:Core/Src/SEGGER_RTT.c **** }
 1898              		.loc 1 1236 1
 1899 001e 1846     		mov	r0, r3
 1900 0020 1037     		adds	r7, r7, #16
 1901              	.LCFI75:
 1902              		.cfi_def_cfa_offset 8
 1903 0022 BD46     		mov	sp, r7
 1904              	.LCFI76:
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 56


 1905              		.cfi_def_cfa_register 13
 1906              		@ sp needed
 1907 0024 80BD     		pop	{r7, pc}
 1908              		.cfi_endproc
 1909              	.LFE14:
 1911              		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 1912              		.align	1
 1913              		.global	SEGGER_RTT_PutCharSkipNoLock
 1914              		.syntax unified
 1915              		.thumb
 1916              		.thumb_func
 1918              	SEGGER_RTT_PutCharSkipNoLock:
 1919              	.LFB15:
1237:Core/Src/SEGGER_RTT.c **** 
1238:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1239:Core/Src/SEGGER_RTT.c **** *
1240:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
1241:Core/Src/SEGGER_RTT.c **** *
1242:Core/Src/SEGGER_RTT.c **** *  Function description
1243:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1244:Core/Src/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
1245:Core/Src/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
1246:Core/Src/SEGGER_RTT.c **** *
1247:Core/Src/SEGGER_RTT.c **** *  Parameters
1248:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1249:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1250:Core/Src/SEGGER_RTT.c **** *
1251:Core/Src/SEGGER_RTT.c **** *  Return value
1252:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1253:Core/Src/SEGGER_RTT.c **** *
1254:Core/Src/SEGGER_RTT.c **** *  Notes
1255:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1256:Core/Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1257:Core/Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1258:Core/Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1259:Core/Src/SEGGER_RTT.c **** */
1260:Core/Src/SEGGER_RTT.c **** 
1261:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 1920              		.loc 1 1261 69
 1921              		.cfi_startproc
 1922              		@ args = 0, pretend = 0, frame = 24
 1923              		@ frame_needed = 1, uses_anonymous_args = 0
 1924              		@ link register save eliminated.
 1925 0000 80B4     		push	{r7}
 1926              	.LCFI77:
 1927              		.cfi_def_cfa_offset 4
 1928              		.cfi_offset 7, -4
 1929 0002 87B0     		sub	sp, sp, #28
 1930              	.LCFI78:
 1931              		.cfi_def_cfa_offset 32
 1932 0004 00AF     		add	r7, sp, #0
 1933              	.LCFI79:
 1934              		.cfi_def_cfa_register 7
 1935 0006 7860     		str	r0, [r7, #4]
 1936 0008 0B46     		mov	r3, r1
 1937 000a FB70     		strb	r3, [r7, #3]
1262:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 57


1263:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
1264:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
1265:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
1266:Core/Src/SEGGER_RTT.c ****   //
1267:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1268:Core/Src/SEGGER_RTT.c ****   //
1269:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1938              		.loc 1 1269 9
 1939 000c 7B68     		ldr	r3, [r7, #4]
 1940 000e 5A1C     		adds	r2, r3, #1
 1941 0010 1346     		mov	r3, r2
 1942 0012 5B00     		lsls	r3, r3, #1
 1943 0014 1344     		add	r3, r3, r2
 1944 0016 DB00     		lsls	r3, r3, #3
 1945 0018 164A     		ldr	r2, .L94
 1946 001a 1344     		add	r3, r3, r2
 1947 001c FB60     		str	r3, [r7, #12]
1270:Core/Src/SEGGER_RTT.c ****   //
1271:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1272:Core/Src/SEGGER_RTT.c ****   //
1273:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1948              		.loc 1 1273 16
 1949 001e FB68     		ldr	r3, [r7, #12]
 1950 0020 DB68     		ldr	r3, [r3, #12]
 1951              		.loc 1 1273 9
 1952 0022 0133     		adds	r3, r3, #1
 1953 0024 7B61     		str	r3, [r7, #20]
1274:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1954              		.loc 1 1274 21
 1955 0026 FB68     		ldr	r3, [r7, #12]
 1956 0028 9B68     		ldr	r3, [r3, #8]
 1957              		.loc 1 1274 6
 1958 002a 7A69     		ldr	r2, [r7, #20]
 1959 002c 9A42     		cmp	r2, r3
 1960 002e 01D1     		bne	.L90
1275:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
 1961              		.loc 1 1275 11
 1962 0030 0023     		movs	r3, #0
 1963 0032 7B61     		str	r3, [r7, #20]
 1964              	.L90:
1276:Core/Src/SEGGER_RTT.c ****   }
1277:Core/Src/SEGGER_RTT.c ****   //
1278:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1279:Core/Src/SEGGER_RTT.c ****   //
1280:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1965              		.loc 1 1280 21
 1966 0034 FB68     		ldr	r3, [r7, #12]
 1967 0036 1B69     		ldr	r3, [r3, #16]
 1968              		.loc 1 1280 6
 1969 0038 7A69     		ldr	r2, [r7, #20]
 1970 003a 9A42     		cmp	r2, r3
 1971 003c 10D0     		beq	.L91
1281:Core/Src/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1972              		.loc 1 1281 18
 1973 003e FB68     		ldr	r3, [r7, #12]
 1974 0040 5A68     		ldr	r2, [r3, #4]
 1975              		.loc 1 1281 35
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 58


 1976 0042 FB68     		ldr	r3, [r7, #12]
 1977 0044 DB68     		ldr	r3, [r3, #12]
 1978              		.loc 1 1281 10
 1979 0046 1344     		add	r3, r3, r2
 1980 0048 BB60     		str	r3, [r7, #8]
1282:Core/Src/SEGGER_RTT.c ****     *pDst = c;
 1981              		.loc 1 1282 11
 1982 004a BB68     		ldr	r3, [r7, #8]
 1983 004c FA78     		ldrb	r2, [r7, #3]
 1984 004e 1A70     		strb	r2, [r3]
1283:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 1985              		.loc 1 1283 5
 1986              		.syntax unified
 1987              	@ 1283 "Core/Src/SEGGER_RTT.c" 1
 1988 0050 BFF35F8F 		dmb
 1989              	
 1990              	@ 0 "" 2
1284:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1991              		.loc 1 1284 18
 1992              		.thumb
 1993              		.syntax unified
 1994 0054 FB68     		ldr	r3, [r7, #12]
 1995 0056 7A69     		ldr	r2, [r7, #20]
 1996 0058 DA60     		str	r2, [r3, #12]
1285:Core/Src/SEGGER_RTT.c ****     Status = 1;
 1997              		.loc 1 1285 12
 1998 005a 0123     		movs	r3, #1
 1999 005c 3B61     		str	r3, [r7, #16]
 2000 005e 01E0     		b	.L92
 2001              	.L91:
1286:Core/Src/SEGGER_RTT.c ****   } else {
1287:Core/Src/SEGGER_RTT.c ****     Status = 0;
 2002              		.loc 1 1287 12
 2003 0060 0023     		movs	r3, #0
 2004 0062 3B61     		str	r3, [r7, #16]
 2005              	.L92:
1288:Core/Src/SEGGER_RTT.c ****   }
1289:Core/Src/SEGGER_RTT.c ****   //
1290:Core/Src/SEGGER_RTT.c ****   return Status;
 2006              		.loc 1 1290 10
 2007 0064 3B69     		ldr	r3, [r7, #16]
1291:Core/Src/SEGGER_RTT.c **** }
 2008              		.loc 1 1291 1
 2009 0066 1846     		mov	r0, r3
 2010 0068 1C37     		adds	r7, r7, #28
 2011              	.LCFI80:
 2012              		.cfi_def_cfa_offset 4
 2013 006a BD46     		mov	sp, r7
 2014              	.LCFI81:
 2015              		.cfi_def_cfa_register 13
 2016              		@ sp needed
 2017 006c 5DF8047B 		ldr	r7, [sp], #4
 2018              	.LCFI82:
 2019              		.cfi_restore 7
 2020              		.cfi_def_cfa_offset 0
 2021 0070 7047     		bx	lr
 2022              	.L95:
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 59


 2023 0072 00BF     		.align	2
 2024              	.L94:
 2025 0074 00000000 		.word	_SEGGER_RTT
 2026              		.cfi_endproc
 2027              	.LFE15:
 2029              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 2030              		.align	1
 2031              		.global	SEGGER_RTT_PutCharSkip
 2032              		.syntax unified
 2033              		.thumb
 2034              		.thumb_func
 2036              	SEGGER_RTT_PutCharSkip:
 2037              	.LFB16:
1292:Core/Src/SEGGER_RTT.c **** 
1293:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1294:Core/Src/SEGGER_RTT.c **** *
1295:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
1296:Core/Src/SEGGER_RTT.c **** *
1297:Core/Src/SEGGER_RTT.c **** *  Function description
1298:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1299:Core/Src/SEGGER_RTT.c **** *
1300:Core/Src/SEGGER_RTT.c **** *  Parameters
1301:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1302:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1303:Core/Src/SEGGER_RTT.c **** *
1304:Core/Src/SEGGER_RTT.c **** *  Return value
1305:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1306:Core/Src/SEGGER_RTT.c **** *
1307:Core/Src/SEGGER_RTT.c **** *  Notes
1308:Core/Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1309:Core/Src/SEGGER_RTT.c **** */
1310:Core/Src/SEGGER_RTT.c **** 
1311:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 2038              		.loc 1 1311 63
 2039              		.cfi_startproc
 2040              		@ args = 0, pretend = 0, frame = 32
 2041              		@ frame_needed = 1, uses_anonymous_args = 0
 2042 0000 80B5     		push	{r7, lr}
 2043              	.LCFI83:
 2044              		.cfi_def_cfa_offset 8
 2045              		.cfi_offset 7, -8
 2046              		.cfi_offset 14, -4
 2047 0002 88B0     		sub	sp, sp, #32
 2048              	.LCFI84:
 2049              		.cfi_def_cfa_offset 40
 2050 0004 00AF     		add	r7, sp, #0
 2051              	.LCFI85:
 2052              		.cfi_def_cfa_register 7
 2053 0006 7860     		str	r0, [r7, #4]
 2054 0008 0B46     		mov	r3, r1
 2055 000a FB70     		strb	r3, [r7, #3]
 2056              	.LBB10:
1312:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1313:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
1314:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
1315:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
1316:Core/Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 60


1317:Core/Src/SEGGER_RTT.c ****   // Prepare
1318:Core/Src/SEGGER_RTT.c ****   //
1319:Core/Src/SEGGER_RTT.c ****   INIT();
 2057              		.loc 1 1319 3
 2058 000c 214B     		ldr	r3, .L102
 2059 000e 7B61     		str	r3, [r7, #20]
 2060 0010 7B69     		ldr	r3, [r7, #20]
 2061 0012 1B78     		ldrb	r3, [r3]
 2062 0014 DBB2     		uxtb	r3, r3
 2063 0016 002B     		cmp	r3, #0
 2064 0018 01D1     		bne	.L97
 2065              		.loc 1 1319 3 is_stmt 0 discriminator 1
 2066 001a FFF7FEFF 		bl	_DoInit
 2067              	.L97:
 2068              	.LBE10:
 2069              	.LBB11:
1320:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2070              		.loc 1 1320 3 is_stmt 1
 2071              		.syntax unified
 2072              	@ 1320 "Core/Src/SEGGER_RTT.c" 1
 2073 001e EFF31183 		mrs   r3, basepri  
 2074 0022 4FF02001 		mov   r1, #32       
 2075 0026 81F31188 		msr   basepri, r1  
 2076              		
 2077              	@ 0 "" 2
 2078              		.thumb
 2079              		.syntax unified
 2080 002a 3B61     		str	r3, [r7, #16]
1321:Core/Src/SEGGER_RTT.c ****   //
1322:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1323:Core/Src/SEGGER_RTT.c ****   //
1324:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2081              		.loc 1 1324 9
 2082 002c 7B68     		ldr	r3, [r7, #4]
 2083 002e 5A1C     		adds	r2, r3, #1
 2084 0030 1346     		mov	r3, r2
 2085 0032 5B00     		lsls	r3, r3, #1
 2086 0034 1344     		add	r3, r3, r2
 2087 0036 DB00     		lsls	r3, r3, #3
 2088 0038 164A     		ldr	r2, .L102
 2089 003a 1344     		add	r3, r3, r2
 2090 003c FB60     		str	r3, [r7, #12]
1325:Core/Src/SEGGER_RTT.c ****   //
1326:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1327:Core/Src/SEGGER_RTT.c ****   //
1328:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2091              		.loc 1 1328 16
 2092 003e FB68     		ldr	r3, [r7, #12]
 2093 0040 DB68     		ldr	r3, [r3, #12]
 2094              		.loc 1 1328 9
 2095 0042 0133     		adds	r3, r3, #1
 2096 0044 FB61     		str	r3, [r7, #28]
1329:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2097              		.loc 1 1329 21
 2098 0046 FB68     		ldr	r3, [r7, #12]
 2099 0048 9B68     		ldr	r3, [r3, #8]
 2100              		.loc 1 1329 6
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 61


 2101 004a FA69     		ldr	r2, [r7, #28]
 2102 004c 9A42     		cmp	r2, r3
 2103 004e 01D1     		bne	.L98
1330:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
 2104              		.loc 1 1330 11
 2105 0050 0023     		movs	r3, #0
 2106 0052 FB61     		str	r3, [r7, #28]
 2107              	.L98:
1331:Core/Src/SEGGER_RTT.c ****   }
1332:Core/Src/SEGGER_RTT.c ****   //
1333:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1334:Core/Src/SEGGER_RTT.c ****   //
1335:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2108              		.loc 1 1335 21
 2109 0054 FB68     		ldr	r3, [r7, #12]
 2110 0056 1B69     		ldr	r3, [r3, #16]
 2111              		.loc 1 1335 6
 2112 0058 FA69     		ldr	r2, [r7, #28]
 2113 005a 9A42     		cmp	r2, r3
 2114 005c 10D0     		beq	.L99
1336:Core/Src/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2115              		.loc 1 1336 19
 2116 005e FB68     		ldr	r3, [r7, #12]
 2117 0060 5A68     		ldr	r2, [r3, #4]
 2118              		.loc 1 1336 36
 2119 0062 FB68     		ldr	r3, [r7, #12]
 2120 0064 DB68     		ldr	r3, [r3, #12]
 2121              		.loc 1 1336 11
 2122 0066 1344     		add	r3, r3, r2
 2123 0068 BB60     		str	r3, [r7, #8]
1337:Core/Src/SEGGER_RTT.c ****     *pDst = c;
 2124              		.loc 1 1337 11
 2125 006a BB68     		ldr	r3, [r7, #8]
 2126 006c FA78     		ldrb	r2, [r7, #3]
 2127 006e 1A70     		strb	r2, [r3]
1338:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2128              		.loc 1 1338 5
 2129              		.syntax unified
 2130              	@ 1338 "Core/Src/SEGGER_RTT.c" 1
 2131 0070 BFF35F8F 		dmb
 2132              	
 2133              	@ 0 "" 2
1339:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2134              		.loc 1 1339 18
 2135              		.thumb
 2136              		.syntax unified
 2137 0074 FB68     		ldr	r3, [r7, #12]
 2138 0076 FA69     		ldr	r2, [r7, #28]
 2139 0078 DA60     		str	r2, [r3, #12]
1340:Core/Src/SEGGER_RTT.c ****     Status = 1;
 2140              		.loc 1 1340 12
 2141 007a 0123     		movs	r3, #1
 2142 007c BB61     		str	r3, [r7, #24]
 2143 007e 01E0     		b	.L100
 2144              	.L99:
1341:Core/Src/SEGGER_RTT.c ****   } else {
1342:Core/Src/SEGGER_RTT.c ****     Status = 0;
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 62


 2145              		.loc 1 1342 12
 2146 0080 0023     		movs	r3, #0
 2147 0082 BB61     		str	r3, [r7, #24]
 2148              	.L100:
1343:Core/Src/SEGGER_RTT.c ****   }
1344:Core/Src/SEGGER_RTT.c ****   //
1345:Core/Src/SEGGER_RTT.c ****   // Finish up.
1346:Core/Src/SEGGER_RTT.c ****   //
1347:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2149              		.loc 1 1347 3
 2150 0084 3B69     		ldr	r3, [r7, #16]
 2151              		.syntax unified
 2152              	@ 1347 "Core/Src/SEGGER_RTT.c" 1
 2153 0086 83F31188 		msr   basepri, r3  
 2154              		
 2155              	@ 0 "" 2
 2156              		.thumb
 2157              		.syntax unified
 2158              	.LBE11:
1348:Core/Src/SEGGER_RTT.c ****   //
1349:Core/Src/SEGGER_RTT.c ****   return Status;
 2159              		.loc 1 1349 10
 2160 008a BB69     		ldr	r3, [r7, #24]
1350:Core/Src/SEGGER_RTT.c **** }
 2161              		.loc 1 1350 1
 2162 008c 1846     		mov	r0, r3
 2163 008e 2037     		adds	r7, r7, #32
 2164              	.LCFI86:
 2165              		.cfi_def_cfa_offset 8
 2166 0090 BD46     		mov	sp, r7
 2167              	.LCFI87:
 2168              		.cfi_def_cfa_register 13
 2169              		@ sp needed
 2170 0092 80BD     		pop	{r7, pc}
 2171              	.L103:
 2172              		.align	2
 2173              	.L102:
 2174 0094 00000000 		.word	_SEGGER_RTT
 2175              		.cfi_endproc
 2176              	.LFE16:
 2178              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
 2179              		.align	1
 2180              		.global	SEGGER_RTT_PutChar
 2181              		.syntax unified
 2182              		.thumb
 2183              		.thumb_func
 2185              	SEGGER_RTT_PutChar:
 2186              	.LFB17:
1351:Core/Src/SEGGER_RTT.c **** 
1352:Core/Src/SEGGER_RTT.c ****  /*********************************************************************
1353:Core/Src/SEGGER_RTT.c **** *
1354:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
1355:Core/Src/SEGGER_RTT.c **** *
1356:Core/Src/SEGGER_RTT.c **** *  Function description
1357:Core/Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1358:Core/Src/SEGGER_RTT.c **** *
1359:Core/Src/SEGGER_RTT.c **** *  Parameters
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 63


1360:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1361:Core/Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1362:Core/Src/SEGGER_RTT.c **** *
1363:Core/Src/SEGGER_RTT.c **** *  Return value
1364:Core/Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1365:Core/Src/SEGGER_RTT.c **** *
1366:Core/Src/SEGGER_RTT.c **** *  Notes
1367:Core/Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1368:Core/Src/SEGGER_RTT.c **** */
1369:Core/Src/SEGGER_RTT.c **** 
1370:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 2187              		.loc 1 1370 59
 2188              		.cfi_startproc
 2189              		@ args = 0, pretend = 0, frame = 32
 2190              		@ frame_needed = 1, uses_anonymous_args = 0
 2191 0000 80B5     		push	{r7, lr}
 2192              	.LCFI88:
 2193              		.cfi_def_cfa_offset 8
 2194              		.cfi_offset 7, -8
 2195              		.cfi_offset 14, -4
 2196 0002 88B0     		sub	sp, sp, #32
 2197              	.LCFI89:
 2198              		.cfi_def_cfa_offset 40
 2199 0004 00AF     		add	r7, sp, #0
 2200              	.LCFI90:
 2201              		.cfi_def_cfa_register 7
 2202 0006 7860     		str	r0, [r7, #4]
 2203 0008 0B46     		mov	r3, r1
 2204 000a FB70     		strb	r3, [r7, #3]
 2205              	.LBB12:
1371:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1372:Core/Src/SEGGER_RTT.c ****   unsigned              WrOff;
1373:Core/Src/SEGGER_RTT.c ****   unsigned              Status;
1374:Core/Src/SEGGER_RTT.c ****   volatile char*        pDst;
1375:Core/Src/SEGGER_RTT.c ****   //
1376:Core/Src/SEGGER_RTT.c ****   // Prepare
1377:Core/Src/SEGGER_RTT.c ****   //
1378:Core/Src/SEGGER_RTT.c ****   INIT();
 2206              		.loc 1 1378 3
 2207 000c 264B     		ldr	r3, .L112
 2208 000e 7B61     		str	r3, [r7, #20]
 2209 0010 7B69     		ldr	r3, [r7, #20]
 2210 0012 1B78     		ldrb	r3, [r3]
 2211 0014 DBB2     		uxtb	r3, r3
 2212 0016 002B     		cmp	r3, #0
 2213 0018 01D1     		bne	.L105
 2214              		.loc 1 1378 3 is_stmt 0 discriminator 1
 2215 001a FFF7FEFF 		bl	_DoInit
 2216              	.L105:
 2217              	.LBE12:
 2218              	.LBB13:
1379:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2219              		.loc 1 1379 3 is_stmt 1
 2220              		.syntax unified
 2221              	@ 1379 "Core/Src/SEGGER_RTT.c" 1
 2222 001e EFF31183 		mrs   r3, basepri  
 2223 0022 4FF02001 		mov   r1, #32       
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 64


 2224 0026 81F31188 		msr   basepri, r1  
 2225              		
 2226              	@ 0 "" 2
 2227              		.thumb
 2228              		.syntax unified
 2229 002a 3B61     		str	r3, [r7, #16]
1380:Core/Src/SEGGER_RTT.c ****   //
1381:Core/Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1382:Core/Src/SEGGER_RTT.c ****   //
1383:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2230              		.loc 1 1383 9
 2231 002c 7B68     		ldr	r3, [r7, #4]
 2232 002e 5A1C     		adds	r2, r3, #1
 2233 0030 1346     		mov	r3, r2
 2234 0032 5B00     		lsls	r3, r3, #1
 2235 0034 1344     		add	r3, r3, r2
 2236 0036 DB00     		lsls	r3, r3, #3
 2237 0038 1B4A     		ldr	r2, .L112
 2238 003a 1344     		add	r3, r3, r2
 2239 003c FB60     		str	r3, [r7, #12]
1384:Core/Src/SEGGER_RTT.c ****   //
1385:Core/Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1386:Core/Src/SEGGER_RTT.c ****   //
1387:Core/Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2240              		.loc 1 1387 16
 2241 003e FB68     		ldr	r3, [r7, #12]
 2242 0040 DB68     		ldr	r3, [r3, #12]
 2243              		.loc 1 1387 9
 2244 0042 0133     		adds	r3, r3, #1
 2245 0044 FB61     		str	r3, [r7, #28]
1388:Core/Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2246              		.loc 1 1388 21
 2247 0046 FB68     		ldr	r3, [r7, #12]
 2248 0048 9B68     		ldr	r3, [r3, #8]
 2249              		.loc 1 1388 6
 2250 004a FA69     		ldr	r2, [r7, #28]
 2251 004c 9A42     		cmp	r2, r3
 2252 004e 01D1     		bne	.L106
1389:Core/Src/SEGGER_RTT.c ****     WrOff = 0;
 2253              		.loc 1 1389 11
 2254 0050 0023     		movs	r3, #0
 2255 0052 FB61     		str	r3, [r7, #28]
 2256              	.L106:
1390:Core/Src/SEGGER_RTT.c ****   }
1391:Core/Src/SEGGER_RTT.c ****   //
1392:Core/Src/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1393:Core/Src/SEGGER_RTT.c ****   //
1394:Core/Src/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 2257              		.loc 1 1394 12
 2258 0054 FB68     		ldr	r3, [r7, #12]
 2259 0056 5B69     		ldr	r3, [r3, #20]
 2260              		.loc 1 1394 6
 2261 0058 022B     		cmp	r3, #2
 2262 005a 05D1     		bne	.L107
1395:Core/Src/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
 2263              		.loc 1 1395 11
 2264 005c 00BF     		nop
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 65


 2265              	.L108:
 2266              		.loc 1 1395 26 discriminator 1
 2267 005e FB68     		ldr	r3, [r7, #12]
 2268 0060 1B69     		ldr	r3, [r3, #16]
 2269              		.loc 1 1395 18 discriminator 1
 2270 0062 FA69     		ldr	r2, [r7, #28]
 2271 0064 9A42     		cmp	r2, r3
 2272 0066 FAD0     		beq	.L108
 2273              	.L107:
1396:Core/Src/SEGGER_RTT.c ****       ;
1397:Core/Src/SEGGER_RTT.c ****     }
1398:Core/Src/SEGGER_RTT.c ****   }
1399:Core/Src/SEGGER_RTT.c ****   //
1400:Core/Src/SEGGER_RTT.c ****   // Output byte if free space is available
1401:Core/Src/SEGGER_RTT.c ****   //
1402:Core/Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2274              		.loc 1 1402 21
 2275 0068 FB68     		ldr	r3, [r7, #12]
 2276 006a 1B69     		ldr	r3, [r3, #16]
 2277              		.loc 1 1402 6
 2278 006c FA69     		ldr	r2, [r7, #28]
 2279 006e 9A42     		cmp	r2, r3
 2280 0070 10D0     		beq	.L109
1403:Core/Src/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2281              		.loc 1 1403 19
 2282 0072 FB68     		ldr	r3, [r7, #12]
 2283 0074 5A68     		ldr	r2, [r3, #4]
 2284              		.loc 1 1403 36
 2285 0076 FB68     		ldr	r3, [r7, #12]
 2286 0078 DB68     		ldr	r3, [r3, #12]
 2287              		.loc 1 1403 11
 2288 007a 1344     		add	r3, r3, r2
 2289 007c BB60     		str	r3, [r7, #8]
1404:Core/Src/SEGGER_RTT.c ****     *pDst = c;
 2290              		.loc 1 1404 11
 2291 007e BB68     		ldr	r3, [r7, #8]
 2292 0080 FA78     		ldrb	r2, [r7, #3]
 2293 0082 1A70     		strb	r2, [r3]
1405:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2294              		.loc 1 1405 5
 2295              		.syntax unified
 2296              	@ 1405 "Core/Src/SEGGER_RTT.c" 1
 2297 0084 BFF35F8F 		dmb
 2298              	
 2299              	@ 0 "" 2
1406:Core/Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2300              		.loc 1 1406 18
 2301              		.thumb
 2302              		.syntax unified
 2303 0088 FB68     		ldr	r3, [r7, #12]
 2304 008a FA69     		ldr	r2, [r7, #28]
 2305 008c DA60     		str	r2, [r3, #12]
1407:Core/Src/SEGGER_RTT.c ****     Status = 1;
 2306              		.loc 1 1407 12
 2307 008e 0123     		movs	r3, #1
 2308 0090 BB61     		str	r3, [r7, #24]
 2309 0092 01E0     		b	.L110
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 66


 2310              	.L109:
1408:Core/Src/SEGGER_RTT.c ****   } else {
1409:Core/Src/SEGGER_RTT.c ****     Status = 0;
 2311              		.loc 1 1409 12
 2312 0094 0023     		movs	r3, #0
 2313 0096 BB61     		str	r3, [r7, #24]
 2314              	.L110:
1410:Core/Src/SEGGER_RTT.c ****   }
1411:Core/Src/SEGGER_RTT.c ****   //
1412:Core/Src/SEGGER_RTT.c ****   // Finish up.
1413:Core/Src/SEGGER_RTT.c ****   //
1414:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2315              		.loc 1 1414 3
 2316 0098 3B69     		ldr	r3, [r7, #16]
 2317              		.syntax unified
 2318              	@ 1414 "Core/Src/SEGGER_RTT.c" 1
 2319 009a 83F31188 		msr   basepri, r3  
 2320              		
 2321              	@ 0 "" 2
 2322              		.thumb
 2323              		.syntax unified
 2324              	.LBE13:
1415:Core/Src/SEGGER_RTT.c ****   return Status;
 2325              		.loc 1 1415 10
 2326 009e BB69     		ldr	r3, [r7, #24]
1416:Core/Src/SEGGER_RTT.c **** }
 2327              		.loc 1 1416 1
 2328 00a0 1846     		mov	r0, r3
 2329 00a2 2037     		adds	r7, r7, #32
 2330              	.LCFI91:
 2331              		.cfi_def_cfa_offset 8
 2332 00a4 BD46     		mov	sp, r7
 2333              	.LCFI92:
 2334              		.cfi_def_cfa_register 13
 2335              		@ sp needed
 2336 00a6 80BD     		pop	{r7, pc}
 2337              	.L113:
 2338              		.align	2
 2339              	.L112:
 2340 00a8 00000000 		.word	_SEGGER_RTT
 2341              		.cfi_endproc
 2342              	.LFE17:
 2344              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 2345              		.align	1
 2346              		.global	SEGGER_RTT_GetKey
 2347              		.syntax unified
 2348              		.thumb
 2349              		.thumb_func
 2351              	SEGGER_RTT_GetKey:
 2352              	.LFB18:
1417:Core/Src/SEGGER_RTT.c **** 
1418:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1419:Core/Src/SEGGER_RTT.c **** *
1420:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1421:Core/Src/SEGGER_RTT.c **** *
1422:Core/Src/SEGGER_RTT.c **** *  Function description
1423:Core/Src/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 67


1424:Core/Src/SEGGER_RTT.c **** *    Host has previously stored data there.
1425:Core/Src/SEGGER_RTT.c **** *
1426:Core/Src/SEGGER_RTT.c **** *  Return value
1427:Core/Src/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
1428:Core/Src/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1429:Core/Src/SEGGER_RTT.c **** *
1430:Core/Src/SEGGER_RTT.c **** *  Notes
1431:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1432:Core/Src/SEGGER_RTT.c **** */
1433:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 2353              		.loc 1 1433 29
 2354              		.cfi_startproc
 2355              		@ args = 0, pretend = 0, frame = 8
 2356              		@ frame_needed = 1, uses_anonymous_args = 0
 2357 0000 80B5     		push	{r7, lr}
 2358              	.LCFI93:
 2359              		.cfi_def_cfa_offset 8
 2360              		.cfi_offset 7, -8
 2361              		.cfi_offset 14, -4
 2362 0002 82B0     		sub	sp, sp, #8
 2363              	.LCFI94:
 2364              		.cfi_def_cfa_offset 16
 2365 0004 00AF     		add	r7, sp, #0
 2366              	.LCFI95:
 2367              		.cfi_def_cfa_register 7
1434:Core/Src/SEGGER_RTT.c ****   char c;
1435:Core/Src/SEGGER_RTT.c ****   int r;
1436:Core/Src/SEGGER_RTT.c **** 
1437:Core/Src/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 2368              		.loc 1 1437 12
 2369 0006 FB1C     		adds	r3, r7, #3
 2370 0008 0122     		movs	r2, #1
 2371 000a 1946     		mov	r1, r3
 2372 000c 0020     		movs	r0, #0
 2373 000e FFF7FEFF 		bl	SEGGER_RTT_Read
 2374 0012 0346     		mov	r3, r0
 2375              		.loc 1 1437 5 discriminator 1
 2376 0014 7B60     		str	r3, [r7, #4]
1438:Core/Src/SEGGER_RTT.c ****   if (r == 1) {
 2377              		.loc 1 1438 6
 2378 0016 7B68     		ldr	r3, [r7, #4]
 2379 0018 012B     		cmp	r3, #1
 2380 001a 02D1     		bne	.L115
1439:Core/Src/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2381              		.loc 1 1439 9
 2382 001c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2383              		.loc 1 1439 7
 2384 001e 7B60     		str	r3, [r7, #4]
 2385 0020 02E0     		b	.L116
 2386              	.L115:
1440:Core/Src/SEGGER_RTT.c ****   } else {
1441:Core/Src/SEGGER_RTT.c ****     r = -1;
 2387              		.loc 1 1441 7
 2388 0022 4FF0FF33 		mov	r3, #-1
 2389 0026 7B60     		str	r3, [r7, #4]
 2390              	.L116:
1442:Core/Src/SEGGER_RTT.c ****   }
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 68


1443:Core/Src/SEGGER_RTT.c ****   return r;
 2391              		.loc 1 1443 10
 2392 0028 7B68     		ldr	r3, [r7, #4]
1444:Core/Src/SEGGER_RTT.c **** }
 2393              		.loc 1 1444 1
 2394 002a 1846     		mov	r0, r3
 2395 002c 0837     		adds	r7, r7, #8
 2396              	.LCFI96:
 2397              		.cfi_def_cfa_offset 8
 2398 002e BD46     		mov	sp, r7
 2399              	.LCFI97:
 2400              		.cfi_def_cfa_register 13
 2401              		@ sp needed
 2402 0030 80BD     		pop	{r7, pc}
 2403              		.cfi_endproc
 2404              	.LFE18:
 2406              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 2407              		.align	1
 2408              		.global	SEGGER_RTT_WaitKey
 2409              		.syntax unified
 2410              		.thumb
 2411              		.thumb_func
 2413              	SEGGER_RTT_WaitKey:
 2414              	.LFB19:
1445:Core/Src/SEGGER_RTT.c **** 
1446:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1447:Core/Src/SEGGER_RTT.c **** *
1448:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1449:Core/Src/SEGGER_RTT.c **** *
1450:Core/Src/SEGGER_RTT.c **** *  Function description
1451:Core/Src/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1452:Core/Src/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1453:Core/Src/SEGGER_RTT.c **** *
1454:Core/Src/SEGGER_RTT.c **** *  Return value
1455:Core/Src/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1456:Core/Src/SEGGER_RTT.c **** *
1457:Core/Src/SEGGER_RTT.c **** *  Notes
1458:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1459:Core/Src/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1460:Core/Src/SEGGER_RTT.c **** */
1461:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 2415              		.loc 1 1461 30
 2416              		.cfi_startproc
 2417              		@ args = 0, pretend = 0, frame = 8
 2418              		@ frame_needed = 1, uses_anonymous_args = 0
 2419 0000 80B5     		push	{r7, lr}
 2420              	.LCFI98:
 2421              		.cfi_def_cfa_offset 8
 2422              		.cfi_offset 7, -8
 2423              		.cfi_offset 14, -4
 2424 0002 82B0     		sub	sp, sp, #8
 2425              	.LCFI99:
 2426              		.cfi_def_cfa_offset 16
 2427 0004 00AF     		add	r7, sp, #0
 2428              	.LCFI100:
 2429              		.cfi_def_cfa_register 7
 2430              	.L119:
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 69


1462:Core/Src/SEGGER_RTT.c ****   int r;
1463:Core/Src/SEGGER_RTT.c **** 
1464:Core/Src/SEGGER_RTT.c ****   do {
1465:Core/Src/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 2431              		.loc 1 1465 9
 2432 0006 FFF7FEFF 		bl	SEGGER_RTT_GetKey
 2433 000a 7860     		str	r0, [r7, #4]
1466:Core/Src/SEGGER_RTT.c ****   } while (r < 0);
 2434              		.loc 1 1466 14 discriminator 1
 2435 000c 7B68     		ldr	r3, [r7, #4]
 2436 000e 002B     		cmp	r3, #0
 2437 0010 F9DB     		blt	.L119
1467:Core/Src/SEGGER_RTT.c ****   return r;
 2438              		.loc 1 1467 10
 2439 0012 7B68     		ldr	r3, [r7, #4]
1468:Core/Src/SEGGER_RTT.c **** }
 2440              		.loc 1 1468 1
 2441 0014 1846     		mov	r0, r3
 2442 0016 0837     		adds	r7, r7, #8
 2443              	.LCFI101:
 2444              		.cfi_def_cfa_offset 8
 2445 0018 BD46     		mov	sp, r7
 2446              	.LCFI102:
 2447              		.cfi_def_cfa_register 13
 2448              		@ sp needed
 2449 001a 80BD     		pop	{r7, pc}
 2450              		.cfi_endproc
 2451              	.LFE19:
 2453              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 2454              		.align	1
 2455              		.global	SEGGER_RTT_HasKey
 2456              		.syntax unified
 2457              		.thumb
 2458              		.thumb_func
 2460              	SEGGER_RTT_HasKey:
 2461              	.LFB20:
1469:Core/Src/SEGGER_RTT.c **** 
1470:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1471:Core/Src/SEGGER_RTT.c **** *
1472:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1473:Core/Src/SEGGER_RTT.c **** *
1474:Core/Src/SEGGER_RTT.c **** *  Function description
1475:Core/Src/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
1476:Core/Src/SEGGER_RTT.c **** *
1477:Core/Src/SEGGER_RTT.c **** *  Return value
1478:Core/Src/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1479:Core/Src/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1480:Core/Src/SEGGER_RTT.c **** *
1481:Core/Src/SEGGER_RTT.c **** *  Notes
1482:Core/Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1483:Core/Src/SEGGER_RTT.c **** */
1484:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 2462              		.loc 1 1484 29
 2463              		.cfi_startproc
 2464              		@ args = 0, pretend = 0, frame = 16
 2465              		@ frame_needed = 1, uses_anonymous_args = 0
 2466 0000 80B5     		push	{r7, lr}
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 70


 2467              	.LCFI103:
 2468              		.cfi_def_cfa_offset 8
 2469              		.cfi_offset 7, -8
 2470              		.cfi_offset 14, -4
 2471 0002 84B0     		sub	sp, sp, #16
 2472              	.LCFI104:
 2473              		.cfi_def_cfa_offset 24
 2474 0004 00AF     		add	r7, sp, #0
 2475              	.LCFI105:
 2476              		.cfi_def_cfa_register 7
 2477              	.LBB14:
1485:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
1486:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
1487:Core/Src/SEGGER_RTT.c ****   int r;
1488:Core/Src/SEGGER_RTT.c **** 
1489:Core/Src/SEGGER_RTT.c ****   INIT();
 2478              		.loc 1 1489 3
 2479 0006 0E4B     		ldr	r3, .L126
 2480 0008 BB60     		str	r3, [r7, #8]
 2481 000a BB68     		ldr	r3, [r7, #8]
 2482 000c 1B78     		ldrb	r3, [r3]
 2483 000e DBB2     		uxtb	r3, r3
 2484 0010 002B     		cmp	r3, #0
 2485 0012 01D1     		bne	.L122
 2486              		.loc 1 1489 3 is_stmt 0 discriminator 1
 2487 0014 FFF7FEFF 		bl	_DoInit
 2488              	.L122:
 2489              	.LBE14:
1490:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2490              		.loc 1 1490 9 is_stmt 1
 2491 0018 0A4B     		ldr	r3, .L126+4
 2492 001a 7B60     		str	r3, [r7, #4]
1491:Core/Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 2493              		.loc 1 1491 9
 2494 001c 7B68     		ldr	r3, [r7, #4]
 2495 001e 1B69     		ldr	r3, [r3, #16]
 2496 0020 3B60     		str	r3, [r7]
1492:Core/Src/SEGGER_RTT.c ****   if (RdOff != pRing->WrOff) {
 2497              		.loc 1 1492 21
 2498 0022 7B68     		ldr	r3, [r7, #4]
 2499 0024 DB68     		ldr	r3, [r3, #12]
 2500              		.loc 1 1492 6
 2501 0026 3A68     		ldr	r2, [r7]
 2502 0028 9A42     		cmp	r2, r3
 2503 002a 02D0     		beq	.L123
1493:Core/Src/SEGGER_RTT.c ****     r = 1;
 2504              		.loc 1 1493 7
 2505 002c 0123     		movs	r3, #1
 2506 002e FB60     		str	r3, [r7, #12]
 2507 0030 01E0     		b	.L124
 2508              	.L123:
1494:Core/Src/SEGGER_RTT.c ****   } else {
1495:Core/Src/SEGGER_RTT.c ****     r = 0;
 2509              		.loc 1 1495 7
 2510 0032 0023     		movs	r3, #0
 2511 0034 FB60     		str	r3, [r7, #12]
 2512              	.L124:
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 71


1496:Core/Src/SEGGER_RTT.c ****   }
1497:Core/Src/SEGGER_RTT.c ****   return r;
 2513              		.loc 1 1497 10
 2514 0036 FB68     		ldr	r3, [r7, #12]
1498:Core/Src/SEGGER_RTT.c **** }
 2515              		.loc 1 1498 1
 2516 0038 1846     		mov	r0, r3
 2517 003a 1037     		adds	r7, r7, #16
 2518              	.LCFI106:
 2519              		.cfi_def_cfa_offset 8
 2520 003c BD46     		mov	sp, r7
 2521              	.LCFI107:
 2522              		.cfi_def_cfa_register 13
 2523              		@ sp needed
 2524 003e 80BD     		pop	{r7, pc}
 2525              	.L127:
 2526              		.align	2
 2527              	.L126:
 2528 0040 00000000 		.word	_SEGGER_RTT
 2529 0044 60000000 		.word	_SEGGER_RTT+96
 2530              		.cfi_endproc
 2531              	.LFE20:
 2533              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 2534              		.align	1
 2535              		.global	SEGGER_RTT_HasData
 2536              		.syntax unified
 2537              		.thumb
 2538              		.thumb_func
 2540              	SEGGER_RTT_HasData:
 2541              	.LFB21:
1499:Core/Src/SEGGER_RTT.c **** 
1500:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1501:Core/Src/SEGGER_RTT.c **** *
1502:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
1503:Core/Src/SEGGER_RTT.c **** *
1504:Core/Src/SEGGER_RTT.c **** *  Function description
1505:Core/Src/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1506:Core/Src/SEGGER_RTT.c **** *
1507:Core/Src/SEGGER_RTT.c **** *  Return value:
1508:Core/Src/SEGGER_RTT.c **** *  ==0:  No data
1509:Core/Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1510:Core/Src/SEGGER_RTT.c **** *
1511:Core/Src/SEGGER_RTT.c **** */
1512:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 2542              		.loc 1 1512 51
 2543              		.cfi_startproc
 2544              		@ args = 0, pretend = 0, frame = 16
 2545              		@ frame_needed = 1, uses_anonymous_args = 0
 2546              		@ link register save eliminated.
 2547 0000 80B4     		push	{r7}
 2548              	.LCFI108:
 2549              		.cfi_def_cfa_offset 4
 2550              		.cfi_offset 7, -4
 2551 0002 85B0     		sub	sp, sp, #20
 2552              	.LCFI109:
 2553              		.cfi_def_cfa_offset 24
 2554 0004 00AF     		add	r7, sp, #0
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 72


 2555              	.LCFI110:
 2556              		.cfi_def_cfa_register 7
 2557 0006 7860     		str	r0, [r7, #4]
1513:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
1514:Core/Src/SEGGER_RTT.c ****   unsigned                v;
1515:Core/Src/SEGGER_RTT.c **** 
1516:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 2558              		.loc 1 1516 9
 2559 0008 7A68     		ldr	r2, [r7, #4]
 2560 000a 1346     		mov	r3, r2
 2561 000c 5B00     		lsls	r3, r3, #1
 2562 000e 1344     		add	r3, r3, r2
 2563 0010 DB00     		lsls	r3, r3, #3
 2564 0012 6033     		adds	r3, r3, #96
 2565 0014 074A     		ldr	r2, .L130
 2566 0016 1344     		add	r3, r3, r2
 2567 0018 FB60     		str	r3, [r7, #12]
1517:Core/Src/SEGGER_RTT.c ****   v = pRing->WrOff;
 2568              		.loc 1 1517 5
 2569 001a FB68     		ldr	r3, [r7, #12]
 2570 001c DB68     		ldr	r3, [r3, #12]
 2571 001e BB60     		str	r3, [r7, #8]
1518:Core/Src/SEGGER_RTT.c ****   return v - pRing->RdOff;
 2572              		.loc 1 1518 19
 2573 0020 FB68     		ldr	r3, [r7, #12]
 2574 0022 1B69     		ldr	r3, [r3, #16]
 2575              		.loc 1 1518 12
 2576 0024 BA68     		ldr	r2, [r7, #8]
 2577 0026 D31A     		subs	r3, r2, r3
1519:Core/Src/SEGGER_RTT.c **** }
 2578              		.loc 1 1519 1
 2579 0028 1846     		mov	r0, r3
 2580 002a 1437     		adds	r7, r7, #20
 2581              	.LCFI111:
 2582              		.cfi_def_cfa_offset 4
 2583 002c BD46     		mov	sp, r7
 2584              	.LCFI112:
 2585              		.cfi_def_cfa_register 13
 2586              		@ sp needed
 2587 002e 5DF8047B 		ldr	r7, [sp], #4
 2588              	.LCFI113:
 2589              		.cfi_restore 7
 2590              		.cfi_def_cfa_offset 0
 2591 0032 7047     		bx	lr
 2592              	.L131:
 2593              		.align	2
 2594              	.L130:
 2595 0034 00000000 		.word	_SEGGER_RTT
 2596              		.cfi_endproc
 2597              	.LFE21:
 2599              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 2600              		.align	1
 2601              		.global	SEGGER_RTT_HasDataUp
 2602              		.syntax unified
 2603              		.thumb
 2604              		.thumb_func
 2606              	SEGGER_RTT_HasDataUp:
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 73


 2607              	.LFB22:
1520:Core/Src/SEGGER_RTT.c **** 
1521:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1522:Core/Src/SEGGER_RTT.c **** *
1523:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1524:Core/Src/SEGGER_RTT.c **** *
1525:Core/Src/SEGGER_RTT.c **** *  Function description
1526:Core/Src/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1527:Core/Src/SEGGER_RTT.c **** *
1528:Core/Src/SEGGER_RTT.c **** *  Return value:
1529:Core/Src/SEGGER_RTT.c **** *  ==0:  No data
1530:Core/Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1531:Core/Src/SEGGER_RTT.c **** *
1532:Core/Src/SEGGER_RTT.c **** */
1533:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 2608              		.loc 1 1533 53
 2609              		.cfi_startproc
 2610              		@ args = 0, pretend = 0, frame = 16
 2611              		@ frame_needed = 1, uses_anonymous_args = 0
 2612              		@ link register save eliminated.
 2613 0000 80B4     		push	{r7}
 2614              	.LCFI114:
 2615              		.cfi_def_cfa_offset 4
 2616              		.cfi_offset 7, -4
 2617 0002 85B0     		sub	sp, sp, #20
 2618              	.LCFI115:
 2619              		.cfi_def_cfa_offset 24
 2620 0004 00AF     		add	r7, sp, #0
 2621              	.LCFI116:
 2622              		.cfi_def_cfa_register 7
 2623 0006 7860     		str	r0, [r7, #4]
1534:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1535:Core/Src/SEGGER_RTT.c ****   unsigned                v;
1536:Core/Src/SEGGER_RTT.c **** 
1537:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2624              		.loc 1 1537 9
 2625 0008 7B68     		ldr	r3, [r7, #4]
 2626 000a 5A1C     		adds	r2, r3, #1
 2627 000c 1346     		mov	r3, r2
 2628 000e 5B00     		lsls	r3, r3, #1
 2629 0010 1344     		add	r3, r3, r2
 2630 0012 DB00     		lsls	r3, r3, #3
 2631 0014 074A     		ldr	r2, .L134
 2632 0016 1344     		add	r3, r3, r2
 2633 0018 FB60     		str	r3, [r7, #12]
1538:Core/Src/SEGGER_RTT.c ****   v = pRing->RdOff;
 2634              		.loc 1 1538 5
 2635 001a FB68     		ldr	r3, [r7, #12]
 2636 001c 1B69     		ldr	r3, [r3, #16]
 2637 001e BB60     		str	r3, [r7, #8]
1539:Core/Src/SEGGER_RTT.c ****   return pRing->WrOff - v;
 2638              		.loc 1 1539 15
 2639 0020 FB68     		ldr	r3, [r7, #12]
 2640 0022 DA68     		ldr	r2, [r3, #12]
 2641              		.loc 1 1539 23
 2642 0024 BB68     		ldr	r3, [r7, #8]
 2643 0026 D31A     		subs	r3, r2, r3
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 74


1540:Core/Src/SEGGER_RTT.c **** }
 2644              		.loc 1 1540 1
 2645 0028 1846     		mov	r0, r3
 2646 002a 1437     		adds	r7, r7, #20
 2647              	.LCFI117:
 2648              		.cfi_def_cfa_offset 4
 2649 002c BD46     		mov	sp, r7
 2650              	.LCFI118:
 2651              		.cfi_def_cfa_register 13
 2652              		@ sp needed
 2653 002e 5DF8047B 		ldr	r7, [sp], #4
 2654              	.LCFI119:
 2655              		.cfi_restore 7
 2656              		.cfi_def_cfa_offset 0
 2657 0032 7047     		bx	lr
 2658              	.L135:
 2659              		.align	2
 2660              	.L134:
 2661 0034 00000000 		.word	_SEGGER_RTT
 2662              		.cfi_endproc
 2663              	.LFE22:
 2665              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 2666              		.align	1
 2667              		.global	SEGGER_RTT_AllocDownBuffer
 2668              		.syntax unified
 2669              		.thumb
 2670              		.thumb_func
 2672              	SEGGER_RTT_AllocDownBuffer:
 2673              	.LFB23:
1541:Core/Src/SEGGER_RTT.c **** 
1542:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1543:Core/Src/SEGGER_RTT.c **** *
1544:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
1545:Core/Src/SEGGER_RTT.c **** *
1546:Core/Src/SEGGER_RTT.c **** *  Function description
1547:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1548:Core/Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1549:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1550:Core/Src/SEGGER_RTT.c **** *
1551:Core/Src/SEGGER_RTT.c **** *  Parameters
1552:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1553:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1554:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1555:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1556:Core/Src/SEGGER_RTT.c **** *
1557:Core/Src/SEGGER_RTT.c **** *  Return value
1558:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1559:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
1560:Core/Src/SEGGER_RTT.c **** */
1561:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 2674              		.loc 1 1561 103
 2675              		.cfi_startproc
 2676              		@ args = 0, pretend = 0, frame = 32
 2677              		@ frame_needed = 1, uses_anonymous_args = 0
 2678 0000 80B5     		push	{r7, lr}
 2679              	.LCFI120:
 2680              		.cfi_def_cfa_offset 8
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 75


 2681              		.cfi_offset 7, -8
 2682              		.cfi_offset 14, -4
 2683 0002 88B0     		sub	sp, sp, #32
 2684              	.LCFI121:
 2685              		.cfi_def_cfa_offset 40
 2686 0004 00AF     		add	r7, sp, #0
 2687              	.LCFI122:
 2688              		.cfi_def_cfa_register 7
 2689 0006 F860     		str	r0, [r7, #12]
 2690 0008 B960     		str	r1, [r7, #8]
 2691 000a 7A60     		str	r2, [r7, #4]
 2692 000c 3B60     		str	r3, [r7]
 2693              	.LBB15:
1562:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
1563:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1564:Core/Src/SEGGER_RTT.c **** 
1565:Core/Src/SEGGER_RTT.c ****   INIT();
 2694              		.loc 1 1565 3
 2695 000e 3C4B     		ldr	r3, .L145
 2696 0010 BB61     		str	r3, [r7, #24]
 2697 0012 BB69     		ldr	r3, [r7, #24]
 2698 0014 1B78     		ldrb	r3, [r3]
 2699 0016 DBB2     		uxtb	r3, r3
 2700 0018 002B     		cmp	r3, #0
 2701 001a 01D1     		bne	.L137
 2702              		.loc 1 1565 3 is_stmt 0 discriminator 1
 2703 001c FFF7FEFF 		bl	_DoInit
 2704              	.L137:
 2705              	.LBE15:
 2706              	.LBB16:
1566:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2707              		.loc 1 1566 3 is_stmt 1
 2708              		.syntax unified
 2709              	@ 1566 "Core/Src/SEGGER_RTT.c" 1
 2710 0020 EFF31183 		mrs   r3, basepri  
 2711 0024 4FF02001 		mov   r1, #32       
 2712 0028 81F31188 		msr   basepri, r1  
 2713              		
 2714              	@ 0 "" 2
 2715              		.thumb
 2716              		.syntax unified
 2717 002c 7B61     		str	r3, [r7, #20]
1567:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2718              		.loc 1 1567 10
 2719 002e 344B     		ldr	r3, .L145
 2720 0030 3B61     		str	r3, [r7, #16]
1568:Core/Src/SEGGER_RTT.c ****   BufferIndex = 0;
 2721              		.loc 1 1568 15
 2722 0032 0023     		movs	r3, #0
 2723 0034 FB61     		str	r3, [r7, #28]
 2724              	.L140:
1569:Core/Src/SEGGER_RTT.c ****   do {
1570:Core/Src/SEGGER_RTT.c ****     if (pRTTCB->aDown[BufferIndex].pBuffer == NULL) {
 2725              		.loc 1 1570 35
 2726 0036 3969     		ldr	r1, [r7, #16]
 2727 0038 FA69     		ldr	r2, [r7, #28]
 2728 003a 1346     		mov	r3, r2
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 76


 2729 003c 5B00     		lsls	r3, r3, #1
 2730 003e 1344     		add	r3, r3, r2
 2731 0040 DB00     		lsls	r3, r3, #3
 2732 0042 0B44     		add	r3, r3, r1
 2733 0044 6433     		adds	r3, r3, #100
 2734 0046 1B68     		ldr	r3, [r3]
 2735              		.loc 1 1570 8
 2736 0048 002B     		cmp	r3, #0
 2737 004a 08D0     		beq	.L144
1571:Core/Src/SEGGER_RTT.c ****       break;
1572:Core/Src/SEGGER_RTT.c ****     }
1573:Core/Src/SEGGER_RTT.c ****     BufferIndex++;
 2738              		.loc 1 1573 16
 2739 004c FB69     		ldr	r3, [r7, #28]
 2740 004e 0133     		adds	r3, r3, #1
 2741 0050 FB61     		str	r3, [r7, #28]
1574:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
 2742              		.loc 1 1574 32
 2743 0052 3B69     		ldr	r3, [r7, #16]
 2744 0054 5B69     		ldr	r3, [r3, #20]
 2745              		.loc 1 1574 24
 2746 0056 FA69     		ldr	r2, [r7, #28]
 2747 0058 9A42     		cmp	r2, r3
 2748 005a ECDB     		blt	.L140
 2749 005c 00E0     		b	.L139
 2750              	.L144:
1571:Core/Src/SEGGER_RTT.c ****       break;
 2751              		.loc 1 1571 7
 2752 005e 00BF     		nop
 2753              	.L139:
1575:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumDownBuffers) {
 2754              		.loc 1 1575 27
 2755 0060 3B69     		ldr	r3, [r7, #16]
 2756 0062 5B69     		ldr	r3, [r3, #20]
 2757              		.loc 1 1575 6
 2758 0064 FA69     		ldr	r2, [r7, #28]
 2759 0066 9A42     		cmp	r2, r3
 2760 0068 3EDA     		bge	.L141
1576:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].sName        = sName;
 2761              		.loc 1 1576 45
 2762 006a 3969     		ldr	r1, [r7, #16]
 2763 006c FA69     		ldr	r2, [r7, #28]
 2764 006e 1346     		mov	r3, r2
 2765 0070 5B00     		lsls	r3, r3, #1
 2766 0072 1344     		add	r3, r3, r2
 2767 0074 DB00     		lsls	r3, r3, #3
 2768 0076 0B44     		add	r3, r3, r1
 2769 0078 6033     		adds	r3, r3, #96
 2770 007a FA68     		ldr	r2, [r7, #12]
 2771 007c 1A60     		str	r2, [r3]
1577:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2772              		.loc 1 1577 45
 2773 007e 3969     		ldr	r1, [r7, #16]
 2774 0080 FA69     		ldr	r2, [r7, #28]
 2775 0082 1346     		mov	r3, r2
 2776 0084 5B00     		lsls	r3, r3, #1
 2777 0086 1344     		add	r3, r3, r2
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 77


 2778 0088 DB00     		lsls	r3, r3, #3
 2779 008a 0B44     		add	r3, r3, r1
 2780 008c 6433     		adds	r3, r3, #100
 2781 008e BA68     		ldr	r2, [r7, #8]
 2782 0090 1A60     		str	r2, [r3]
1578:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2783              		.loc 1 1578 45
 2784 0092 3969     		ldr	r1, [r7, #16]
 2785 0094 FA69     		ldr	r2, [r7, #28]
 2786 0096 1346     		mov	r3, r2
 2787 0098 5B00     		lsls	r3, r3, #1
 2788 009a 1344     		add	r3, r3, r2
 2789 009c DB00     		lsls	r3, r3, #3
 2790 009e 0B44     		add	r3, r3, r1
 2791 00a0 6833     		adds	r3, r3, #104
 2792 00a2 7A68     		ldr	r2, [r7, #4]
 2793 00a4 1A60     		str	r2, [r3]
1579:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2794              		.loc 1 1579 45
 2795 00a6 3969     		ldr	r1, [r7, #16]
 2796 00a8 FA69     		ldr	r2, [r7, #28]
 2797 00aa 1346     		mov	r3, r2
 2798 00ac 5B00     		lsls	r3, r3, #1
 2799 00ae 1344     		add	r3, r3, r2
 2800 00b0 DB00     		lsls	r3, r3, #3
 2801 00b2 0B44     		add	r3, r3, r1
 2802 00b4 7033     		adds	r3, r3, #112
 2803 00b6 0022     		movs	r2, #0
 2804 00b8 1A60     		str	r2, [r3]
1580:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 2805              		.loc 1 1580 45
 2806 00ba 3969     		ldr	r1, [r7, #16]
 2807 00bc FA69     		ldr	r2, [r7, #28]
 2808 00be 1346     		mov	r3, r2
 2809 00c0 5B00     		lsls	r3, r3, #1
 2810 00c2 1344     		add	r3, r3, r2
 2811 00c4 DB00     		lsls	r3, r3, #3
 2812 00c6 0B44     		add	r3, r3, r1
 2813 00c8 6C33     		adds	r3, r3, #108
 2814 00ca 0022     		movs	r2, #0
 2815 00cc 1A60     		str	r2, [r3]
1581:Core/Src/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].Flags        = Flags;
 2816              		.loc 1 1581 45
 2817 00ce 3969     		ldr	r1, [r7, #16]
 2818 00d0 FA69     		ldr	r2, [r7, #28]
 2819 00d2 1346     		mov	r3, r2
 2820 00d4 5B00     		lsls	r3, r3, #1
 2821 00d6 1344     		add	r3, r3, r2
 2822 00d8 DB00     		lsls	r3, r3, #3
 2823 00da 0B44     		add	r3, r3, r1
 2824 00dc 7433     		adds	r3, r3, #116
 2825 00de 3A68     		ldr	r2, [r7]
 2826 00e0 1A60     		str	r2, [r3]
1582:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2827              		.loc 1 1582 5
 2828              		.syntax unified
 2829              	@ 1582 "Core/Src/SEGGER_RTT.c" 1
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 78


 2830 00e2 BFF35F8F 		dmb
 2831              	
 2832              	@ 0 "" 2
 2833              		.thumb
 2834              		.syntax unified
 2835 00e6 02E0     		b	.L142
 2836              	.L141:
1583:Core/Src/SEGGER_RTT.c ****   } else {
1584:Core/Src/SEGGER_RTT.c ****     BufferIndex = -1;
 2837              		.loc 1 1584 17
 2838 00e8 4FF0FF33 		mov	r3, #-1
 2839 00ec FB61     		str	r3, [r7, #28]
 2840              	.L142:
1585:Core/Src/SEGGER_RTT.c ****   }
1586:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2841              		.loc 1 1586 3
 2842 00ee 7B69     		ldr	r3, [r7, #20]
 2843              		.syntax unified
 2844              	@ 1586 "Core/Src/SEGGER_RTT.c" 1
 2845 00f0 83F31188 		msr   basepri, r3  
 2846              		
 2847              	@ 0 "" 2
 2848              		.thumb
 2849              		.syntax unified
 2850              	.LBE16:
1587:Core/Src/SEGGER_RTT.c ****   return BufferIndex;
 2851              		.loc 1 1587 10
 2852 00f4 FB69     		ldr	r3, [r7, #28]
1588:Core/Src/SEGGER_RTT.c **** }
 2853              		.loc 1 1588 1
 2854 00f6 1846     		mov	r0, r3
 2855 00f8 2037     		adds	r7, r7, #32
 2856              	.LCFI123:
 2857              		.cfi_def_cfa_offset 8
 2858 00fa BD46     		mov	sp, r7
 2859              	.LCFI124:
 2860              		.cfi_def_cfa_register 13
 2861              		@ sp needed
 2862 00fc 80BD     		pop	{r7, pc}
 2863              	.L146:
 2864 00fe 00BF     		.align	2
 2865              	.L145:
 2866 0100 00000000 		.word	_SEGGER_RTT
 2867              		.cfi_endproc
 2868              	.LFE23:
 2870              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2871              		.align	1
 2872              		.global	SEGGER_RTT_AllocUpBuffer
 2873              		.syntax unified
 2874              		.thumb
 2875              		.thumb_func
 2877              	SEGGER_RTT_AllocUpBuffer:
 2878              	.LFB24:
1589:Core/Src/SEGGER_RTT.c **** 
1590:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1591:Core/Src/SEGGER_RTT.c **** *
1592:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 79


1593:Core/Src/SEGGER_RTT.c **** *
1594:Core/Src/SEGGER_RTT.c **** *  Function description
1595:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1596:Core/Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1597:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1598:Core/Src/SEGGER_RTT.c **** *
1599:Core/Src/SEGGER_RTT.c **** *  Parameters
1600:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1601:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1602:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1603:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1604:Core/Src/SEGGER_RTT.c **** *
1605:Core/Src/SEGGER_RTT.c **** *  Return value
1606:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1607:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
1608:Core/Src/SEGGER_RTT.c **** */
1609:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 2879              		.loc 1 1609 101
 2880              		.cfi_startproc
 2881              		@ args = 0, pretend = 0, frame = 32
 2882              		@ frame_needed = 1, uses_anonymous_args = 0
 2883 0000 80B5     		push	{r7, lr}
 2884              	.LCFI125:
 2885              		.cfi_def_cfa_offset 8
 2886              		.cfi_offset 7, -8
 2887              		.cfi_offset 14, -4
 2888 0002 88B0     		sub	sp, sp, #32
 2889              	.LCFI126:
 2890              		.cfi_def_cfa_offset 40
 2891 0004 00AF     		add	r7, sp, #0
 2892              	.LCFI127:
 2893              		.cfi_def_cfa_register 7
 2894 0006 F860     		str	r0, [r7, #12]
 2895 0008 B960     		str	r1, [r7, #8]
 2896 000a 7A60     		str	r2, [r7, #4]
 2897 000c 3B60     		str	r3, [r7]
 2898              	.LBB17:
1610:Core/Src/SEGGER_RTT.c ****   int BufferIndex;
1611:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1612:Core/Src/SEGGER_RTT.c **** 
1613:Core/Src/SEGGER_RTT.c ****   INIT();
 2899              		.loc 1 1613 3
 2900 000e 3D4B     		ldr	r3, .L156
 2901 0010 BB61     		str	r3, [r7, #24]
 2902 0012 BB69     		ldr	r3, [r7, #24]
 2903 0014 1B78     		ldrb	r3, [r3]
 2904 0016 DBB2     		uxtb	r3, r3
 2905 0018 002B     		cmp	r3, #0
 2906 001a 01D1     		bne	.L148
 2907              		.loc 1 1613 3 is_stmt 0 discriminator 1
 2908 001c FFF7FEFF 		bl	_DoInit
 2909              	.L148:
 2910              	.LBE17:
 2911              	.LBB18:
1614:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2912              		.loc 1 1614 3 is_stmt 1
 2913              		.syntax unified
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 80


 2914              	@ 1614 "Core/Src/SEGGER_RTT.c" 1
 2915 0020 EFF31183 		mrs   r3, basepri  
 2916 0024 4FF02001 		mov   r1, #32       
 2917 0028 81F31188 		msr   basepri, r1  
 2918              		
 2919              	@ 0 "" 2
 2920              		.thumb
 2921              		.syntax unified
 2922 002c 7B61     		str	r3, [r7, #20]
1615:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2923              		.loc 1 1615 10
 2924 002e 354B     		ldr	r3, .L156
 2925 0030 3B61     		str	r3, [r7, #16]
1616:Core/Src/SEGGER_RTT.c ****   BufferIndex = 0;
 2926              		.loc 1 1616 15
 2927 0032 0023     		movs	r3, #0
 2928 0034 FB61     		str	r3, [r7, #28]
 2929              	.L151:
1617:Core/Src/SEGGER_RTT.c ****   do {
1618:Core/Src/SEGGER_RTT.c ****     if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 2930              		.loc 1 1618 33
 2931 0036 3969     		ldr	r1, [r7, #16]
 2932 0038 FB69     		ldr	r3, [r7, #28]
 2933 003a 5A1C     		adds	r2, r3, #1
 2934 003c 1346     		mov	r3, r2
 2935 003e 5B00     		lsls	r3, r3, #1
 2936 0040 1344     		add	r3, r3, r2
 2937 0042 DB00     		lsls	r3, r3, #3
 2938 0044 0B44     		add	r3, r3, r1
 2939 0046 0433     		adds	r3, r3, #4
 2940 0048 1B68     		ldr	r3, [r3]
 2941              		.loc 1 1618 8
 2942 004a 002B     		cmp	r3, #0
 2943 004c 08D0     		beq	.L155
1619:Core/Src/SEGGER_RTT.c ****       break;
1620:Core/Src/SEGGER_RTT.c ****     }
1621:Core/Src/SEGGER_RTT.c ****     BufferIndex++;
 2944              		.loc 1 1621 16
 2945 004e FB69     		ldr	r3, [r7, #28]
 2946 0050 0133     		adds	r3, r3, #1
 2947 0052 FB61     		str	r3, [r7, #28]
1622:Core/Src/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 2948              		.loc 1 1622 32
 2949 0054 3B69     		ldr	r3, [r7, #16]
 2950 0056 1B69     		ldr	r3, [r3, #16]
 2951              		.loc 1 1622 24
 2952 0058 FA69     		ldr	r2, [r7, #28]
 2953 005a 9A42     		cmp	r2, r3
 2954 005c EBDB     		blt	.L151
 2955 005e 00E0     		b	.L150
 2956              	.L155:
1619:Core/Src/SEGGER_RTT.c ****       break;
 2957              		.loc 1 1619 7
 2958 0060 00BF     		nop
 2959              	.L150:
1623:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 2960              		.loc 1 1623 27
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 81


 2961 0062 3B69     		ldr	r3, [r7, #16]
 2962 0064 1B69     		ldr	r3, [r3, #16]
 2963              		.loc 1 1623 6
 2964 0066 FA69     		ldr	r2, [r7, #28]
 2965 0068 9A42     		cmp	r2, r3
 2966 006a 3FDA     		bge	.L152
1624:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].sName        = sName;
 2967              		.loc 1 1624 43
 2968 006c 3969     		ldr	r1, [r7, #16]
 2969 006e FB69     		ldr	r3, [r7, #28]
 2970 0070 5A1C     		adds	r2, r3, #1
 2971 0072 1346     		mov	r3, r2
 2972 0074 5B00     		lsls	r3, r3, #1
 2973 0076 1344     		add	r3, r3, r2
 2974 0078 DB00     		lsls	r3, r3, #3
 2975 007a 0B44     		add	r3, r3, r1
 2976 007c FA68     		ldr	r2, [r7, #12]
 2977 007e 1A60     		str	r2, [r3]
1625:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2978              		.loc 1 1625 43
 2979 0080 3969     		ldr	r1, [r7, #16]
 2980 0082 FB69     		ldr	r3, [r7, #28]
 2981 0084 5A1C     		adds	r2, r3, #1
 2982 0086 1346     		mov	r3, r2
 2983 0088 5B00     		lsls	r3, r3, #1
 2984 008a 1344     		add	r3, r3, r2
 2985 008c DB00     		lsls	r3, r3, #3
 2986 008e 0B44     		add	r3, r3, r1
 2987 0090 0433     		adds	r3, r3, #4
 2988 0092 BA68     		ldr	r2, [r7, #8]
 2989 0094 1A60     		str	r2, [r3]
1626:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2990              		.loc 1 1626 43
 2991 0096 3969     		ldr	r1, [r7, #16]
 2992 0098 FA69     		ldr	r2, [r7, #28]
 2993 009a 1346     		mov	r3, r2
 2994 009c 5B00     		lsls	r3, r3, #1
 2995 009e 1344     		add	r3, r3, r2
 2996 00a0 DB00     		lsls	r3, r3, #3
 2997 00a2 0B44     		add	r3, r3, r1
 2998 00a4 2033     		adds	r3, r3, #32
 2999 00a6 7A68     		ldr	r2, [r7, #4]
 3000 00a8 1A60     		str	r2, [r3]
1627:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 3001              		.loc 1 1627 43
 3002 00aa 3969     		ldr	r1, [r7, #16]
 3003 00ac FA69     		ldr	r2, [r7, #28]
 3004 00ae 1346     		mov	r3, r2
 3005 00b0 5B00     		lsls	r3, r3, #1
 3006 00b2 1344     		add	r3, r3, r2
 3007 00b4 DB00     		lsls	r3, r3, #3
 3008 00b6 0B44     		add	r3, r3, r1
 3009 00b8 2833     		adds	r3, r3, #40
 3010 00ba 0022     		movs	r2, #0
 3011 00bc 1A60     		str	r2, [r3]
1628:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 3012              		.loc 1 1628 43
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 82


 3013 00be 3969     		ldr	r1, [r7, #16]
 3014 00c0 FA69     		ldr	r2, [r7, #28]
 3015 00c2 1346     		mov	r3, r2
 3016 00c4 5B00     		lsls	r3, r3, #1
 3017 00c6 1344     		add	r3, r3, r2
 3018 00c8 DB00     		lsls	r3, r3, #3
 3019 00ca 0B44     		add	r3, r3, r1
 3020 00cc 2433     		adds	r3, r3, #36
 3021 00ce 0022     		movs	r2, #0
 3022 00d0 1A60     		str	r2, [r3]
1629:Core/Src/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].Flags        = Flags;
 3023              		.loc 1 1629 43
 3024 00d2 3969     		ldr	r1, [r7, #16]
 3025 00d4 FA69     		ldr	r2, [r7, #28]
 3026 00d6 1346     		mov	r3, r2
 3027 00d8 5B00     		lsls	r3, r3, #1
 3028 00da 1344     		add	r3, r3, r2
 3029 00dc DB00     		lsls	r3, r3, #3
 3030 00de 0B44     		add	r3, r3, r1
 3031 00e0 2C33     		adds	r3, r3, #44
 3032 00e2 3A68     		ldr	r2, [r7]
 3033 00e4 1A60     		str	r2, [r3]
1630:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 3034              		.loc 1 1630 5
 3035              		.syntax unified
 3036              	@ 1630 "Core/Src/SEGGER_RTT.c" 1
 3037 00e6 BFF35F8F 		dmb
 3038              	
 3039              	@ 0 "" 2
 3040              		.thumb
 3041              		.syntax unified
 3042 00ea 02E0     		b	.L153
 3043              	.L152:
1631:Core/Src/SEGGER_RTT.c ****   } else {
1632:Core/Src/SEGGER_RTT.c ****     BufferIndex = -1;
 3044              		.loc 1 1632 17
 3045 00ec 4FF0FF33 		mov	r3, #-1
 3046 00f0 FB61     		str	r3, [r7, #28]
 3047              	.L153:
1633:Core/Src/SEGGER_RTT.c ****   }
1634:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 3048              		.loc 1 1634 3
 3049 00f2 7B69     		ldr	r3, [r7, #20]
 3050              		.syntax unified
 3051              	@ 1634 "Core/Src/SEGGER_RTT.c" 1
 3052 00f4 83F31188 		msr   basepri, r3  
 3053              		
 3054              	@ 0 "" 2
 3055              		.thumb
 3056              		.syntax unified
 3057              	.LBE18:
1635:Core/Src/SEGGER_RTT.c ****   return BufferIndex;
 3058              		.loc 1 1635 10
 3059 00f8 FB69     		ldr	r3, [r7, #28]
1636:Core/Src/SEGGER_RTT.c **** }
 3060              		.loc 1 1636 1
 3061 00fa 1846     		mov	r0, r3
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 83


 3062 00fc 2037     		adds	r7, r7, #32
 3063              	.LCFI128:
 3064              		.cfi_def_cfa_offset 8
 3065 00fe BD46     		mov	sp, r7
 3066              	.LCFI129:
 3067              		.cfi_def_cfa_register 13
 3068              		@ sp needed
 3069 0100 80BD     		pop	{r7, pc}
 3070              	.L157:
 3071 0102 00BF     		.align	2
 3072              	.L156:
 3073 0104 00000000 		.word	_SEGGER_RTT
 3074              		.cfi_endproc
 3075              	.LFE24:
 3077              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 3078              		.align	1
 3079              		.global	SEGGER_RTT_ConfigUpBuffer
 3080              		.syntax unified
 3081              		.thumb
 3082              		.thumb_func
 3084              	SEGGER_RTT_ConfigUpBuffer:
 3085              	.LFB25:
1637:Core/Src/SEGGER_RTT.c **** 
1638:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1639:Core/Src/SEGGER_RTT.c **** *
1640:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1641:Core/Src/SEGGER_RTT.c **** *
1642:Core/Src/SEGGER_RTT.c **** *  Function description
1643:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1644:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1645:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1646:Core/Src/SEGGER_RTT.c **** *
1647:Core/Src/SEGGER_RTT.c **** *  Parameters
1648:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1649:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1650:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1651:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1652:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1653:Core/Src/SEGGER_RTT.c **** *
1654:Core/Src/SEGGER_RTT.c **** *  Return value
1655:Core/Src/SEGGER_RTT.c **** *    >= 0 - O.K.
1656:Core/Src/SEGGER_RTT.c **** *     < 0 - Error
1657:Core/Src/SEGGER_RTT.c **** *
1658:Core/Src/SEGGER_RTT.c **** *  Additional information
1659:Core/Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1660:Core/Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1661:Core/Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1662:Core/Src/SEGGER_RTT.c **** */
1663:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 3086              		.loc 1 1663 124
 3087              		.cfi_startproc
 3088              		@ args = 4, pretend = 0, frame = 40
 3089              		@ frame_needed = 1, uses_anonymous_args = 0
 3090 0000 80B5     		push	{r7, lr}
 3091              	.LCFI130:
 3092              		.cfi_def_cfa_offset 8
 3093              		.cfi_offset 7, -8
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 84


 3094              		.cfi_offset 14, -4
 3095 0002 8AB0     		sub	sp, sp, #40
 3096              	.LCFI131:
 3097              		.cfi_def_cfa_offset 48
 3098 0004 00AF     		add	r7, sp, #0
 3099              	.LCFI132:
 3100              		.cfi_def_cfa_register 7
 3101 0006 F860     		str	r0, [r7, #12]
 3102 0008 B960     		str	r1, [r7, #8]
 3103 000a 7A60     		str	r2, [r7, #4]
 3104 000c 3B60     		str	r3, [r7]
 3105              	.LBB19:
1664:Core/Src/SEGGER_RTT.c ****   int r;
1665:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1666:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
1667:Core/Src/SEGGER_RTT.c **** 
1668:Core/Src/SEGGER_RTT.c ****   INIT();
 3106              		.loc 1 1668 3
 3107 000e 204B     		ldr	r3, .L164
 3108 0010 3B62     		str	r3, [r7, #32]
 3109 0012 3B6A     		ldr	r3, [r7, #32]
 3110 0014 1B78     		ldrb	r3, [r3]
 3111 0016 DBB2     		uxtb	r3, r3
 3112 0018 002B     		cmp	r3, #0
 3113 001a 01D1     		bne	.L159
 3114              		.loc 1 1668 3 is_stmt 0 discriminator 1
 3115 001c FFF7FEFF 		bl	_DoInit
 3116              	.L159:
 3117              	.LBE19:
1669:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3118              		.loc 1 1669 10 is_stmt 1
 3119 0020 1B4B     		ldr	r3, .L164
 3120 0022 FB61     		str	r3, [r7, #28]
1670:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3121              		.loc 1 1670 6
 3122 0024 FB68     		ldr	r3, [r7, #12]
 3123 0026 022B     		cmp	r3, #2
 3124 0028 2AD8     		bhi	.L160
 3125              	.LBB20:
1671:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3126              		.loc 1 1671 5
 3127              		.syntax unified
 3128              	@ 1671 "Core/Src/SEGGER_RTT.c" 1
 3129 002a EFF31183 		mrs   r3, basepri  
 3130 002e 4FF02001 		mov   r1, #32       
 3131 0032 81F31188 		msr   basepri, r1  
 3132              		
 3133              	@ 0 "" 2
 3134              		.thumb
 3135              		.syntax unified
 3136 0036 BB61     		str	r3, [r7, #24]
1672:Core/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3137              		.loc 1 1672 9
 3138 0038 FB68     		ldr	r3, [r7, #12]
 3139 003a 5A1C     		adds	r2, r3, #1
 3140 003c 1346     		mov	r3, r2
 3141 003e 5B00     		lsls	r3, r3, #1
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 85


 3142 0040 1344     		add	r3, r3, r2
 3143 0042 DB00     		lsls	r3, r3, #3
 3144 0044 FA69     		ldr	r2, [r7, #28]
 3145 0046 1344     		add	r3, r3, r2
 3146 0048 7B61     		str	r3, [r7, #20]
1673:Core/Src/SEGGER_RTT.c ****     if (BufferIndex) {
 3147              		.loc 1 1673 8
 3148 004a FB68     		ldr	r3, [r7, #12]
 3149 004c 002B     		cmp	r3, #0
 3150 004e 0ED0     		beq	.L161
1674:Core/Src/SEGGER_RTT.c ****       pUp->sName        = sName;
 3151              		.loc 1 1674 25
 3152 0050 7B69     		ldr	r3, [r7, #20]
 3153 0052 BA68     		ldr	r2, [r7, #8]
 3154 0054 1A60     		str	r2, [r3]
1675:Core/Src/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
 3155              		.loc 1 1675 25
 3156 0056 7B69     		ldr	r3, [r7, #20]
 3157 0058 7A68     		ldr	r2, [r7, #4]
 3158 005a 5A60     		str	r2, [r3, #4]
1676:Core/Src/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
 3159              		.loc 1 1676 25
 3160 005c 7B69     		ldr	r3, [r7, #20]
 3161 005e 3A68     		ldr	r2, [r7]
 3162 0060 9A60     		str	r2, [r3, #8]
1677:Core/Src/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 3163              		.loc 1 1677 25
 3164 0062 7B69     		ldr	r3, [r7, #20]
 3165 0064 0022     		movs	r2, #0
 3166 0066 1A61     		str	r2, [r3, #16]
1678:Core/Src/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
 3167              		.loc 1 1678 25
 3168 0068 7B69     		ldr	r3, [r7, #20]
 3169 006a 0022     		movs	r2, #0
 3170 006c DA60     		str	r2, [r3, #12]
 3171              	.L161:
1679:Core/Src/SEGGER_RTT.c ****     }
1680:Core/Src/SEGGER_RTT.c ****     pUp->Flags          = Flags;
 3172              		.loc 1 1680 25
 3173 006e 7B69     		ldr	r3, [r7, #20]
 3174 0070 3A6B     		ldr	r2, [r7, #48]
 3175 0072 5A61     		str	r2, [r3, #20]
1681:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3176              		.loc 1 1681 5
 3177 0074 BB69     		ldr	r3, [r7, #24]
 3178              		.syntax unified
 3179              	@ 1681 "Core/Src/SEGGER_RTT.c" 1
 3180 0076 83F31188 		msr   basepri, r3  
 3181              		
 3182              	@ 0 "" 2
 3183              		.thumb
 3184              		.syntax unified
 3185              	.LBE20:
1682:Core/Src/SEGGER_RTT.c ****     r =  0;
 3186              		.loc 1 1682 7
 3187 007a 0023     		movs	r3, #0
 3188 007c 7B62     		str	r3, [r7, #36]
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 86


 3189 007e 02E0     		b	.L162
 3190              	.L160:
1683:Core/Src/SEGGER_RTT.c ****   } else {
1684:Core/Src/SEGGER_RTT.c ****     r = -1;
 3191              		.loc 1 1684 7
 3192 0080 4FF0FF33 		mov	r3, #-1
 3193 0084 7B62     		str	r3, [r7, #36]
 3194              	.L162:
1685:Core/Src/SEGGER_RTT.c ****   }
1686:Core/Src/SEGGER_RTT.c ****   return r;
 3195              		.loc 1 1686 10
 3196 0086 7B6A     		ldr	r3, [r7, #36]
1687:Core/Src/SEGGER_RTT.c **** }
 3197              		.loc 1 1687 1
 3198 0088 1846     		mov	r0, r3
 3199 008a 2837     		adds	r7, r7, #40
 3200              	.LCFI133:
 3201              		.cfi_def_cfa_offset 8
 3202 008c BD46     		mov	sp, r7
 3203              	.LCFI134:
 3204              		.cfi_def_cfa_register 13
 3205              		@ sp needed
 3206 008e 80BD     		pop	{r7, pc}
 3207              	.L165:
 3208              		.align	2
 3209              	.L164:
 3210 0090 00000000 		.word	_SEGGER_RTT
 3211              		.cfi_endproc
 3212              	.LFE25:
 3214              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 3215              		.align	1
 3216              		.global	SEGGER_RTT_ConfigDownBuffer
 3217              		.syntax unified
 3218              		.thumb
 3219              		.thumb_func
 3221              	SEGGER_RTT_ConfigDownBuffer:
 3222              	.LFB26:
1688:Core/Src/SEGGER_RTT.c **** 
1689:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1690:Core/Src/SEGGER_RTT.c **** *
1691:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1692:Core/Src/SEGGER_RTT.c **** *
1693:Core/Src/SEGGER_RTT.c **** *  Function description
1694:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1695:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1696:Core/Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1697:Core/Src/SEGGER_RTT.c **** *
1698:Core/Src/SEGGER_RTT.c **** *  Parameters
1699:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1700:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1701:Core/Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1702:Core/Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1703:Core/Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1704:Core/Src/SEGGER_RTT.c **** *
1705:Core/Src/SEGGER_RTT.c **** *  Return value
1706:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1707:Core/Src/SEGGER_RTT.c **** *     < 0  Error
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 87


1708:Core/Src/SEGGER_RTT.c **** *
1709:Core/Src/SEGGER_RTT.c **** *  Additional information
1710:Core/Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1711:Core/Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1712:Core/Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1713:Core/Src/SEGGER_RTT.c **** */
1714:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 3223              		.loc 1 1714 126
 3224              		.cfi_startproc
 3225              		@ args = 4, pretend = 0, frame = 40
 3226              		@ frame_needed = 1, uses_anonymous_args = 0
 3227 0000 80B5     		push	{r7, lr}
 3228              	.LCFI135:
 3229              		.cfi_def_cfa_offset 8
 3230              		.cfi_offset 7, -8
 3231              		.cfi_offset 14, -4
 3232 0002 8AB0     		sub	sp, sp, #40
 3233              	.LCFI136:
 3234              		.cfi_def_cfa_offset 48
 3235 0004 00AF     		add	r7, sp, #0
 3236              	.LCFI137:
 3237              		.cfi_def_cfa_register 7
 3238 0006 F860     		str	r0, [r7, #12]
 3239 0008 B960     		str	r1, [r7, #8]
 3240 000a 7A60     		str	r2, [r7, #4]
 3241 000c 3B60     		str	r3, [r7]
 3242              	.LBB21:
1715:Core/Src/SEGGER_RTT.c ****   int r;
1716:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1717:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
1718:Core/Src/SEGGER_RTT.c **** 
1719:Core/Src/SEGGER_RTT.c ****   INIT();
 3243              		.loc 1 1719 3
 3244 000e 214B     		ldr	r3, .L172
 3245 0010 3B62     		str	r3, [r7, #32]
 3246 0012 3B6A     		ldr	r3, [r7, #32]
 3247 0014 1B78     		ldrb	r3, [r3]
 3248 0016 DBB2     		uxtb	r3, r3
 3249 0018 002B     		cmp	r3, #0
 3250 001a 01D1     		bne	.L167
 3251              		.loc 1 1719 3 is_stmt 0 discriminator 1
 3252 001c FFF7FEFF 		bl	_DoInit
 3253              	.L167:
 3254              	.LBE21:
1720:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3255              		.loc 1 1720 10 is_stmt 1
 3256 0020 1C4B     		ldr	r3, .L172
 3257 0022 FB61     		str	r3, [r7, #28]
1721:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3258              		.loc 1 1721 6
 3259 0024 FB68     		ldr	r3, [r7, #12]
 3260 0026 022B     		cmp	r3, #2
 3261 0028 2CD8     		bhi	.L168
 3262              	.LBB22:
1722:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3263              		.loc 1 1722 5
 3264              		.syntax unified
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 88


 3265              	@ 1722 "Core/Src/SEGGER_RTT.c" 1
 3266 002a EFF31183 		mrs   r3, basepri  
 3267 002e 4FF02001 		mov   r1, #32       
 3268 0032 81F31188 		msr   basepri, r1  
 3269              		
 3270              	@ 0 "" 2
 3271              		.thumb
 3272              		.syntax unified
 3273 0036 BB61     		str	r3, [r7, #24]
1723:Core/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3274              		.loc 1 1723 11
 3275 0038 FA68     		ldr	r2, [r7, #12]
 3276 003a 1346     		mov	r3, r2
 3277 003c 5B00     		lsls	r3, r3, #1
 3278 003e 1344     		add	r3, r3, r2
 3279 0040 DB00     		lsls	r3, r3, #3
 3280 0042 6033     		adds	r3, r3, #96
 3281 0044 FA69     		ldr	r2, [r7, #28]
 3282 0046 1344     		add	r3, r3, r2
 3283 0048 7B61     		str	r3, [r7, #20]
1724:Core/Src/SEGGER_RTT.c ****     if (BufferIndex) {
 3284              		.loc 1 1724 8
 3285 004a FB68     		ldr	r3, [r7, #12]
 3286 004c 002B     		cmp	r3, #0
 3287 004e 0ED0     		beq	.L169
1725:Core/Src/SEGGER_RTT.c ****       pDown->sName        = sName;
 3288              		.loc 1 1725 27
 3289 0050 7B69     		ldr	r3, [r7, #20]
 3290 0052 BA68     		ldr	r2, [r7, #8]
 3291 0054 1A60     		str	r2, [r3]
1726:Core/Src/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 3292              		.loc 1 1726 27
 3293 0056 7B69     		ldr	r3, [r7, #20]
 3294 0058 7A68     		ldr	r2, [r7, #4]
 3295 005a 5A60     		str	r2, [r3, #4]
1727:Core/Src/SEGGER_RTT.c ****       pDown->SizeOfBuffer = BufferSize;
 3296              		.loc 1 1727 27
 3297 005c 7B69     		ldr	r3, [r7, #20]
 3298 005e 3A68     		ldr	r2, [r7]
 3299 0060 9A60     		str	r2, [r3, #8]
1728:Core/Src/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
 3300              		.loc 1 1728 27
 3301 0062 7B69     		ldr	r3, [r7, #20]
 3302 0064 0022     		movs	r2, #0
 3303 0066 1A61     		str	r2, [r3, #16]
1729:Core/Src/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
 3304              		.loc 1 1729 27
 3305 0068 7B69     		ldr	r3, [r7, #20]
 3306 006a 0022     		movs	r2, #0
 3307 006c DA60     		str	r2, [r3, #12]
 3308              	.L169:
1730:Core/Src/SEGGER_RTT.c ****     }
1731:Core/Src/SEGGER_RTT.c ****     pDown->Flags          = Flags;
 3309              		.loc 1 1731 27
 3310 006e 7B69     		ldr	r3, [r7, #20]
 3311 0070 3A6B     		ldr	r2, [r7, #48]
 3312 0072 5A61     		str	r2, [r3, #20]
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 89


1732:Core/Src/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 3313              		.loc 1 1732 5
 3314              		.syntax unified
 3315              	@ 1732 "Core/Src/SEGGER_RTT.c" 1
 3316 0074 BFF35F8F 		dmb
 3317              	
 3318              	@ 0 "" 2
1733:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3319              		.loc 1 1733 5
 3320              		.thumb
 3321              		.syntax unified
 3322 0078 BB69     		ldr	r3, [r7, #24]
 3323              		.syntax unified
 3324              	@ 1733 "Core/Src/SEGGER_RTT.c" 1
 3325 007a 83F31188 		msr   basepri, r3  
 3326              		
 3327              	@ 0 "" 2
 3328              		.thumb
 3329              		.syntax unified
 3330              	.LBE22:
1734:Core/Src/SEGGER_RTT.c ****     r =  0;
 3331              		.loc 1 1734 7
 3332 007e 0023     		movs	r3, #0
 3333 0080 7B62     		str	r3, [r7, #36]
 3334 0082 02E0     		b	.L170
 3335              	.L168:
1735:Core/Src/SEGGER_RTT.c ****   } else {
1736:Core/Src/SEGGER_RTT.c ****     r = -1;
 3336              		.loc 1 1736 7
 3337 0084 4FF0FF33 		mov	r3, #-1
 3338 0088 7B62     		str	r3, [r7, #36]
 3339              	.L170:
1737:Core/Src/SEGGER_RTT.c ****   }
1738:Core/Src/SEGGER_RTT.c ****   return r;
 3340              		.loc 1 1738 10
 3341 008a 7B6A     		ldr	r3, [r7, #36]
1739:Core/Src/SEGGER_RTT.c **** }
 3342              		.loc 1 1739 1
 3343 008c 1846     		mov	r0, r3
 3344 008e 2837     		adds	r7, r7, #40
 3345              	.LCFI138:
 3346              		.cfi_def_cfa_offset 8
 3347 0090 BD46     		mov	sp, r7
 3348              	.LCFI139:
 3349              		.cfi_def_cfa_register 13
 3350              		@ sp needed
 3351 0092 80BD     		pop	{r7, pc}
 3352              	.L173:
 3353              		.align	2
 3354              	.L172:
 3355 0094 00000000 		.word	_SEGGER_RTT
 3356              		.cfi_endproc
 3357              	.LFE26:
 3359              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 3360              		.align	1
 3361              		.global	SEGGER_RTT_SetNameUpBuffer
 3362              		.syntax unified
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 90


 3363              		.thumb
 3364              		.thumb_func
 3366              	SEGGER_RTT_SetNameUpBuffer:
 3367              	.LFB27:
1740:Core/Src/SEGGER_RTT.c **** 
1741:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1742:Core/Src/SEGGER_RTT.c **** *
1743:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1744:Core/Src/SEGGER_RTT.c **** *
1745:Core/Src/SEGGER_RTT.c **** *  Function description
1746:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1747:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1748:Core/Src/SEGGER_RTT.c **** *
1749:Core/Src/SEGGER_RTT.c **** *  Parameters
1750:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1751:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1752:Core/Src/SEGGER_RTT.c **** *
1753:Core/Src/SEGGER_RTT.c **** *  Return value
1754:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1755:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1756:Core/Src/SEGGER_RTT.c **** */
1757:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 3368              		.loc 1 1757 73
 3369              		.cfi_startproc
 3370              		@ args = 0, pretend = 0, frame = 32
 3371              		@ frame_needed = 1, uses_anonymous_args = 0
 3372 0000 80B5     		push	{r7, lr}
 3373              	.LCFI140:
 3374              		.cfi_def_cfa_offset 8
 3375              		.cfi_offset 7, -8
 3376              		.cfi_offset 14, -4
 3377 0002 88B0     		sub	sp, sp, #32
 3378              	.LCFI141:
 3379              		.cfi_def_cfa_offset 40
 3380 0004 00AF     		add	r7, sp, #0
 3381              	.LCFI142:
 3382              		.cfi_def_cfa_register 7
 3383 0006 7860     		str	r0, [r7, #4]
 3384 0008 3960     		str	r1, [r7]
 3385              	.LBB23:
1758:Core/Src/SEGGER_RTT.c ****   int r;
1759:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1760:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
1761:Core/Src/SEGGER_RTT.c **** 
1762:Core/Src/SEGGER_RTT.c ****   INIT();
 3386              		.loc 1 1762 3
 3387 000a 174B     		ldr	r3, .L179
 3388 000c BB61     		str	r3, [r7, #24]
 3389 000e BB69     		ldr	r3, [r7, #24]
 3390 0010 1B78     		ldrb	r3, [r3]
 3391 0012 DBB2     		uxtb	r3, r3
 3392 0014 002B     		cmp	r3, #0
 3393 0016 01D1     		bne	.L175
 3394              		.loc 1 1762 3 is_stmt 0 discriminator 1
 3395 0018 FFF7FEFF 		bl	_DoInit
 3396              	.L175:
 3397              	.LBE23:
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 91


1763:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3398              		.loc 1 1763 10 is_stmt 1
 3399 001c 124B     		ldr	r3, .L179
 3400 001e 7B61     		str	r3, [r7, #20]
1764:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3401              		.loc 1 1764 6
 3402 0020 7B68     		ldr	r3, [r7, #4]
 3403 0022 022B     		cmp	r3, #2
 3404 0024 18D8     		bhi	.L176
 3405              	.LBB24:
1765:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3406              		.loc 1 1765 5
 3407              		.syntax unified
 3408              	@ 1765 "Core/Src/SEGGER_RTT.c" 1
 3409 0026 EFF31183 		mrs   r3, basepri  
 3410 002a 4FF02001 		mov   r1, #32       
 3411 002e 81F31188 		msr   basepri, r1  
 3412              		
 3413              	@ 0 "" 2
 3414              		.thumb
 3415              		.syntax unified
 3416 0032 3B61     		str	r3, [r7, #16]
1766:Core/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3417              		.loc 1 1766 9
 3418 0034 7B68     		ldr	r3, [r7, #4]
 3419 0036 5A1C     		adds	r2, r3, #1
 3420 0038 1346     		mov	r3, r2
 3421 003a 5B00     		lsls	r3, r3, #1
 3422 003c 1344     		add	r3, r3, r2
 3423 003e DB00     		lsls	r3, r3, #3
 3424 0040 7A69     		ldr	r2, [r7, #20]
 3425 0042 1344     		add	r3, r3, r2
 3426 0044 FB60     		str	r3, [r7, #12]
1767:Core/Src/SEGGER_RTT.c ****     pUp->sName = sName;
 3427              		.loc 1 1767 16
 3428 0046 FB68     		ldr	r3, [r7, #12]
 3429 0048 3A68     		ldr	r2, [r7]
 3430 004a 1A60     		str	r2, [r3]
1768:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3431              		.loc 1 1768 5
 3432 004c 3B69     		ldr	r3, [r7, #16]
 3433              		.syntax unified
 3434              	@ 1768 "Core/Src/SEGGER_RTT.c" 1
 3435 004e 83F31188 		msr   basepri, r3  
 3436              		
 3437              	@ 0 "" 2
 3438              		.thumb
 3439              		.syntax unified
 3440              	.LBE24:
1769:Core/Src/SEGGER_RTT.c ****     r =  0;
 3441              		.loc 1 1769 7
 3442 0052 0023     		movs	r3, #0
 3443 0054 FB61     		str	r3, [r7, #28]
 3444 0056 02E0     		b	.L177
 3445              	.L176:
1770:Core/Src/SEGGER_RTT.c ****   } else {
1771:Core/Src/SEGGER_RTT.c ****     r = -1;
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 92


 3446              		.loc 1 1771 7
 3447 0058 4FF0FF33 		mov	r3, #-1
 3448 005c FB61     		str	r3, [r7, #28]
 3449              	.L177:
1772:Core/Src/SEGGER_RTT.c ****   }
1773:Core/Src/SEGGER_RTT.c ****   return r;
 3450              		.loc 1 1773 10
 3451 005e FB69     		ldr	r3, [r7, #28]
1774:Core/Src/SEGGER_RTT.c **** }
 3452              		.loc 1 1774 1
 3453 0060 1846     		mov	r0, r3
 3454 0062 2037     		adds	r7, r7, #32
 3455              	.LCFI143:
 3456              		.cfi_def_cfa_offset 8
 3457 0064 BD46     		mov	sp, r7
 3458              	.LCFI144:
 3459              		.cfi_def_cfa_register 13
 3460              		@ sp needed
 3461 0066 80BD     		pop	{r7, pc}
 3462              	.L180:
 3463              		.align	2
 3464              	.L179:
 3465 0068 00000000 		.word	_SEGGER_RTT
 3466              		.cfi_endproc
 3467              	.LFE27:
 3469              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 3470              		.align	1
 3471              		.global	SEGGER_RTT_SetNameDownBuffer
 3472              		.syntax unified
 3473              		.thumb
 3474              		.thumb_func
 3476              	SEGGER_RTT_SetNameDownBuffer:
 3477              	.LFB28:
1775:Core/Src/SEGGER_RTT.c **** 
1776:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1777:Core/Src/SEGGER_RTT.c **** *
1778:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1779:Core/Src/SEGGER_RTT.c **** *
1780:Core/Src/SEGGER_RTT.c **** *  Function description
1781:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1782:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1783:Core/Src/SEGGER_RTT.c **** *
1784:Core/Src/SEGGER_RTT.c **** *  Parameters
1785:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1786:Core/Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1787:Core/Src/SEGGER_RTT.c **** *
1788:Core/Src/SEGGER_RTT.c **** *  Return value
1789:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1790:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1791:Core/Src/SEGGER_RTT.c **** */
1792:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 3478              		.loc 1 1792 75
 3479              		.cfi_startproc
 3480              		@ args = 0, pretend = 0, frame = 32
 3481              		@ frame_needed = 1, uses_anonymous_args = 0
 3482 0000 80B5     		push	{r7, lr}
 3483              	.LCFI145:
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 93


 3484              		.cfi_def_cfa_offset 8
 3485              		.cfi_offset 7, -8
 3486              		.cfi_offset 14, -4
 3487 0002 88B0     		sub	sp, sp, #32
 3488              	.LCFI146:
 3489              		.cfi_def_cfa_offset 40
 3490 0004 00AF     		add	r7, sp, #0
 3491              	.LCFI147:
 3492              		.cfi_def_cfa_register 7
 3493 0006 7860     		str	r0, [r7, #4]
 3494 0008 3960     		str	r1, [r7]
 3495              	.LBB25:
1793:Core/Src/SEGGER_RTT.c ****   int r;
1794:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1795:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
1796:Core/Src/SEGGER_RTT.c **** 
1797:Core/Src/SEGGER_RTT.c ****   INIT();
 3496              		.loc 1 1797 3
 3497 000a 174B     		ldr	r3, .L186
 3498 000c BB61     		str	r3, [r7, #24]
 3499 000e BB69     		ldr	r3, [r7, #24]
 3500 0010 1B78     		ldrb	r3, [r3]
 3501 0012 DBB2     		uxtb	r3, r3
 3502 0014 002B     		cmp	r3, #0
 3503 0016 01D1     		bne	.L182
 3504              		.loc 1 1797 3 is_stmt 0 discriminator 1
 3505 0018 FFF7FEFF 		bl	_DoInit
 3506              	.L182:
 3507              	.LBE25:
1798:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3508              		.loc 1 1798 10 is_stmt 1
 3509 001c 124B     		ldr	r3, .L186
 3510 001e 7B61     		str	r3, [r7, #20]
1799:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3511              		.loc 1 1799 6
 3512 0020 7B68     		ldr	r3, [r7, #4]
 3513 0022 022B     		cmp	r3, #2
 3514 0024 18D8     		bhi	.L183
 3515              	.LBB26:
1800:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3516              		.loc 1 1800 5
 3517              		.syntax unified
 3518              	@ 1800 "Core/Src/SEGGER_RTT.c" 1
 3519 0026 EFF31183 		mrs   r3, basepri  
 3520 002a 4FF02001 		mov   r1, #32       
 3521 002e 81F31188 		msr   basepri, r1  
 3522              		
 3523              	@ 0 "" 2
 3524              		.thumb
 3525              		.syntax unified
 3526 0032 3B61     		str	r3, [r7, #16]
1801:Core/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3527              		.loc 1 1801 11
 3528 0034 7A68     		ldr	r2, [r7, #4]
 3529 0036 1346     		mov	r3, r2
 3530 0038 5B00     		lsls	r3, r3, #1
 3531 003a 1344     		add	r3, r3, r2
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 94


 3532 003c DB00     		lsls	r3, r3, #3
 3533 003e 6033     		adds	r3, r3, #96
 3534 0040 7A69     		ldr	r2, [r7, #20]
 3535 0042 1344     		add	r3, r3, r2
 3536 0044 FB60     		str	r3, [r7, #12]
1802:Core/Src/SEGGER_RTT.c ****     pDown->sName = sName;
 3537              		.loc 1 1802 18
 3538 0046 FB68     		ldr	r3, [r7, #12]
 3539 0048 3A68     		ldr	r2, [r7]
 3540 004a 1A60     		str	r2, [r3]
1803:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3541              		.loc 1 1803 5
 3542 004c 3B69     		ldr	r3, [r7, #16]
 3543              		.syntax unified
 3544              	@ 1803 "Core/Src/SEGGER_RTT.c" 1
 3545 004e 83F31188 		msr   basepri, r3  
 3546              		
 3547              	@ 0 "" 2
 3548              		.thumb
 3549              		.syntax unified
 3550              	.LBE26:
1804:Core/Src/SEGGER_RTT.c ****     r =  0;
 3551              		.loc 1 1804 7
 3552 0052 0023     		movs	r3, #0
 3553 0054 FB61     		str	r3, [r7, #28]
 3554 0056 02E0     		b	.L184
 3555              	.L183:
1805:Core/Src/SEGGER_RTT.c ****   } else {
1806:Core/Src/SEGGER_RTT.c ****     r = -1;
 3556              		.loc 1 1806 7
 3557 0058 4FF0FF33 		mov	r3, #-1
 3558 005c FB61     		str	r3, [r7, #28]
 3559              	.L184:
1807:Core/Src/SEGGER_RTT.c ****   }
1808:Core/Src/SEGGER_RTT.c ****   return r;
 3560              		.loc 1 1808 10
 3561 005e FB69     		ldr	r3, [r7, #28]
1809:Core/Src/SEGGER_RTT.c **** }
 3562              		.loc 1 1809 1
 3563 0060 1846     		mov	r0, r3
 3564 0062 2037     		adds	r7, r7, #32
 3565              	.LCFI148:
 3566              		.cfi_def_cfa_offset 8
 3567 0064 BD46     		mov	sp, r7
 3568              	.LCFI149:
 3569              		.cfi_def_cfa_register 13
 3570              		@ sp needed
 3571 0066 80BD     		pop	{r7, pc}
 3572              	.L187:
 3573              		.align	2
 3574              	.L186:
 3575 0068 00000000 		.word	_SEGGER_RTT
 3576              		.cfi_endproc
 3577              	.LFE28:
 3579              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 3580              		.align	1
 3581              		.global	SEGGER_RTT_SetFlagsUpBuffer
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 95


 3582              		.syntax unified
 3583              		.thumb
 3584              		.thumb_func
 3586              	SEGGER_RTT_SetFlagsUpBuffer:
 3587              	.LFB29:
1810:Core/Src/SEGGER_RTT.c **** 
1811:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1812:Core/Src/SEGGER_RTT.c **** *
1813:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1814:Core/Src/SEGGER_RTT.c **** *
1815:Core/Src/SEGGER_RTT.c **** *  Function description
1816:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1817:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1818:Core/Src/SEGGER_RTT.c **** *
1819:Core/Src/SEGGER_RTT.c **** *  Parameters
1820:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1821:Core/Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1822:Core/Src/SEGGER_RTT.c **** *
1823:Core/Src/SEGGER_RTT.c **** *  Return value
1824:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1825:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1826:Core/Src/SEGGER_RTT.c **** */
1827:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 3588              		.loc 1 1827 71
 3589              		.cfi_startproc
 3590              		@ args = 0, pretend = 0, frame = 32
 3591              		@ frame_needed = 1, uses_anonymous_args = 0
 3592 0000 80B5     		push	{r7, lr}
 3593              	.LCFI150:
 3594              		.cfi_def_cfa_offset 8
 3595              		.cfi_offset 7, -8
 3596              		.cfi_offset 14, -4
 3597 0002 88B0     		sub	sp, sp, #32
 3598              	.LCFI151:
 3599              		.cfi_def_cfa_offset 40
 3600 0004 00AF     		add	r7, sp, #0
 3601              	.LCFI152:
 3602              		.cfi_def_cfa_register 7
 3603 0006 7860     		str	r0, [r7, #4]
 3604 0008 3960     		str	r1, [r7]
 3605              	.LBB27:
1828:Core/Src/SEGGER_RTT.c ****   int r;
1829:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1830:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
1831:Core/Src/SEGGER_RTT.c **** 
1832:Core/Src/SEGGER_RTT.c ****   INIT();
 3606              		.loc 1 1832 3
 3607 000a 174B     		ldr	r3, .L193
 3608 000c BB61     		str	r3, [r7, #24]
 3609 000e BB69     		ldr	r3, [r7, #24]
 3610 0010 1B78     		ldrb	r3, [r3]
 3611 0012 DBB2     		uxtb	r3, r3
 3612 0014 002B     		cmp	r3, #0
 3613 0016 01D1     		bne	.L189
 3614              		.loc 1 1832 3 is_stmt 0 discriminator 1
 3615 0018 FFF7FEFF 		bl	_DoInit
 3616              	.L189:
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 96


 3617              	.LBE27:
1833:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3618              		.loc 1 1833 10 is_stmt 1
 3619 001c 124B     		ldr	r3, .L193
 3620 001e 7B61     		str	r3, [r7, #20]
1834:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3621              		.loc 1 1834 6
 3622 0020 7B68     		ldr	r3, [r7, #4]
 3623 0022 022B     		cmp	r3, #2
 3624 0024 18D8     		bhi	.L190
 3625              	.LBB28:
1835:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3626              		.loc 1 1835 5
 3627              		.syntax unified
 3628              	@ 1835 "Core/Src/SEGGER_RTT.c" 1
 3629 0026 EFF31183 		mrs   r3, basepri  
 3630 002a 4FF02001 		mov   r1, #32       
 3631 002e 81F31188 		msr   basepri, r1  
 3632              		
 3633              	@ 0 "" 2
 3634              		.thumb
 3635              		.syntax unified
 3636 0032 3B61     		str	r3, [r7, #16]
1836:Core/Src/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3637              		.loc 1 1836 9
 3638 0034 7B68     		ldr	r3, [r7, #4]
 3639 0036 5A1C     		adds	r2, r3, #1
 3640 0038 1346     		mov	r3, r2
 3641 003a 5B00     		lsls	r3, r3, #1
 3642 003c 1344     		add	r3, r3, r2
 3643 003e DB00     		lsls	r3, r3, #3
 3644 0040 7A69     		ldr	r2, [r7, #20]
 3645 0042 1344     		add	r3, r3, r2
 3646 0044 FB60     		str	r3, [r7, #12]
1837:Core/Src/SEGGER_RTT.c ****     pUp->Flags = Flags;
 3647              		.loc 1 1837 16
 3648 0046 FB68     		ldr	r3, [r7, #12]
 3649 0048 3A68     		ldr	r2, [r7]
 3650 004a 5A61     		str	r2, [r3, #20]
1838:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3651              		.loc 1 1838 5
 3652 004c 3B69     		ldr	r3, [r7, #16]
 3653              		.syntax unified
 3654              	@ 1838 "Core/Src/SEGGER_RTT.c" 1
 3655 004e 83F31188 		msr   basepri, r3  
 3656              		
 3657              	@ 0 "" 2
 3658              		.thumb
 3659              		.syntax unified
 3660              	.LBE28:
1839:Core/Src/SEGGER_RTT.c ****     r =  0;
 3661              		.loc 1 1839 7
 3662 0052 0023     		movs	r3, #0
 3663 0054 FB61     		str	r3, [r7, #28]
 3664 0056 02E0     		b	.L191
 3665              	.L190:
1840:Core/Src/SEGGER_RTT.c ****   } else {
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 97


1841:Core/Src/SEGGER_RTT.c ****     r = -1;
 3666              		.loc 1 1841 7
 3667 0058 4FF0FF33 		mov	r3, #-1
 3668 005c FB61     		str	r3, [r7, #28]
 3669              	.L191:
1842:Core/Src/SEGGER_RTT.c ****   }
1843:Core/Src/SEGGER_RTT.c ****   return r;
 3670              		.loc 1 1843 10
 3671 005e FB69     		ldr	r3, [r7, #28]
1844:Core/Src/SEGGER_RTT.c **** }
 3672              		.loc 1 1844 1
 3673 0060 1846     		mov	r0, r3
 3674 0062 2037     		adds	r7, r7, #32
 3675              	.LCFI153:
 3676              		.cfi_def_cfa_offset 8
 3677 0064 BD46     		mov	sp, r7
 3678              	.LCFI154:
 3679              		.cfi_def_cfa_register 13
 3680              		@ sp needed
 3681 0066 80BD     		pop	{r7, pc}
 3682              	.L194:
 3683              		.align	2
 3684              	.L193:
 3685 0068 00000000 		.word	_SEGGER_RTT
 3686              		.cfi_endproc
 3687              	.LFE29:
 3689              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 3690              		.align	1
 3691              		.global	SEGGER_RTT_SetFlagsDownBuffer
 3692              		.syntax unified
 3693              		.thumb
 3694              		.thumb_func
 3696              	SEGGER_RTT_SetFlagsDownBuffer:
 3697              	.LFB30:
1845:Core/Src/SEGGER_RTT.c **** 
1846:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1847:Core/Src/SEGGER_RTT.c **** *
1848:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1849:Core/Src/SEGGER_RTT.c **** *
1850:Core/Src/SEGGER_RTT.c **** *  Function description
1851:Core/Src/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1852:Core/Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1853:Core/Src/SEGGER_RTT.c **** *
1854:Core/Src/SEGGER_RTT.c **** *  Parameters
1855:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1856:Core/Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1857:Core/Src/SEGGER_RTT.c **** *
1858:Core/Src/SEGGER_RTT.c **** *  Return value
1859:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1860:Core/Src/SEGGER_RTT.c **** *     < 0  Error
1861:Core/Src/SEGGER_RTT.c **** */
1862:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 3698              		.loc 1 1862 73
 3699              		.cfi_startproc
 3700              		@ args = 0, pretend = 0, frame = 32
 3701              		@ frame_needed = 1, uses_anonymous_args = 0
 3702 0000 80B5     		push	{r7, lr}
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 98


 3703              	.LCFI155:
 3704              		.cfi_def_cfa_offset 8
 3705              		.cfi_offset 7, -8
 3706              		.cfi_offset 14, -4
 3707 0002 88B0     		sub	sp, sp, #32
 3708              	.LCFI156:
 3709              		.cfi_def_cfa_offset 40
 3710 0004 00AF     		add	r7, sp, #0
 3711              	.LCFI157:
 3712              		.cfi_def_cfa_register 7
 3713 0006 7860     		str	r0, [r7, #4]
 3714 0008 3960     		str	r1, [r7]
 3715              	.LBB29:
1863:Core/Src/SEGGER_RTT.c ****   int r;
1864:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
1865:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
1866:Core/Src/SEGGER_RTT.c **** 
1867:Core/Src/SEGGER_RTT.c ****   INIT();
 3716              		.loc 1 1867 3
 3717 000a 174B     		ldr	r3, .L200
 3718 000c BB61     		str	r3, [r7, #24]
 3719 000e BB69     		ldr	r3, [r7, #24]
 3720 0010 1B78     		ldrb	r3, [r3]
 3721 0012 DBB2     		uxtb	r3, r3
 3722 0014 002B     		cmp	r3, #0
 3723 0016 01D1     		bne	.L196
 3724              		.loc 1 1867 3 is_stmt 0 discriminator 1
 3725 0018 FFF7FEFF 		bl	_DoInit
 3726              	.L196:
 3727              	.LBE29:
1868:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3728              		.loc 1 1868 10 is_stmt 1
 3729 001c 124B     		ldr	r3, .L200
 3730 001e 7B61     		str	r3, [r7, #20]
1869:Core/Src/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3731              		.loc 1 1869 6
 3732 0020 7B68     		ldr	r3, [r7, #4]
 3733 0022 022B     		cmp	r3, #2
 3734 0024 18D8     		bhi	.L197
 3735              	.LBB30:
1870:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3736              		.loc 1 1870 5
 3737              		.syntax unified
 3738              	@ 1870 "Core/Src/SEGGER_RTT.c" 1
 3739 0026 EFF31183 		mrs   r3, basepri  
 3740 002a 4FF02001 		mov   r1, #32       
 3741 002e 81F31188 		msr   basepri, r1  
 3742              		
 3743              	@ 0 "" 2
 3744              		.thumb
 3745              		.syntax unified
 3746 0032 3B61     		str	r3, [r7, #16]
1871:Core/Src/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3747              		.loc 1 1871 11
 3748 0034 7A68     		ldr	r2, [r7, #4]
 3749 0036 1346     		mov	r3, r2
 3750 0038 5B00     		lsls	r3, r3, #1
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 99


 3751 003a 1344     		add	r3, r3, r2
 3752 003c DB00     		lsls	r3, r3, #3
 3753 003e 6033     		adds	r3, r3, #96
 3754 0040 7A69     		ldr	r2, [r7, #20]
 3755 0042 1344     		add	r3, r3, r2
 3756 0044 FB60     		str	r3, [r7, #12]
1872:Core/Src/SEGGER_RTT.c ****     pDown->Flags = Flags;
 3757              		.loc 1 1872 18
 3758 0046 FB68     		ldr	r3, [r7, #12]
 3759 0048 3A68     		ldr	r2, [r7]
 3760 004a 5A61     		str	r2, [r3, #20]
1873:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3761              		.loc 1 1873 5
 3762 004c 3B69     		ldr	r3, [r7, #16]
 3763              		.syntax unified
 3764              	@ 1873 "Core/Src/SEGGER_RTT.c" 1
 3765 004e 83F31188 		msr   basepri, r3  
 3766              		
 3767              	@ 0 "" 2
 3768              		.thumb
 3769              		.syntax unified
 3770              	.LBE30:
1874:Core/Src/SEGGER_RTT.c ****     r =  0;
 3771              		.loc 1 1874 7
 3772 0052 0023     		movs	r3, #0
 3773 0054 FB61     		str	r3, [r7, #28]
 3774 0056 02E0     		b	.L198
 3775              	.L197:
1875:Core/Src/SEGGER_RTT.c ****   } else {
1876:Core/Src/SEGGER_RTT.c ****     r = -1;
 3776              		.loc 1 1876 7
 3777 0058 4FF0FF33 		mov	r3, #-1
 3778 005c FB61     		str	r3, [r7, #28]
 3779              	.L198:
1877:Core/Src/SEGGER_RTT.c ****   }
1878:Core/Src/SEGGER_RTT.c ****   return r;
 3780              		.loc 1 1878 10
 3781 005e FB69     		ldr	r3, [r7, #28]
1879:Core/Src/SEGGER_RTT.c **** }
 3782              		.loc 1 1879 1
 3783 0060 1846     		mov	r0, r3
 3784 0062 2037     		adds	r7, r7, #32
 3785              	.LCFI158:
 3786              		.cfi_def_cfa_offset 8
 3787 0064 BD46     		mov	sp, r7
 3788              	.LCFI159:
 3789              		.cfi_def_cfa_register 13
 3790              		@ sp needed
 3791 0066 80BD     		pop	{r7, pc}
 3792              	.L201:
 3793              		.align	2
 3794              	.L200:
 3795 0068 00000000 		.word	_SEGGER_RTT
 3796              		.cfi_endproc
 3797              	.LFE30:
 3799              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 3800              		.align	1
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 100


 3801              		.global	SEGGER_RTT_Init
 3802              		.syntax unified
 3803              		.thumb
 3804              		.thumb_func
 3806              	SEGGER_RTT_Init:
 3807              	.LFB31:
1880:Core/Src/SEGGER_RTT.c **** 
1881:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1882:Core/Src/SEGGER_RTT.c **** *
1883:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1884:Core/Src/SEGGER_RTT.c **** *
1885:Core/Src/SEGGER_RTT.c **** *  Function description
1886:Core/Src/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1887:Core/Src/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1888:Core/Src/SEGGER_RTT.c **** *
1889:Core/Src/SEGGER_RTT.c **** */
1890:Core/Src/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 3808              		.loc 1 1890 29
 3809              		.cfi_startproc
 3810              		@ args = 0, pretend = 0, frame = 0
 3811              		@ frame_needed = 1, uses_anonymous_args = 0
 3812 0000 80B5     		push	{r7, lr}
 3813              	.LCFI160:
 3814              		.cfi_def_cfa_offset 8
 3815              		.cfi_offset 7, -8
 3816              		.cfi_offset 14, -4
 3817 0002 00AF     		add	r7, sp, #0
 3818              	.LCFI161:
 3819              		.cfi_def_cfa_register 7
1891:Core/Src/SEGGER_RTT.c ****   _DoInit();
 3820              		.loc 1 1891 3
 3821 0004 FFF7FEFF 		bl	_DoInit
1892:Core/Src/SEGGER_RTT.c **** }
 3822              		.loc 1 1892 1
 3823 0008 00BF     		nop
 3824 000a 80BD     		pop	{r7, pc}
 3825              		.cfi_endproc
 3826              	.LFE31:
 3828              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
 3829              		.align	1
 3830              		.global	SEGGER_RTT_SetTerminal
 3831              		.syntax unified
 3832              		.thumb
 3833              		.thumb_func
 3835              	SEGGER_RTT_SetTerminal:
 3836              	.LFB32:
1893:Core/Src/SEGGER_RTT.c **** 
1894:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1895:Core/Src/SEGGER_RTT.c **** *
1896:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1897:Core/Src/SEGGER_RTT.c **** *
1898:Core/Src/SEGGER_RTT.c **** *  Function description
1899:Core/Src/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1900:Core/Src/SEGGER_RTT.c **** *
1901:Core/Src/SEGGER_RTT.c **** *  Parameters
1902:Core/Src/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1903:Core/Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 101


1904:Core/Src/SEGGER_RTT.c **** *  Return value
1905:Core/Src/SEGGER_RTT.c **** *    >= 0  O.K.
1906:Core/Src/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1907:Core/Src/SEGGER_RTT.c **** *
1908:Core/Src/SEGGER_RTT.c **** *  Notes
1909:Core/Src/SEGGER_RTT.c **** *    (1) Buffer 0 is always reserved for terminal I/O, so we can use index 0 here, fixed
1910:Core/Src/SEGGER_RTT.c **** */
1911:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (unsigned char TerminalId) {
 3837              		.loc 1 1911 55
 3838              		.cfi_startproc
 3839              		@ args = 0, pretend = 0, frame = 32
 3840              		@ frame_needed = 1, uses_anonymous_args = 0
 3841 0000 80B5     		push	{r7, lr}
 3842              	.LCFI162:
 3843              		.cfi_def_cfa_offset 8
 3844              		.cfi_offset 7, -8
 3845              		.cfi_offset 14, -4
 3846 0002 88B0     		sub	sp, sp, #32
 3847              	.LCFI163:
 3848              		.cfi_def_cfa_offset 40
 3849 0004 00AF     		add	r7, sp, #0
 3850              	.LCFI164:
 3851              		.cfi_def_cfa_register 7
 3852 0006 0346     		mov	r3, r0
 3853 0008 FB71     		strb	r3, [r7, #7]
 3854              	.LBB31:
1912:Core/Src/SEGGER_RTT.c ****   unsigned char         ac[2];
1913:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1914:Core/Src/SEGGER_RTT.c ****   unsigned Avail;
1915:Core/Src/SEGGER_RTT.c ****   int r;
1916:Core/Src/SEGGER_RTT.c **** 
1917:Core/Src/SEGGER_RTT.c ****   INIT();
 3855              		.loc 1 1917 3
 3856 000a 274B     		ldr	r3, .L211
 3857 000c BB61     		str	r3, [r7, #24]
 3858 000e BB69     		ldr	r3, [r7, #24]
 3859 0010 1B78     		ldrb	r3, [r3]
 3860 0012 DBB2     		uxtb	r3, r3
 3861 0014 002B     		cmp	r3, #0
 3862 0016 01D1     		bne	.L204
 3863              		.loc 1 1917 3 is_stmt 0 discriminator 1
 3864 0018 FFF7FEFF 		bl	_DoInit
 3865              	.L204:
 3866              	.LBE31:
1918:Core/Src/SEGGER_RTT.c ****   r = 0;
 3867              		.loc 1 1918 5 is_stmt 1
 3868 001c 0023     		movs	r3, #0
 3869 001e FB61     		str	r3, [r7, #28]
1919:Core/Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3870              		.loc 1 1919 9
 3871 0020 FF23     		movs	r3, #255
 3872 0022 3B72     		strb	r3, [r7, #8]
1920:Core/Src/SEGGER_RTT.c ****   if (TerminalId < sizeof(_aTerminalId)) { // We only support a certain number of channels
 3873              		.loc 1 1920 6
 3874 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3875 0026 0F2B     		cmp	r3, #15
 3876 0028 36D8     		bhi	.L205
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 102


1921:Core/Src/SEGGER_RTT.c ****     ac[1] = _aTerminalId[TerminalId];
 3877              		.loc 1 1921 25
 3878 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3879 002c 1F4A     		ldr	r2, .L211+4
 3880 002e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3881              		.loc 1 1921 11
 3882 0030 7B72     		strb	r3, [r7, #9]
1922:Core/Src/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 3883              		.loc 1 1922 11
 3884 0032 1F4B     		ldr	r3, .L211+8
 3885 0034 7B61     		str	r3, [r7, #20]
 3886              	.LBB32:
1923:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();                     // Lock to make sure that no other task is writing into 
 3887              		.loc 1 1923 5
 3888              		.syntax unified
 3889              	@ 1923 "Core/Src/SEGGER_RTT.c" 1
 3890 0036 EFF31183 		mrs   r3, basepri  
 3891 003a 4FF02001 		mov   r1, #32       
 3892 003e 81F31188 		msr   basepri, r1  
 3893              		
 3894              	@ 0 "" 2
 3895              		.thumb
 3896              		.syntax unified
 3897 0042 3B61     		str	r3, [r7, #16]
1924:Core/Src/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 3898              		.loc 1 1924 15
 3899 0044 7B69     		ldr	r3, [r7, #20]
 3900 0046 5B69     		ldr	r3, [r3, #20]
 3901              		.loc 1 1924 23
 3902 0048 03F00303 		and	r3, r3, #3
 3903              		.loc 1 1924 8
 3904 004c 022B     		cmp	r3, #2
 3905 004e 0AD1     		bne	.L206
1925:Core/Src/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
 3906              		.loc 1 1925 23
 3907 0050 184A     		ldr	r2, .L211+12
 3908 0052 FB79     		ldrb	r3, [r7, #7]
 3909 0054 1370     		strb	r3, [r2]
1926:Core/Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3910              		.loc 1 1926 7
 3911 0056 07F10803 		add	r3, r7, #8
 3912 005a 0222     		movs	r2, #2
 3913 005c 1946     		mov	r1, r3
 3914 005e 7869     		ldr	r0, [r7, #20]
 3915 0060 FFF7FEFF 		bl	_WriteBlocking
 3916 0064 14E0     		b	.L207
 3917              	.L206:
1927:Core/Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1928:Core/Src/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 3918              		.loc 1 1928 15
 3919 0066 7869     		ldr	r0, [r7, #20]
 3920 0068 FFF7FEFF 		bl	_GetAvailWriteSpace
 3921 006c F860     		str	r0, [r7, #12]
1929:Core/Src/SEGGER_RTT.c ****       if (Avail >= 2) {
 3922              		.loc 1 1929 10
 3923 006e FB68     		ldr	r3, [r7, #12]
 3924 0070 012B     		cmp	r3, #1
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 103


 3925 0072 0AD9     		bls	.L208
1930:Core/Src/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
 3926              		.loc 1 1930 25
 3927 0074 0F4A     		ldr	r2, .L211+12
 3928 0076 FB79     		ldrb	r3, [r7, #7]
 3929 0078 1370     		strb	r3, [r2]
1931:Core/Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3930              		.loc 1 1931 9
 3931 007a 07F10803 		add	r3, r7, #8
 3932 007e 0222     		movs	r2, #2
 3933 0080 1946     		mov	r1, r3
 3934 0082 7869     		ldr	r0, [r7, #20]
 3935 0084 FFF7FEFF 		bl	_WriteNoCheck
 3936 0088 02E0     		b	.L207
 3937              	.L208:
1932:Core/Src/SEGGER_RTT.c ****       } else {
1933:Core/Src/SEGGER_RTT.c ****         r = -1;
 3938              		.loc 1 1933 11
 3939 008a 4FF0FF33 		mov	r3, #-1
 3940 008e FB61     		str	r3, [r7, #28]
 3941              	.L207:
1934:Core/Src/SEGGER_RTT.c ****       }
1935:Core/Src/SEGGER_RTT.c ****     }
1936:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3942              		.loc 1 1936 5
 3943 0090 3B69     		ldr	r3, [r7, #16]
 3944              		.syntax unified
 3945              	@ 1936 "Core/Src/SEGGER_RTT.c" 1
 3946 0092 83F31188 		msr   basepri, r3  
 3947              		
 3948              	@ 0 "" 2
 3949              		.thumb
 3950              		.syntax unified
 3951              	.LBE32:
 3952 0096 02E0     		b	.L209
 3953              	.L205:
1937:Core/Src/SEGGER_RTT.c ****   } else {
1938:Core/Src/SEGGER_RTT.c ****     r = -1;
 3954              		.loc 1 1938 7
 3955 0098 4FF0FF33 		mov	r3, #-1
 3956 009c FB61     		str	r3, [r7, #28]
 3957              	.L209:
1939:Core/Src/SEGGER_RTT.c ****   }
1940:Core/Src/SEGGER_RTT.c ****   return r;
 3958              		.loc 1 1940 10
 3959 009e FB69     		ldr	r3, [r7, #28]
1941:Core/Src/SEGGER_RTT.c **** }
 3960              		.loc 1 1941 1
 3961 00a0 1846     		mov	r0, r3
 3962 00a2 2037     		adds	r7, r7, #32
 3963              	.LCFI165:
 3964              		.cfi_def_cfa_offset 8
 3965 00a4 BD46     		mov	sp, r7
 3966              	.LCFI166:
 3967              		.cfi_def_cfa_register 13
 3968              		@ sp needed
 3969 00a6 80BD     		pop	{r7, pc}
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 104


 3970              	.L212:
 3971              		.align	2
 3972              	.L211:
 3973 00a8 00000000 		.word	_SEGGER_RTT
 3974 00ac 00000000 		.word	_aTerminalId
 3975 00b0 18000000 		.word	_SEGGER_RTT+24
 3976 00b4 00000000 		.word	_ActiveTerminal
 3977              		.cfi_endproc
 3978              	.LFE32:
 3980              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 3981              		.align	1
 3982              		.global	SEGGER_RTT_TerminalOut
 3983              		.syntax unified
 3984              		.thumb
 3985              		.thumb_func
 3987              	SEGGER_RTT_TerminalOut:
 3988              	.LFB33:
1942:Core/Src/SEGGER_RTT.c **** 
1943:Core/Src/SEGGER_RTT.c **** /*********************************************************************
1944:Core/Src/SEGGER_RTT.c **** *
1945:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1946:Core/Src/SEGGER_RTT.c **** *
1947:Core/Src/SEGGER_RTT.c **** *  Function description
1948:Core/Src/SEGGER_RTT.c **** *    Writes a string to the given terminal
1949:Core/Src/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1950:Core/Src/SEGGER_RTT.c **** *
1951:Core/Src/SEGGER_RTT.c **** *  Parameters
1952:Core/Src/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1953:Core/Src/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1954:Core/Src/SEGGER_RTT.c **** *
1955:Core/Src/SEGGER_RTT.c **** *  Return value
1956:Core/Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1957:Core/Src/SEGGER_RTT.c **** *     < 0 - Error.
1958:Core/Src/SEGGER_RTT.c **** *
1959:Core/Src/SEGGER_RTT.c **** */
1960:Core/Src/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
 3989              		.loc 1 1960 70
 3990              		.cfi_startproc
 3991              		@ args = 0, pretend = 0, frame = 32
 3992              		@ frame_needed = 1, uses_anonymous_args = 0
 3993 0000 80B5     		push	{r7, lr}
 3994              	.LCFI167:
 3995              		.cfi_def_cfa_offset 8
 3996              		.cfi_offset 7, -8
 3997              		.cfi_offset 14, -4
 3998 0002 88B0     		sub	sp, sp, #32
 3999              	.LCFI168:
 4000              		.cfi_def_cfa_offset 40
 4001 0004 00AF     		add	r7, sp, #0
 4002              	.LCFI169:
 4003              		.cfi_def_cfa_register 7
 4004 0006 0346     		mov	r3, r0
 4005 0008 3960     		str	r1, [r7]
 4006 000a FB71     		strb	r3, [r7, #7]
 4007              	.LBB33:
1961:Core/Src/SEGGER_RTT.c ****   int                   Status;
1962:Core/Src/SEGGER_RTT.c ****   unsigned              FragLen;
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 105


1963:Core/Src/SEGGER_RTT.c ****   unsigned              Avail;
1964:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
1965:Core/Src/SEGGER_RTT.c ****   //
1966:Core/Src/SEGGER_RTT.c ****   INIT();
 4008              		.loc 1 1966 3
 4009 000c 434B     		ldr	r3, .L227
 4010 000e BB61     		str	r3, [r7, #24]
 4011 0010 BB69     		ldr	r3, [r7, #24]
 4012 0012 1B78     		ldrb	r3, [r3]
 4013 0014 DBB2     		uxtb	r3, r3
 4014 0016 002B     		cmp	r3, #0
 4015 0018 01D1     		bne	.L214
 4016              		.loc 1 1966 3 is_stmt 0 discriminator 1
 4017 001a FFF7FEFF 		bl	_DoInit
 4018              	.L214:
 4019              	.LBE33:
1967:Core/Src/SEGGER_RTT.c ****   //
1968:Core/Src/SEGGER_RTT.c ****   // Validate terminal ID.
1969:Core/Src/SEGGER_RTT.c ****   //
1970:Core/Src/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 4020              		.loc 1 1970 6 is_stmt 1
 4021 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4022 0020 0F2B     		cmp	r3, #15
 4023 0022 73D8     		bhi	.L215
1971:Core/Src/SEGGER_RTT.c ****     //
1972:Core/Src/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1973:Core/Src/SEGGER_RTT.c ****     //
1974:Core/Src/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 4024              		.loc 1 1974 11
 4025 0024 3E4B     		ldr	r3, .L227+4
 4026 0026 7B61     		str	r3, [r7, #20]
1975:Core/Src/SEGGER_RTT.c ****     //
1976:Core/Src/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1977:Core/Src/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1978:Core/Src/SEGGER_RTT.c ****     //
1979:Core/Src/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 4027              		.loc 1 1979 15
 4028 0028 3868     		ldr	r0, [r7]
 4029 002a FFF7FEFF 		bl	strlen
 4030 002e 3861     		str	r0, [r7, #16]
 4031              	.LBB34:
1980:Core/Src/SEGGER_RTT.c ****     //
1981:Core/Src/SEGGER_RTT.c ****     // How we output depends upon the mode...
1982:Core/Src/SEGGER_RTT.c ****     //
1983:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 4032              		.loc 1 1983 5
 4033              		.syntax unified
 4034              	@ 1983 "Core/Src/SEGGER_RTT.c" 1
 4035 0030 EFF31183 		mrs   r3, basepri  
 4036 0034 4FF02001 		mov   r1, #32       
 4037 0038 81F31188 		msr   basepri, r1  
 4038              		
 4039              	@ 0 "" 2
 4040              		.thumb
 4041              		.syntax unified
 4042 003c FB60     		str	r3, [r7, #12]
1984:Core/Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 106


 4043              		.loc 1 1984 13
 4044 003e 7869     		ldr	r0, [r7, #20]
 4045 0040 FFF7FEFF 		bl	_GetAvailWriteSpace
 4046 0044 B860     		str	r0, [r7, #8]
1985:Core/Src/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 4047              		.loc 1 1985 18
 4048 0046 7B69     		ldr	r3, [r7, #20]
 4049 0048 5B69     		ldr	r3, [r3, #20]
 4050              		.loc 1 1985 26
 4051 004a 03F00303 		and	r3, r3, #3
 4052              		.loc 1 1985 5
 4053 004e 022B     		cmp	r3, #2
 4054 0050 41D0     		beq	.L216
 4055 0052 022B     		cmp	r3, #2
 4056 0054 52D8     		bhi	.L217
 4057 0056 002B     		cmp	r3, #0
 4058 0058 02D0     		beq	.L218
 4059 005a 012B     		cmp	r3, #1
 4060 005c 1BD0     		beq	.L219
 4061 005e 4DE0     		b	.L217
 4062              	.L218:
1986:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1987:Core/Src/SEGGER_RTT.c ****       //
1988:Core/Src/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1989:Core/Src/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
1990:Core/Src/SEGGER_RTT.c ****       //
1991:Core/Src/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
 4063              		.loc 1 1991 28
 4064 0060 3B69     		ldr	r3, [r7, #16]
 4065 0062 0433     		adds	r3, r3, #4
 4066              		.loc 1 1991 10
 4067 0064 BA68     		ldr	r2, [r7, #8]
 4068 0066 9A42     		cmp	r2, r3
 4069 0068 02D2     		bcs	.L220
1992:Core/Src/SEGGER_RTT.c ****         Status = 0;
 4070              		.loc 1 1992 16
 4071 006a 0023     		movs	r3, #0
 4072 006c FB61     		str	r3, [r7, #28]
1993:Core/Src/SEGGER_RTT.c ****       } else {
1994:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1995:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
1996:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1997:Core/Src/SEGGER_RTT.c ****       }
1998:Core/Src/SEGGER_RTT.c ****       break;
 4073              		.loc 1 1998 7
 4074 006e 49E0     		b	.L222
 4075              	.L220:
1994:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 4076              		.loc 1 1994 9
 4077 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4078 0072 1946     		mov	r1, r3
 4079 0074 7869     		ldr	r0, [r7, #20]
 4080 0076 FFF7FEFF 		bl	_PostTerminalSwitch
1995:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4081              		.loc 1 1995 23
 4082 007a 3A69     		ldr	r2, [r7, #16]
 4083 007c 3968     		ldr	r1, [r7]
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 107


 4084 007e 7869     		ldr	r0, [r7, #20]
 4085 0080 FFF7FEFF 		bl	_WriteBlocking
 4086 0084 0346     		mov	r3, r0
1995:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4087              		.loc 1 1995 16 discriminator 1
 4088 0086 FB61     		str	r3, [r7, #28]
1996:Core/Src/SEGGER_RTT.c ****       }
 4089              		.loc 1 1996 9
 4090 0088 264B     		ldr	r3, .L227+8
 4091 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4092 008c 1946     		mov	r1, r3
 4093 008e 7869     		ldr	r0, [r7, #20]
 4094 0090 FFF7FEFF 		bl	_PostTerminalSwitch
 4095              		.loc 1 1998 7
 4096 0094 36E0     		b	.L222
 4097              	.L219:
1999:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
2000:Core/Src/SEGGER_RTT.c ****       //
2001:Core/Src/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
2002:Core/Src/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
2003:Core/Src/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
2004:Core/Src/SEGGER_RTT.c ****       //
2005:Core/Src/SEGGER_RTT.c ****       if (Avail < 4u) {
 4098              		.loc 1 2005 10
 4099 0096 BB68     		ldr	r3, [r7, #8]
 4100 0098 032B     		cmp	r3, #3
 4101 009a 03D8     		bhi	.L223
2006:Core/Src/SEGGER_RTT.c ****         Status = -1;
 4102              		.loc 1 2006 16
 4103 009c 4FF0FF33 		mov	r3, #-1
 4104 00a0 FB61     		str	r3, [r7, #28]
2007:Core/Src/SEGGER_RTT.c ****       } else {
2008:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
2009:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
2010:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
2011:Core/Src/SEGGER_RTT.c ****       }
2012:Core/Src/SEGGER_RTT.c ****       break;
 4105              		.loc 1 2012 7
 4106 00a2 2FE0     		b	.L222
 4107              	.L223:
2008:Core/Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 4108              		.loc 1 2008 9
 4109 00a4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4110 00a6 1946     		mov	r1, r3
 4111 00a8 7869     		ldr	r0, [r7, #20]
 4112 00aa FFF7FEFF 		bl	_PostTerminalSwitch
2009:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4113              		.loc 1 2009 66
 4114 00ae BB68     		ldr	r3, [r7, #8]
 4115 00b0 1A1F     		subs	r2, r3, #4
2009:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4116              		.loc 1 2009 23
 4117 00b2 3B69     		ldr	r3, [r7, #16]
 4118 00b4 9342     		cmp	r3, r2
 4119 00b6 28BF     		it	cs
 4120 00b8 1346     		movcs	r3, r2
 4121 00ba 1A46     		mov	r2, r3
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 108


 4122 00bc 3968     		ldr	r1, [r7]
 4123 00be 7869     		ldr	r0, [r7, #20]
 4124 00c0 FFF7FEFF 		bl	_WriteBlocking
 4125 00c4 0346     		mov	r3, r0
2009:Core/Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4126              		.loc 1 2009 16 discriminator 1
 4127 00c6 FB61     		str	r3, [r7, #28]
2010:Core/Src/SEGGER_RTT.c ****       }
 4128              		.loc 1 2010 9
 4129 00c8 164B     		ldr	r3, .L227+8
 4130 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4131 00cc 1946     		mov	r1, r3
 4132 00ce 7869     		ldr	r0, [r7, #20]
 4133 00d0 FFF7FEFF 		bl	_PostTerminalSwitch
 4134              		.loc 1 2012 7
 4135 00d4 16E0     		b	.L222
 4136              	.L216:
2013:Core/Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
2014:Core/Src/SEGGER_RTT.c ****       //
2015:Core/Src/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
2016:Core/Src/SEGGER_RTT.c ****       //
2017:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
 4137              		.loc 1 2017 7
 4138 00d6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4139 00d8 1946     		mov	r1, r3
 4140 00da 7869     		ldr	r0, [r7, #20]
 4141 00dc FFF7FEFF 		bl	_PostTerminalSwitch
2018:Core/Src/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 4142              		.loc 1 2018 21
 4143 00e0 3A69     		ldr	r2, [r7, #16]
 4144 00e2 3968     		ldr	r1, [r7]
 4145 00e4 7869     		ldr	r0, [r7, #20]
 4146 00e6 FFF7FEFF 		bl	_WriteBlocking
 4147 00ea 0346     		mov	r3, r0
 4148              		.loc 1 2018 14 discriminator 1
 4149 00ec FB61     		str	r3, [r7, #28]
2019:Core/Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 4150              		.loc 1 2019 7
 4151 00ee 0D4B     		ldr	r3, .L227+8
 4152 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4153 00f2 1946     		mov	r1, r3
 4154 00f4 7869     		ldr	r0, [r7, #20]
 4155 00f6 FFF7FEFF 		bl	_PostTerminalSwitch
2020:Core/Src/SEGGER_RTT.c ****       break;
 4156              		.loc 1 2020 7
 4157 00fa 03E0     		b	.L222
 4158              	.L217:
2021:Core/Src/SEGGER_RTT.c ****     default:
2022:Core/Src/SEGGER_RTT.c ****       Status = -1;
 4159              		.loc 1 2022 14
 4160 00fc 4FF0FF33 		mov	r3, #-1
 4161 0100 FB61     		str	r3, [r7, #28]
2023:Core/Src/SEGGER_RTT.c ****       break;
 4162              		.loc 1 2023 7
 4163 0102 00BF     		nop
 4164              	.L222:
2024:Core/Src/SEGGER_RTT.c ****     }
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 109


2025:Core/Src/SEGGER_RTT.c ****     //
2026:Core/Src/SEGGER_RTT.c ****     // Finish up.
2027:Core/Src/SEGGER_RTT.c ****     //
2028:Core/Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 4165              		.loc 1 2028 5
 4166 0104 FB68     		ldr	r3, [r7, #12]
 4167              		.syntax unified
 4168              	@ 2028 "Core/Src/SEGGER_RTT.c" 1
 4169 0106 83F31188 		msr   basepri, r3  
 4170              		
 4171              	@ 0 "" 2
 4172              		.thumb
 4173              		.syntax unified
 4174              	.LBE34:
 4175 010a 02E0     		b	.L225
 4176              	.L215:
2029:Core/Src/SEGGER_RTT.c ****   } else {
2030:Core/Src/SEGGER_RTT.c ****     Status = -1;
 4177              		.loc 1 2030 12
 4178 010c 4FF0FF33 		mov	r3, #-1
 4179 0110 FB61     		str	r3, [r7, #28]
 4180              	.L225:
2031:Core/Src/SEGGER_RTT.c ****   }
2032:Core/Src/SEGGER_RTT.c ****   return Status;
 4181              		.loc 1 2032 10
 4182 0112 FB69     		ldr	r3, [r7, #28]
2033:Core/Src/SEGGER_RTT.c **** }
 4183              		.loc 1 2033 1
 4184 0114 1846     		mov	r0, r3
 4185 0116 2037     		adds	r7, r7, #32
 4186              	.LCFI170:
 4187              		.cfi_def_cfa_offset 8
 4188 0118 BD46     		mov	sp, r7
 4189              	.LCFI171:
 4190              		.cfi_def_cfa_register 13
 4191              		@ sp needed
 4192 011a 80BD     		pop	{r7, pc}
 4193              	.L228:
 4194              		.align	2
 4195              	.L227:
 4196 011c 00000000 		.word	_SEGGER_RTT
 4197 0120 18000000 		.word	_SEGGER_RTT+24
 4198 0124 00000000 		.word	_ActiveTerminal
 4199              		.cfi_endproc
 4200              	.LFE33:
 4202              		.section	.text.SEGGER_RTT_GetAvailWriteSpace,"ax",%progbits
 4203              		.align	1
 4204              		.global	SEGGER_RTT_GetAvailWriteSpace
 4205              		.syntax unified
 4206              		.thumb
 4207              		.thumb_func
 4209              	SEGGER_RTT_GetAvailWriteSpace:
 4210              	.LFB34:
2034:Core/Src/SEGGER_RTT.c **** 
2035:Core/Src/SEGGER_RTT.c **** /*********************************************************************
2036:Core/Src/SEGGER_RTT.c **** *
2037:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetAvailWriteSpace
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 110


2038:Core/Src/SEGGER_RTT.c **** *
2039:Core/Src/SEGGER_RTT.c **** *  Function description
2040:Core/Src/SEGGER_RTT.c **** *    Returns the number of bytes available in the ring buffer.
2041:Core/Src/SEGGER_RTT.c **** *
2042:Core/Src/SEGGER_RTT.c **** *  Parameters
2043:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2044:Core/Src/SEGGER_RTT.c **** *
2045:Core/Src/SEGGER_RTT.c **** *  Return value
2046:Core/Src/SEGGER_RTT.c **** *    Number of bytes that are free in the selected up buffer.
2047:Core/Src/SEGGER_RTT.c **** */
2048:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetAvailWriteSpace (unsigned BufferIndex) {
 4211              		.loc 1 2048 63
 4212              		.cfi_startproc
 4213              		@ args = 0, pretend = 0, frame = 16
 4214              		@ frame_needed = 1, uses_anonymous_args = 0
 4215 0000 80B5     		push	{r7, lr}
 4216              	.LCFI172:
 4217              		.cfi_def_cfa_offset 8
 4218              		.cfi_offset 7, -8
 4219              		.cfi_offset 14, -4
 4220 0002 84B0     		sub	sp, sp, #16
 4221              	.LCFI173:
 4222              		.cfi_def_cfa_offset 24
 4223 0004 00AF     		add	r7, sp, #0
 4224              	.LCFI174:
 4225              		.cfi_def_cfa_register 7
 4226 0006 7860     		str	r0, [r7, #4]
2049:Core/Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
2050:Core/Src/SEGGER_RTT.c **** 
2051:Core/Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 4227              		.loc 1 2051 9
 4228 0008 7B68     		ldr	r3, [r7, #4]
 4229 000a 5A1C     		adds	r2, r3, #1
 4230 000c 1346     		mov	r3, r2
 4231 000e 5B00     		lsls	r3, r3, #1
 4232 0010 1344     		add	r3, r3, r2
 4233 0012 DB00     		lsls	r3, r3, #3
 4234 0014 054A     		ldr	r2, .L231
 4235 0016 1344     		add	r3, r3, r2
 4236 0018 FB60     		str	r3, [r7, #12]
2052:Core/Src/SEGGER_RTT.c ****   return _GetAvailWriteSpace(pRing);
 4237              		.loc 1 2052 10
 4238 001a F868     		ldr	r0, [r7, #12]
 4239 001c FFF7FEFF 		bl	_GetAvailWriteSpace
 4240 0020 0346     		mov	r3, r0
2053:Core/Src/SEGGER_RTT.c **** }
 4241              		.loc 1 2053 1
 4242 0022 1846     		mov	r0, r3
 4243 0024 1037     		adds	r7, r7, #16
 4244              	.LCFI175:
 4245              		.cfi_def_cfa_offset 8
 4246 0026 BD46     		mov	sp, r7
 4247              	.LCFI176:
 4248              		.cfi_def_cfa_register 13
 4249              		@ sp needed
 4250 0028 80BD     		pop	{r7, pc}
 4251              	.L232:
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 111


 4252 002a 00BF     		.align	2
 4253              	.L231:
 4254 002c 00000000 		.word	_SEGGER_RTT
 4255              		.cfi_endproc
 4256              	.LFE34:
 4258              		.section	.text.SEGGER_RTT_GetBytesInBuffer,"ax",%progbits
 4259              		.align	1
 4260              		.global	SEGGER_RTT_GetBytesInBuffer
 4261              		.syntax unified
 4262              		.thumb
 4263              		.thumb_func
 4265              	SEGGER_RTT_GetBytesInBuffer:
 4266              	.LFB35:
2054:Core/Src/SEGGER_RTT.c **** 
2055:Core/Src/SEGGER_RTT.c **** 
2056:Core/Src/SEGGER_RTT.c **** /*********************************************************************
2057:Core/Src/SEGGER_RTT.c **** *
2058:Core/Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetBytesInBuffer()
2059:Core/Src/SEGGER_RTT.c **** *
2060:Core/Src/SEGGER_RTT.c **** *  Function description
2061:Core/Src/SEGGER_RTT.c **** *    Returns the number of bytes currently used in the up buffer.
2062:Core/Src/SEGGER_RTT.c **** *
2063:Core/Src/SEGGER_RTT.c **** *  Parameters
2064:Core/Src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2065:Core/Src/SEGGER_RTT.c **** *
2066:Core/Src/SEGGER_RTT.c **** *  Return value
2067:Core/Src/SEGGER_RTT.c **** *    Number of bytes that are used in the buffer.
2068:Core/Src/SEGGER_RTT.c **** */
2069:Core/Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetBytesInBuffer(unsigned BufferIndex) {
 4267              		.loc 1 2069 60
 4268              		.cfi_startproc
 4269              		@ args = 0, pretend = 0, frame = 24
 4270              		@ frame_needed = 1, uses_anonymous_args = 0
 4271              		@ link register save eliminated.
 4272 0000 80B4     		push	{r7}
 4273              	.LCFI177:
 4274              		.cfi_def_cfa_offset 4
 4275              		.cfi_offset 7, -4
 4276 0002 87B0     		sub	sp, sp, #28
 4277              	.LCFI178:
 4278              		.cfi_def_cfa_offset 32
 4279 0004 00AF     		add	r7, sp, #0
 4280              	.LCFI179:
 4281              		.cfi_def_cfa_register 7
 4282 0006 7860     		str	r0, [r7, #4]
2070:Core/Src/SEGGER_RTT.c ****   unsigned RdOff;
2071:Core/Src/SEGGER_RTT.c ****   unsigned WrOff;
2072:Core/Src/SEGGER_RTT.c ****   unsigned r;
2073:Core/Src/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
2074:Core/Src/SEGGER_RTT.c ****   //
2075:Core/Src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
2076:Core/Src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
2077:Core/Src/SEGGER_RTT.c ****   //
2078:Core/Src/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 4283              		.loc 1 2078 10
 4284 0008 194B     		ldr	r3, .L237
 4285 000a 3B61     		str	r3, [r7, #16]
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 112


2079:Core/Src/SEGGER_RTT.c ****   RdOff = pRTTCB->aUp[BufferIndex].RdOff;
 4286              		.loc 1 2079 9
 4287 000c 3969     		ldr	r1, [r7, #16]
 4288 000e 7A68     		ldr	r2, [r7, #4]
 4289 0010 1346     		mov	r3, r2
 4290 0012 5B00     		lsls	r3, r3, #1
 4291 0014 1344     		add	r3, r3, r2
 4292 0016 DB00     		lsls	r3, r3, #3
 4293 0018 0B44     		add	r3, r3, r1
 4294 001a 2833     		adds	r3, r3, #40
 4295 001c 1B68     		ldr	r3, [r3]
 4296 001e FB60     		str	r3, [r7, #12]
2080:Core/Src/SEGGER_RTT.c ****   WrOff = pRTTCB->aUp[BufferIndex].WrOff;
 4297              		.loc 1 2080 9
 4298 0020 3969     		ldr	r1, [r7, #16]
 4299 0022 7A68     		ldr	r2, [r7, #4]
 4300 0024 1346     		mov	r3, r2
 4301 0026 5B00     		lsls	r3, r3, #1
 4302 0028 1344     		add	r3, r3, r2
 4303 002a DB00     		lsls	r3, r3, #3
 4304 002c 0B44     		add	r3, r3, r1
 4305 002e 2433     		adds	r3, r3, #36
 4306 0030 1B68     		ldr	r3, [r3]
 4307 0032 BB60     		str	r3, [r7, #8]
2081:Core/Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4308              		.loc 1 2081 6
 4309 0034 FA68     		ldr	r2, [r7, #12]
 4310 0036 BB68     		ldr	r3, [r7, #8]
 4311 0038 9A42     		cmp	r2, r3
 4312 003a 04D8     		bhi	.L234
2082:Core/Src/SEGGER_RTT.c ****     r = WrOff - RdOff;
 4313              		.loc 1 2082 7
 4314 003c BA68     		ldr	r2, [r7, #8]
 4315 003e FB68     		ldr	r3, [r7, #12]
 4316 0040 D31A     		subs	r3, r2, r3
 4317 0042 7B61     		str	r3, [r7, #20]
 4318 0044 0DE0     		b	.L235
 4319              	.L234:
2083:Core/Src/SEGGER_RTT.c ****   } else {
2084:Core/Src/SEGGER_RTT.c ****     r = pRTTCB->aUp[BufferIndex].SizeOfBuffer - (WrOff - RdOff);
 4320              		.loc 1 2084 33
 4321 0046 3969     		ldr	r1, [r7, #16]
 4322 0048 7A68     		ldr	r2, [r7, #4]
 4323 004a 1346     		mov	r3, r2
 4324 004c 5B00     		lsls	r3, r3, #1
 4325 004e 1344     		add	r3, r3, r2
 4326 0050 DB00     		lsls	r3, r3, #3
 4327 0052 0B44     		add	r3, r3, r1
 4328 0054 2033     		adds	r3, r3, #32
 4329 0056 1A68     		ldr	r2, [r3]
 4330              		.loc 1 2084 47
 4331 0058 F968     		ldr	r1, [r7, #12]
 4332 005a BB68     		ldr	r3, [r7, #8]
 4333 005c CB1A     		subs	r3, r1, r3
 4334              		.loc 1 2084 7
 4335 005e 1344     		add	r3, r3, r2
 4336 0060 7B61     		str	r3, [r7, #20]
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 113


 4337              	.L235:
2085:Core/Src/SEGGER_RTT.c ****   }
2086:Core/Src/SEGGER_RTT.c ****   return r;
 4338              		.loc 1 2086 10
 4339 0062 7B69     		ldr	r3, [r7, #20]
2087:Core/Src/SEGGER_RTT.c **** }
 4340              		.loc 1 2087 1
 4341 0064 1846     		mov	r0, r3
 4342 0066 1C37     		adds	r7, r7, #28
 4343              	.LCFI180:
 4344              		.cfi_def_cfa_offset 4
 4345 0068 BD46     		mov	sp, r7
 4346              	.LCFI181:
 4347              		.cfi_def_cfa_register 13
 4348              		@ sp needed
 4349 006a 5DF8047B 		ldr	r7, [sp], #4
 4350              	.LCFI182:
 4351              		.cfi_restore 7
 4352              		.cfi_def_cfa_offset 0
 4353 006e 7047     		bx	lr
 4354              	.L238:
 4355              		.align	2
 4356              	.L237:
 4357 0070 00000000 		.word	_SEGGER_RTT
 4358              		.cfi_endproc
 4359              	.LFE35:
 4361              		.section	.rodata._aInitStr.0,"a"
 4362              		.align	2
 4365              	_aInitStr.0:
 4366 0000 00000000 		.ascii	"\000\000\000\000\000\000TTR REGGES\000"
 4366      00005454 
 4366      52205245 
 4366      47474553 
 4366      00
 4367              		.text
 4368              	.Letext0:
 4369              		.file 2 "Core/Inc/SEGGER_RTT.h"
 4370              		.file 3 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/lib/gcc/arm-none-eabi/13.2.1/includ
 4371              		.file 4 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/string.h"
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 114


DEFINED SYMBOLS
                            *ABS*:00000000 SEGGER_RTT.c
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:21     .data._aTerminalId:00000000 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:24     .data._aTerminalId:00000000 _aTerminalId
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:31     .bss._SEGGER_RTT:00000000 _SEGGER_RTT
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:28     .bss._SEGGER_RTT:00000000 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:34     .bss._acUpBuffer:00000000 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:37     .bss._acUpBuffer:00000000 _acUpBuffer
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:40     .bss._acDownBuffer:00000000 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:43     .bss._acDownBuffer:00000000 _acDownBuffer
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:48     .bss._ActiveTerminal:00000000 _ActiveTerminal
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:49     .bss._ActiveTerminal:00000000 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:51     .rodata:00000000 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:55     .text._DoInit:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:60     .text._DoInit:00000000 _DoInit
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:196    .text._DoInit:0000009c $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:4365   .rodata._aInitStr.0:00000000 _aInitStr.0
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:205    .text._WriteBlocking:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:210    .text._WriteBlocking:00000000 _WriteBlocking
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:362    .text._WriteNoCheck:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:367    .text._WriteNoCheck:00000000 _WriteNoCheck
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:492    .text._PostTerminalSwitch:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:497    .text._PostTerminalSwitch:00000000 _PostTerminalSwitch
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:545    .text._PostTerminalSwitch:00000030 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:550    .text._GetAvailWriteSpace:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:555    .text._GetAvailWriteSpace:00000000 _GetAvailWriteSpace
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:628    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:634    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000 SEGGER_RTT_ReadUpBufferNoLock
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:826    .text.SEGGER_RTT_ReadUpBufferNoLock:00000108 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:831    .text.SEGGER_RTT_ReadNoLock:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:837    .text.SEGGER_RTT_ReadNoLock:00000000 SEGGER_RTT_ReadNoLock
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1029   .text.SEGGER_RTT_ReadNoLock:00000108 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1034   .text.SEGGER_RTT_ReadUpBuffer:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1040   .text.SEGGER_RTT_ReadUpBuffer:00000000 SEGGER_RTT_ReadUpBuffer
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1104   .text.SEGGER_RTT_Read:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1110   .text.SEGGER_RTT_Read:00000000 SEGGER_RTT_Read
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1174   .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1180   .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 SEGGER_RTT_WriteWithOverwriteNoLock
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1418   .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000120 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1423   .text.SEGGER_RTT_WriteDownBufferNoLock:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1429   .text.SEGGER_RTT_WriteDownBufferNoLock:00000000 SEGGER_RTT_WriteDownBufferNoLock
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1551   .text.SEGGER_RTT_WriteDownBufferNoLock:0000009c $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1556   .text.SEGGER_RTT_WriteNoLock:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1562   .text.SEGGER_RTT_WriteNoLock:00000000 SEGGER_RTT_WriteNoLock
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1684   .text.SEGGER_RTT_WriteNoLock:0000009c $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1689   .text.SEGGER_RTT_WriteDownBuffer:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1695   .text.SEGGER_RTT_WriteDownBuffer:00000000 SEGGER_RTT_WriteDownBuffer
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1771   .text.SEGGER_RTT_WriteDownBuffer:00000048 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1776   .text.SEGGER_RTT_Write:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1782   .text.SEGGER_RTT_Write:00000000 SEGGER_RTT_Write
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1858   .text.SEGGER_RTT_Write:00000048 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1863   .text.SEGGER_RTT_WriteString:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1869   .text.SEGGER_RTT_WriteString:00000000 SEGGER_RTT_WriteString
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1912   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:1918   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 SEGGER_RTT_PutCharSkipNoLock
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2025   .text.SEGGER_RTT_PutCharSkipNoLock:00000074 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2030   .text.SEGGER_RTT_PutCharSkip:00000000 $t
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 115


/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2036   .text.SEGGER_RTT_PutCharSkip:00000000 SEGGER_RTT_PutCharSkip
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2174   .text.SEGGER_RTT_PutCharSkip:00000094 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2179   .text.SEGGER_RTT_PutChar:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2185   .text.SEGGER_RTT_PutChar:00000000 SEGGER_RTT_PutChar
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2340   .text.SEGGER_RTT_PutChar:000000a8 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2345   .text.SEGGER_RTT_GetKey:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2351   .text.SEGGER_RTT_GetKey:00000000 SEGGER_RTT_GetKey
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2407   .text.SEGGER_RTT_WaitKey:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2413   .text.SEGGER_RTT_WaitKey:00000000 SEGGER_RTT_WaitKey
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2454   .text.SEGGER_RTT_HasKey:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2460   .text.SEGGER_RTT_HasKey:00000000 SEGGER_RTT_HasKey
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2528   .text.SEGGER_RTT_HasKey:00000040 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2534   .text.SEGGER_RTT_HasData:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2540   .text.SEGGER_RTT_HasData:00000000 SEGGER_RTT_HasData
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2595   .text.SEGGER_RTT_HasData:00000034 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2600   .text.SEGGER_RTT_HasDataUp:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2606   .text.SEGGER_RTT_HasDataUp:00000000 SEGGER_RTT_HasDataUp
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2661   .text.SEGGER_RTT_HasDataUp:00000034 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2666   .text.SEGGER_RTT_AllocDownBuffer:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2672   .text.SEGGER_RTT_AllocDownBuffer:00000000 SEGGER_RTT_AllocDownBuffer
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2866   .text.SEGGER_RTT_AllocDownBuffer:00000100 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2871   .text.SEGGER_RTT_AllocUpBuffer:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:2877   .text.SEGGER_RTT_AllocUpBuffer:00000000 SEGGER_RTT_AllocUpBuffer
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3073   .text.SEGGER_RTT_AllocUpBuffer:00000104 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3078   .text.SEGGER_RTT_ConfigUpBuffer:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3084   .text.SEGGER_RTT_ConfigUpBuffer:00000000 SEGGER_RTT_ConfigUpBuffer
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3210   .text.SEGGER_RTT_ConfigUpBuffer:00000090 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3215   .text.SEGGER_RTT_ConfigDownBuffer:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3221   .text.SEGGER_RTT_ConfigDownBuffer:00000000 SEGGER_RTT_ConfigDownBuffer
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3355   .text.SEGGER_RTT_ConfigDownBuffer:00000094 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3360   .text.SEGGER_RTT_SetNameUpBuffer:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3366   .text.SEGGER_RTT_SetNameUpBuffer:00000000 SEGGER_RTT_SetNameUpBuffer
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3465   .text.SEGGER_RTT_SetNameUpBuffer:00000068 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3470   .text.SEGGER_RTT_SetNameDownBuffer:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3476   .text.SEGGER_RTT_SetNameDownBuffer:00000000 SEGGER_RTT_SetNameDownBuffer
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3575   .text.SEGGER_RTT_SetNameDownBuffer:00000068 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3580   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3586   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 SEGGER_RTT_SetFlagsUpBuffer
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3685   .text.SEGGER_RTT_SetFlagsUpBuffer:00000068 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3690   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3696   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 SEGGER_RTT_SetFlagsDownBuffer
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3795   .text.SEGGER_RTT_SetFlagsDownBuffer:00000068 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3800   .text.SEGGER_RTT_Init:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3806   .text.SEGGER_RTT_Init:00000000 SEGGER_RTT_Init
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3829   .text.SEGGER_RTT_SetTerminal:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3835   .text.SEGGER_RTT_SetTerminal:00000000 SEGGER_RTT_SetTerminal
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3973   .text.SEGGER_RTT_SetTerminal:000000a8 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3981   .text.SEGGER_RTT_TerminalOut:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:3987   .text.SEGGER_RTT_TerminalOut:00000000 SEGGER_RTT_TerminalOut
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:4196   .text.SEGGER_RTT_TerminalOut:0000011c $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:4203   .text.SEGGER_RTT_GetAvailWriteSpace:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:4209   .text.SEGGER_RTT_GetAvailWriteSpace:00000000 SEGGER_RTT_GetAvailWriteSpace
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:4254   .text.SEGGER_RTT_GetAvailWriteSpace:0000002c $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:4259   .text.SEGGER_RTT_GetBytesInBuffer:00000000 $t
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:4265   .text.SEGGER_RTT_GetBytesInBuffer:00000000 SEGGER_RTT_GetBytesInBuffer
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:4357   .text.SEGGER_RTT_GetBytesInBuffer:00000070 $d
/var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s:4362   .rodata._aInitStr.0:00000000 $d
ARM GAS  /var/folders/06/9k7gq4t13mj84z2yhw3grvhc0000gn/T//cc2PaheT.s 			page 116



UNDEFINED SYMBOLS
memcpy
strlen
